// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/callbacks.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ---------------------- Delegation Callbacks ---------------------- //
type SplitDelegation struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Amount    uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *SplitDelegation) Reset()         { *m = SplitDelegation{} }
func (m *SplitDelegation) String() string { return proto.CompactTextString(m) }
func (*SplitDelegation) ProtoMessage()    {}
func (*SplitDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41c99b09b96a5ac, []int{0}
}
func (m *SplitDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplitDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplitDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitDelegation.Merge(m, src)
}
func (m *SplitDelegation) XXX_Size() int {
	return m.Size()
}
func (m *SplitDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_SplitDelegation proto.InternalMessageInfo

func (m *SplitDelegation) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *SplitDelegation) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type DelegateCallback struct {
	HostZoneId       string             `protobuf:"bytes,1,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
	DepositRecordId  uint64             `protobuf:"varint,2,opt,name=deposit_record_id,json=depositRecordId,proto3" json:"deposit_record_id,omitempty"`
	SplitDelegations []*SplitDelegation `protobuf:"bytes,3,rep,name=split_delegations,json=splitDelegations,proto3" json:"split_delegations,omitempty"`
}

func (m *DelegateCallback) Reset()         { *m = DelegateCallback{} }
func (m *DelegateCallback) String() string { return proto.CompactTextString(m) }
func (*DelegateCallback) ProtoMessage()    {}
func (*DelegateCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41c99b09b96a5ac, []int{1}
}
func (m *DelegateCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateCallback.Merge(m, src)
}
func (m *DelegateCallback) XXX_Size() int {
	return m.Size()
}
func (m *DelegateCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateCallback.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateCallback proto.InternalMessageInfo

func (m *DelegateCallback) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func (m *DelegateCallback) GetDepositRecordId() uint64 {
	if m != nil {
		return m.DepositRecordId
	}
	return 0
}

func (m *DelegateCallback) GetSplitDelegations() []*SplitDelegation {
	if m != nil {
		return m.SplitDelegations
	}
	return nil
}

type ClaimCallback struct {
	UserRedemptionRecordId string `protobuf:"bytes,1,opt,name=user_redemption_record_id,json=userRedemptionRecordId,proto3" json:"user_redemption_record_id,omitempty"`
	ChainId                string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EpochNumber            uint64 `protobuf:"varint,3,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *ClaimCallback) Reset()         { *m = ClaimCallback{} }
func (m *ClaimCallback) String() string { return proto.CompactTextString(m) }
func (*ClaimCallback) ProtoMessage()    {}
func (*ClaimCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41c99b09b96a5ac, []int{2}
}
func (m *ClaimCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimCallback.Merge(m, src)
}
func (m *ClaimCallback) XXX_Size() int {
	return m.Size()
}
func (m *ClaimCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimCallback.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimCallback proto.InternalMessageInfo

func (m *ClaimCallback) GetUserRedemptionRecordId() string {
	if m != nil {
		return m.UserRedemptionRecordId
	}
	return ""
}

func (m *ClaimCallback) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ClaimCallback) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

// ---------------------- Reinvest Callback ---------------------- //
type ReinvestCallback struct {
	ReinvestAmount types.Coin `protobuf:"bytes,1,opt,name=reinvest_amount,json=reinvestAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"reinvest_amount"`
	HostZoneId     string     `protobuf:"bytes,3,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
}

func (m *ReinvestCallback) Reset()         { *m = ReinvestCallback{} }
func (m *ReinvestCallback) String() string { return proto.CompactTextString(m) }
func (*ReinvestCallback) ProtoMessage()    {}
func (*ReinvestCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41c99b09b96a5ac, []int{3}
}
func (m *ReinvestCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReinvestCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReinvestCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReinvestCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReinvestCallback.Merge(m, src)
}
func (m *ReinvestCallback) XXX_Size() int {
	return m.Size()
}
func (m *ReinvestCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_ReinvestCallback.DiscardUnknown(m)
}

var xxx_messageInfo_ReinvestCallback proto.InternalMessageInfo

func (m *ReinvestCallback) GetReinvestAmount() types.Coin {
	if m != nil {
		return m.ReinvestAmount
	}
	return types.Coin{}
}

func (m *ReinvestCallback) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

// ---------------------- Undelegation Callbacks ---------------------- //
type UndelegateCallback struct {
	HostZoneId              string             `protobuf:"bytes,1,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
	SplitDelegations        []*SplitDelegation `protobuf:"bytes,2,rep,name=split_delegations,json=splitDelegations,proto3" json:"split_delegations,omitempty"`
	EpochUnbondingRecordIds []uint64           `protobuf:"varint,3,rep,packed,name=epoch_unbonding_record_ids,json=epochUnbondingRecordIds,proto3" json:"epoch_unbonding_record_ids,omitempty"`
}

func (m *UndelegateCallback) Reset()         { *m = UndelegateCallback{} }
func (m *UndelegateCallback) String() string { return proto.CompactTextString(m) }
func (*UndelegateCallback) ProtoMessage()    {}
func (*UndelegateCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41c99b09b96a5ac, []int{4}
}
func (m *UndelegateCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegateCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegateCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegateCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegateCallback.Merge(m, src)
}
func (m *UndelegateCallback) XXX_Size() int {
	return m.Size()
}
func (m *UndelegateCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegateCallback.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegateCallback proto.InternalMessageInfo

func (m *UndelegateCallback) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func (m *UndelegateCallback) GetSplitDelegations() []*SplitDelegation {
	if m != nil {
		return m.SplitDelegations
	}
	return nil
}

func (m *UndelegateCallback) GetEpochUnbondingRecordIds() []uint64 {
	if m != nil {
		return m.EpochUnbondingRecordIds
	}
	return nil
}

// ---------------------- Redemption Callbacks ---------------------- //
type RedemptionCallback struct {
	HostZoneId              string   `protobuf:"bytes,1,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
	EpochUnbondingRecordIds []uint64 `protobuf:"varint,2,rep,packed,name=epoch_unbonding_record_ids,json=epochUnbondingRecordIds,proto3" json:"epoch_unbonding_record_ids,omitempty"`
}

func (m *RedemptionCallback) Reset()         { *m = RedemptionCallback{} }
func (m *RedemptionCallback) String() string { return proto.CompactTextString(m) }
func (*RedemptionCallback) ProtoMessage()    {}
func (*RedemptionCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_f41c99b09b96a5ac, []int{5}
}
func (m *RedemptionCallback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedemptionCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedemptionCallback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedemptionCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedemptionCallback.Merge(m, src)
}
func (m *RedemptionCallback) XXX_Size() int {
	return m.Size()
}
func (m *RedemptionCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_RedemptionCallback.DiscardUnknown(m)
}

var xxx_messageInfo_RedemptionCallback proto.InternalMessageInfo

func (m *RedemptionCallback) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func (m *RedemptionCallback) GetEpochUnbondingRecordIds() []uint64 {
	if m != nil {
		return m.EpochUnbondingRecordIds
	}
	return nil
}

func init() {
	proto.RegisterType((*SplitDelegation)(nil), "stride.stakeibc.SplitDelegation")
	proto.RegisterType((*DelegateCallback)(nil), "stride.stakeibc.DelegateCallback")
	proto.RegisterType((*ClaimCallback)(nil), "stride.stakeibc.ClaimCallback")
	proto.RegisterType((*ReinvestCallback)(nil), "stride.stakeibc.ReinvestCallback")
	proto.RegisterType((*UndelegateCallback)(nil), "stride.stakeibc.UndelegateCallback")
	proto.RegisterType((*RedemptionCallback)(nil), "stride.stakeibc.RedemptionCallback")
}

func init() { proto.RegisterFile("stride/stakeibc/callbacks.proto", fileDescriptor_f41c99b09b96a5ac) }

var fileDescriptor_f41c99b09b96a5ac = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0x76, 0x1a, 0xd4, 0x1d, 0xb4, 0x8b, 0xd0, 0x68, 0x2b, 0x94, 0x96, 0x5c, 0xa8,
	0x90, 0x66, 0x6b, 0xe3, 0x84, 0x38, 0xb1, 0x22, 0x41, 0x25, 0xe0, 0x90, 0x69, 0x97, 0x5d, 0x22,
	0x27, 0xb6, 0x5a, 0xab, 0x89, 0x1d, 0xe5, 0x73, 0x2b, 0xe0, 0x09, 0x38, 0xf2, 0x1a, 0x70, 0xe1,
	0x1d, 0x38, 0xed, 0xb8, 0x23, 0x27, 0x40, 0xed, 0x8b, 0xa0, 0x38, 0x6e, 0x3b, 0x0a, 0x9a, 0x34,
	0x4e, 0xad, 0xff, 0xdf, 0xbf, 0xfe, 0xfe, 0xfe, 0x7e, 0xae, 0x51, 0x0f, 0x74, 0x2e, 0x18, 0x27,
	0xa0, 0xe9, 0x94, 0x8b, 0x28, 0x26, 0x31, 0x4d, 0x92, 0x88, 0xc6, 0x53, 0xc0, 0x59, 0xae, 0xb4,
	0x72, 0x9b, 0xa5, 0x01, 0xaf, 0x0c, 0xdd, 0x7b, 0x63, 0x35, 0x56, 0xa6, 0x46, 0x8a, 0x6f, 0xa5,
	0xad, 0xeb, 0xc5, 0x0a, 0x52, 0x05, 0x24, 0xa2, 0xc0, 0xc9, 0xfc, 0x28, 0xe2, 0x9a, 0x1e, 0x91,
	0x58, 0x09, 0x59, 0xd6, 0xfd, 0x97, 0xa8, 0x79, 0x9a, 0x25, 0x42, 0xbf, 0xe0, 0x09, 0x1f, 0x53,
	0x2d, 0x94, 0x74, 0x1f, 0xa0, 0xfa, 0x9c, 0x26, 0x82, 0x51, 0xad, 0xf2, 0xb6, 0xd3, 0x77, 0x06,
	0xf5, 0x60, 0x23, 0xb8, 0x07, 0x68, 0x97, 0xa6, 0x6a, 0x26, 0x75, 0xbb, 0xda, 0x77, 0x06, 0x3b,
	0x81, 0x5d, 0xf9, 0x5f, 0x1d, 0xd4, 0xb2, 0x9b, 0xf0, 0xa1, 0xcd, 0xea, 0xf6, 0xd1, 0xde, 0x44,
	0x81, 0x0e, 0x3f, 0x28, 0xc9, 0x43, 0xc1, 0xec, 0x6e, 0xa8, 0xd0, 0xce, 0x95, 0xe4, 0x23, 0xe6,
	0x3e, 0x46, 0xfb, 0x8c, 0x67, 0x0a, 0x84, 0x0e, 0x73, 0x1e, 0xab, 0x9c, 0x15, 0xb6, 0x72, 0xe7,
	0xa6, 0x2d, 0x04, 0x46, 0x1f, 0x31, 0xf7, 0x0d, 0xda, 0x87, 0x22, 0x6b, 0xc8, 0xd6, 0x61, 0xa1,
	0x5d, 0xeb, 0xd7, 0x06, 0x8d, 0xe3, 0x3e, 0xde, 0x1a, 0x07, 0xde, 0x3a, 0x55, 0xd0, 0x82, 0x3f,
	0x05, 0xf0, 0x3f, 0x3a, 0xe8, 0xce, 0x30, 0xa1, 0x22, 0x5d, 0xc7, 0x7d, 0x8a, 0x3a, 0x33, 0xe0,
	0x79, 0x98, 0x73, 0xc6, 0xd3, 0xac, 0x70, 0x5d, 0x09, 0x55, 0x66, 0x3f, 0x28, 0x0c, 0xc1, 0xba,
	0xbe, 0xce, 0xd6, 0x41, 0xb7, 0xe3, 0x09, 0x15, 0x72, 0x15, 0xbf, 0x1e, 0xdc, 0x32, 0xeb, 0x11,
	0x73, 0x1f, 0xa2, 0x3d, 0x9e, 0xa9, 0x78, 0x12, 0xca, 0x59, 0x1a, 0xf1, 0xbc, 0x5d, 0x33, 0xa7,
	0x6b, 0x18, 0xed, 0xad, 0x91, 0xfc, 0xcf, 0x0e, 0x6a, 0x05, 0x5c, 0xc8, 0x39, 0x07, 0xbd, 0x4e,
	0x03, 0xa8, 0x99, 0x5b, 0x2d, 0xb4, 0x23, 0x2f, 0x32, 0x34, 0x8e, 0x3b, 0xb8, 0x84, 0x8a, 0x0b,
	0xa8, 0xd8, 0x42, 0xc5, 0x43, 0x25, 0xe4, 0x09, 0xb9, 0xf8, 0xd1, 0xab, 0x7c, 0xf9, 0xd9, 0x7b,
	0x34, 0x16, 0x7a, 0x32, 0x8b, 0x70, 0xac, 0x52, 0x62, 0x6f, 0x40, 0xf9, 0x71, 0x08, 0x6c, 0x4a,
	0xf4, 0xfb, 0x8c, 0x83, 0xf9, 0x41, 0x70, 0x77, 0xd5, 0xe2, 0xb9, 0xe9, 0xf0, 0x17, 0xb1, 0xda,
	0x36, 0x31, 0xff, 0x9b, 0x83, 0xdc, 0x33, 0xc9, 0x6e, 0x8e, 0xfa, 0x9f, 0xf8, 0xaa, 0xff, 0x8b,
	0xcf, 0x7d, 0x86, 0xba, 0xe5, 0x58, 0x67, 0x32, 0x52, 0x92, 0x09, 0x39, 0xde, 0xc0, 0x2a, 0xaf,
	0xc5, 0x4e, 0x70, 0xdf, 0x38, 0xce, 0x56, 0x86, 0x15, 0x2d, 0xf0, 0x01, 0xb9, 0x1b, 0x88, 0x37,
	0x38, 0xc3, 0xf5, 0x4d, 0xab, 0xd7, 0x36, 0x3d, 0x79, 0x75, 0xb1, 0xf0, 0x9c, 0xcb, 0x85, 0xe7,
	0xfc, 0x5a, 0x78, 0xce, 0xa7, 0xa5, 0x57, 0xb9, 0x5c, 0x7a, 0x95, 0xef, 0x4b, 0xaf, 0x72, 0x8e,
	0xaf, 0xe0, 0x3a, 0x35, 0x93, 0x38, 0x7c, 0x4d, 0x23, 0x20, 0xf6, 0x11, 0x78, 0xb7, 0x79, 0x06,
	0x0c, 0xba, 0x68, 0xd7, 0xfc, 0x79, 0x9f, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xc6, 0x80,
	0x24, 0x26, 0x04, 0x00, 0x00,
}

func (m *SplitDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplitDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SplitDelegations) > 0 {
		for iNdEx := len(m.SplitDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SplitDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCallbacks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DepositRecordId != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.DepositRecordId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintCallbacks(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserRedemptionRecordId) > 0 {
		i -= len(m.UserRedemptionRecordId)
		copy(dAtA[i:], m.UserRedemptionRecordId)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.UserRedemptionRecordId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReinvestCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinvestCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReinvestCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.ReinvestAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCallbacks(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UndelegateCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegateCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegateCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochUnbondingRecordIds) > 0 {
		dAtA3 := make([]byte, len(m.EpochUnbondingRecordIds)*10)
		var j2 int
		for _, num := range m.EpochUnbondingRecordIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintCallbacks(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SplitDelegations) > 0 {
		for iNdEx := len(m.SplitDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SplitDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCallbacks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedemptionCallback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedemptionCallback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedemptionCallback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochUnbondingRecordIds) > 0 {
		dAtA5 := make([]byte, len(m.EpochUnbondingRecordIds)*10)
		var j4 int
		for _, num := range m.EpochUnbondingRecordIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintCallbacks(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintCallbacks(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCallbacks(dAtA []byte, offset int, v uint64) int {
	offset -= sovCallbacks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SplitDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovCallbacks(uint64(m.Amount))
	}
	return n
}

func (m *DelegateCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	if m.DepositRecordId != 0 {
		n += 1 + sovCallbacks(uint64(m.DepositRecordId))
	}
	if len(m.SplitDelegations) > 0 {
		for _, e := range m.SplitDelegations {
			l = e.Size()
			n += 1 + l + sovCallbacks(uint64(l))
		}
	}
	return n
}

func (m *ClaimCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserRedemptionRecordId)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovCallbacks(uint64(m.EpochNumber))
	}
	return n
}

func (m *ReinvestCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReinvestAmount.Size()
	n += 1 + l + sovCallbacks(uint64(l))
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	return n
}

func (m *UndelegateCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	if len(m.SplitDelegations) > 0 {
		for _, e := range m.SplitDelegations {
			l = e.Size()
			n += 1 + l + sovCallbacks(uint64(l))
		}
	}
	if len(m.EpochUnbondingRecordIds) > 0 {
		l = 0
		for _, e := range m.EpochUnbondingRecordIds {
			l += sovCallbacks(uint64(e))
		}
		n += 1 + sovCallbacks(uint64(l)) + l
	}
	return n
}

func (m *RedemptionCallback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovCallbacks(uint64(l))
	}
	if len(m.EpochUnbondingRecordIds) > 0 {
		l = 0
		for _, e := range m.EpochUnbondingRecordIds {
			l += sovCallbacks(uint64(e))
		}
		n += 1 + sovCallbacks(uint64(l)) + l
	}
	return n
}

func sovCallbacks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCallbacks(x uint64) (n int) {
	return sovCallbacks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SplitDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRecordId", wireType)
			}
			m.DepositRecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositRecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitDelegations = append(m.SplitDelegations, &SplitDelegation{})
			if err := m.SplitDelegations[len(m.SplitDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRedemptionRecordId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRedemptionRecordId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReinvestCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinvestCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinvestCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinvestAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReinvestAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegateCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegateCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegateCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitDelegations = append(m.SplitDelegations, &SplitDelegation{})
			if err := m.SplitDelegations[len(m.SplitDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCallbacks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EpochUnbondingRecordIds = append(m.EpochUnbondingRecordIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCallbacks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCallbacks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCallbacks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EpochUnbondingRecordIds) == 0 {
					m.EpochUnbondingRecordIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCallbacks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EpochUnbondingRecordIds = append(m.EpochUnbondingRecordIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochUnbondingRecordIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedemptionCallback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedemptionCallback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedemptionCallback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallbacks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallbacks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCallbacks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EpochUnbondingRecordIds = append(m.EpochUnbondingRecordIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCallbacks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCallbacks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCallbacks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EpochUnbondingRecordIds) == 0 {
					m.EpochUnbondingRecordIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCallbacks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EpochUnbondingRecordIds = append(m.EpochUnbondingRecordIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochUnbondingRecordIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallbacks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallbacks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCallbacks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCallbacks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallbacks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCallbacks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCallbacks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCallbacks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCallbacks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCallbacks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCallbacks = fmt.Errorf("proto: unexpected end of group")
)
