// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stakeibc/ica_account.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ICAAccountType int32

const (
	ICAAccountType_DELEGATION ICAAccountType = 0
	ICAAccountType_FEE        ICAAccountType = 1
	ICAAccountType_WITHDRAWAL ICAAccountType = 2
)

var ICAAccountType_name = map[int32]string{
	0: "DELEGATION",
	1: "FEE",
	2: "WITHDRAWAL",
}

var ICAAccountType_value = map[string]int32{
	"DELEGATION": 0,
	"FEE":        1,
	"WITHDRAWAL": 2,
}

func (x ICAAccountType) String() string {
	return proto.EnumName(ICAAccountType_name, int32(x))
}

func (ICAAccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7243c23ee376c2f, []int{0}
}

// TODO(TEST-XX): Update these fields to be more useful (e.g. balances should be coins, maybe store port name directly)
type ICAAccount struct {
	Address                             string         `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	UndelegatedBalance                  int64          `protobuf:"varint,2,opt,name=undelegatedBalance,proto3" json:"undelegatedBalance,omitempty"`
	DelegatedBalance                    int64          `protobuf:"varint,3,opt,name=delegatedBalance,proto3" json:"delegatedBalance,omitempty"`
	Delegations                         []*Delegation  `protobuf:"bytes,4,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Target                              ICAAccountType `protobuf:"varint,5,opt,name=target,proto3,enum=Stridelabs.stride.stakeibc.ICAAccountType" json:"target,omitempty"`
	HeightLastQueriedDelegatedBalance   int64          `protobuf:"varint,6,opt,name=heightLastQueriedDelegatedBalance,proto3" json:"heightLastQueriedDelegatedBalance,omitempty"`
	HeightLastQueriedUndelegatedBalance int64          `protobuf:"varint,7,opt,name=heightLastQueriedUndelegatedBalance,proto3" json:"heightLastQueriedUndelegatedBalance,omitempty"`
}

func (m *ICAAccount) Reset()         { *m = ICAAccount{} }
func (m *ICAAccount) String() string { return proto.CompactTextString(m) }
func (*ICAAccount) ProtoMessage()    {}
func (*ICAAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7243c23ee376c2f, []int{0}
}
func (m *ICAAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICAAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICAAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICAAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICAAccount.Merge(m, src)
}
func (m *ICAAccount) XXX_Size() int {
	return m.Size()
}
func (m *ICAAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ICAAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ICAAccount proto.InternalMessageInfo

func (m *ICAAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ICAAccount) GetUndelegatedBalance() int64 {
	if m != nil {
		return m.UndelegatedBalance
	}
	return 0
}

func (m *ICAAccount) GetDelegatedBalance() int64 {
	if m != nil {
		return m.DelegatedBalance
	}
	return 0
}

func (m *ICAAccount) GetDelegations() []*Delegation {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *ICAAccount) GetTarget() ICAAccountType {
	if m != nil {
		return m.Target
	}
	return ICAAccountType_DELEGATION
}

func (m *ICAAccount) GetHeightLastQueriedDelegatedBalance() int64 {
	if m != nil {
		return m.HeightLastQueriedDelegatedBalance
	}
	return 0
}

func (m *ICAAccount) GetHeightLastQueriedUndelegatedBalance() int64 {
	if m != nil {
		return m.HeightLastQueriedUndelegatedBalance
	}
	return 0
}

func init() {
	proto.RegisterEnum("Stridelabs.stride.stakeibc.ICAAccountType", ICAAccountType_name, ICAAccountType_value)
	proto.RegisterType((*ICAAccount)(nil), "Stridelabs.stride.stakeibc.ICAAccount")
}

func init() { proto.RegisterFile("stakeibc/ica_account.proto", fileDescriptor_f7243c23ee376c2f) }

var fileDescriptor_f7243c23ee376c2f = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x6b, 0xa3, 0x40,
	0x1c, 0xc6, 0x9d, 0xb8, 0x9b, 0xb0, 0x13, 0x08, 0x32, 0xec, 0xc1, 0x78, 0x10, 0x77, 0x17, 0x16,
	0x09, 0x64, 0x84, 0xec, 0x69, 0x8f, 0xba, 0xba, 0x9b, 0x80, 0xec, 0x6e, 0x6d, 0x4a, 0xa0, 0x97,
	0x30, 0xea, 0x60, 0xa4, 0x89, 0x06, 0x67, 0x84, 0xe6, 0x5b, 0xf4, 0xc3, 0xf4, 0x43, 0x94, 0x9e,
	0x42, 0x4f, 0x3d, 0x96, 0xe4, 0x8b, 0x94, 0x68, 0x5e, 0xda, 0xda, 0xb7, 0x9b, 0xe3, 0xf3, 0x7b,
	0xfe, 0x2f, 0x0f, 0x7f, 0xa8, 0x30, 0x4e, 0xce, 0x68, 0xec, 0x07, 0x46, 0x1c, 0x90, 0x31, 0x09,
	0x82, 0x34, 0x4f, 0x38, 0x9e, 0x67, 0x29, 0x4f, 0x91, 0x72, 0xcc, 0xb3, 0x38, 0xa4, 0x53, 0xe2,
	0x33, 0xcc, 0x8a, 0x4f, 0xbc, 0xa3, 0x95, 0xf6, 0xde, 0x17, 0xd2, 0x29, 0x8d, 0x08, 0x8f, 0xd3,
	0xa4, 0xb4, 0x29, 0xed, 0x20, 0x65, 0xb3, 0x94, 0x8d, 0x8b, 0x97, 0x51, 0x3e, 0x4a, 0xe9, 0xeb,
	0xb5, 0x08, 0xe1, 0xe0, 0x97, 0x69, 0x96, 0x6d, 0x50, 0x0f, 0x36, 0x48, 0x18, 0x66, 0x94, 0x31,
	0x19, 0x68, 0x40, 0xff, 0x64, 0xc9, 0x37, 0x97, 0xdd, 0xcf, 0x5b, 0x87, 0x59, 0x2a, 0x9b, 0x19,
	0x92, 0xc8, 0xdb, 0x81, 0x08, 0x43, 0x94, 0x27, 0xdb, 0x9e, 0x34, 0xb4, 0xc8, 0x94, 0x24, 0x01,
	0x95, 0x6b, 0x1a, 0xd0, 0x45, 0xef, 0x19, 0x05, 0x75, 0xa0, 0x54, 0xa1, 0xc5, 0x82, 0xae, 0xfc,
	0x47, 0x7d, 0xd8, 0x3c, 0x6c, 0xc3, 0xe4, 0x0f, 0x9a, 0xa8, 0x37, 0x7b, 0xdf, 0xf1, 0xcb, 0x31,
	0x60, 0x7b, 0x8f, 0x7b, 0x0f, 0xad, 0xc8, 0x82, 0x75, 0x4e, 0xb2, 0x88, 0x72, 0xf9, 0xa3, 0x06,
	0xf4, 0x56, 0xaf, 0xf3, 0x5a, 0x91, 0x43, 0x22, 0xc3, 0xc5, 0x9c, 0x7a, 0x5b, 0x27, 0x72, 0xe1,
	0x97, 0x09, 0x8d, 0xa3, 0x09, 0x77, 0x09, 0xe3, 0x47, 0x39, 0xcd, 0x62, 0x1a, 0xda, 0x4f, 0x57,
	0xa9, 0x17, 0xab, 0xbc, 0x0d, 0xa2, 0xff, 0xf0, 0x5b, 0x05, 0x3a, 0xa9, 0x06, 0xd9, 0x28, 0xea,
	0xbd, 0x07, 0xed, 0xfc, 0x84, 0xad, 0xc7, 0x93, 0xa3, 0x16, 0x84, 0xb6, 0xe3, 0x3a, 0x7f, 0xcc,
	0xe1, 0xe0, 0xdf, 0x5f, 0x49, 0x40, 0x0d, 0x28, 0xfe, 0x76, 0x1c, 0x09, 0x6c, 0x84, 0xd1, 0x60,
	0xd8, 0xb7, 0x3d, 0x73, 0x64, 0xba, 0x52, 0xcd, 0xea, 0x5f, 0xad, 0x54, 0xb0, 0x5c, 0xa9, 0xe0,
	0x6e, 0xa5, 0x82, 0x8b, 0xb5, 0x2a, 0x2c, 0xd7, 0xaa, 0x70, 0xbb, 0x56, 0x85, 0x53, 0x1c, 0xc5,
	0x7c, 0x92, 0xfb, 0x38, 0x48, 0x67, 0x46, 0x19, 0x59, 0xd7, 0x25, 0x3e, 0x33, 0xca, 0xcc, 0x8c,
	0x73, 0x63, 0x7f, 0x77, 0x7c, 0x31, 0xa7, 0xcc, 0xaf, 0x17, 0x87, 0xf5, 0xe3, 0x3e, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0xc1, 0x5b, 0x9a, 0xc8, 0x02, 0x00, 0x00,
}

func (m *ICAAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICAAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICAAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeightLastQueriedUndelegatedBalance != 0 {
		i = encodeVarintIcaAccount(dAtA, i, uint64(m.HeightLastQueriedUndelegatedBalance))
		i--
		dAtA[i] = 0x38
	}
	if m.HeightLastQueriedDelegatedBalance != 0 {
		i = encodeVarintIcaAccount(dAtA, i, uint64(m.HeightLastQueriedDelegatedBalance))
		i--
		dAtA[i] = 0x30
	}
	if m.Target != 0 {
		i = encodeVarintIcaAccount(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIcaAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DelegatedBalance != 0 {
		i = encodeVarintIcaAccount(dAtA, i, uint64(m.DelegatedBalance))
		i--
		dAtA[i] = 0x18
	}
	if m.UndelegatedBalance != 0 {
		i = encodeVarintIcaAccount(dAtA, i, uint64(m.UndelegatedBalance))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIcaAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIcaAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovIcaAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ICAAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIcaAccount(uint64(l))
	}
	if m.UndelegatedBalance != 0 {
		n += 1 + sovIcaAccount(uint64(m.UndelegatedBalance))
	}
	if m.DelegatedBalance != 0 {
		n += 1 + sovIcaAccount(uint64(m.DelegatedBalance))
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovIcaAccount(uint64(l))
		}
	}
	if m.Target != 0 {
		n += 1 + sovIcaAccount(uint64(m.Target))
	}
	if m.HeightLastQueriedDelegatedBalance != 0 {
		n += 1 + sovIcaAccount(uint64(m.HeightLastQueriedDelegatedBalance))
	}
	if m.HeightLastQueriedUndelegatedBalance != 0 {
		n += 1 + sovIcaAccount(uint64(m.HeightLastQueriedUndelegatedBalance))
	}
	return n
}

func sovIcaAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIcaAccount(x uint64) (n int) {
	return sovIcaAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ICAAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcaAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICAAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICAAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcaAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcaAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegatedBalance", wireType)
			}
			m.UndelegatedBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndelegatedBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedBalance", wireType)
			}
			m.DelegatedBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatedBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIcaAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIcaAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &Delegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= ICAAccountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightLastQueriedDelegatedBalance", wireType)
			}
			m.HeightLastQueriedDelegatedBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightLastQueriedDelegatedBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightLastQueriedUndelegatedBalance", wireType)
			}
			m.HeightLastQueriedUndelegatedBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightLastQueriedUndelegatedBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIcaAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcaAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIcaAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIcaAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcaAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIcaAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIcaAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIcaAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIcaAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIcaAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIcaAccount = fmt.Errorf("proto: unexpected end of group")
)
