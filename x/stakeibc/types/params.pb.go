// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
// next id: 18
type Params struct {
	// define epoch lengths, in stride_epochs
	RewardsInterval        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=rewards_interval,json=rewardsInterval,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"rewards_interval"`
	DelegateInterval       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=delegate_interval,json=delegateInterval,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"delegate_interval"`
	DepositInterval        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=deposit_interval,json=depositInterval,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposit_interval"`
	RedemptionRateInterval github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=redemption_rate_interval,json=redemptionRateInterval,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"redemption_rate_interval"`
	StrideCommission       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=stride_commission,json=strideCommission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"stride_commission"`
	// zone_com_address stores which addresses to
	// send the Stride commission too, as well as what portion
	// of the fee each address is entitled to
	// TODO implement this
	ZoneComAddress                   map[string]string                      `protobuf:"bytes,5,rep,name=zone_com_address,json=zoneComAddress,proto3" json:"zone_com_address,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReinvestInterval                 github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=reinvest_interval,json=reinvestInterval,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reinvest_interval"`
	ValidatorRebalancingThreshold    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=validator_rebalancing_threshold,json=validatorRebalancingThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"validator_rebalancing_threshold"`
	IcaTimeoutNanos                  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=ica_timeout_nanos,json=icaTimeoutNanos,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ica_timeout_nanos"`
	BufferSize                       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=buffer_size,json=bufferSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"buffer_size"`
	IbcTimeoutBlocks                 github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=ibc_timeout_blocks,json=ibcTimeoutBlocks,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ibc_timeout_blocks"`
	FeeTransferTimeoutNanos          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=fee_transfer_timeout_nanos,json=feeTransferTimeoutNanos,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_transfer_timeout_nanos"`
	MaxStakeIcaCallsPerEpoch         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=max_stake_ica_calls_per_epoch,json=maxStakeIcaCallsPerEpoch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_stake_ica_calls_per_epoch"`
	SafetyMinRedemptionRateThreshold github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,14,opt,name=safety_min_redemption_rate_threshold,json=safetyMinRedemptionRateThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"safety_min_redemption_rate_threshold"`
	SafetyMaxRedemptionRateThreshold github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,15,opt,name=safety_max_redemption_rate_threshold,json=safetyMaxRedemptionRateThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"safety_max_redemption_rate_threshold"`
	IbcTransferTimeoutNanos          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,16,opt,name=ibc_transfer_timeout_nanos,json=ibcTransferTimeoutNanos,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ibc_transfer_timeout_nanos"`
	SafetyNumValidators              github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,17,opt,name=safety_num_validators,json=safetyNumValidators,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"safety_num_validators"`
	SafetyMaxSlashPercent            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,18,opt,name=safety_max_slash_percent,json=safetyMaxSlashPercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"safety_max_slash_percent"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aeaab6a38c2b438, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetZoneComAddress() map[string]string {
	if m != nil {
		return m.ZoneComAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "stride.stakeibc.Params")
	proto.RegisterMapType((map[string]string)(nil), "stride.stakeibc.Params.ZoneComAddressEntry")
}

func init() { proto.RegisterFile("stride/stakeibc/params.proto", fileDescriptor_5aeaab6a38c2b438) }

var fileDescriptor_5aeaab6a38c2b438 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcf, 0x6e, 0x13, 0x3b,
	0x14, 0xc6, 0x93, 0xfe, 0xbb, 0xb7, 0xee, 0xbd, 0x6d, 0x32, 0x6d, 0x61, 0x14, 0xd1, 0xa4, 0x42,
	0x08, 0x55, 0x42, 0x9d, 0x08, 0x10, 0x12, 0xea, 0xae, 0xad, 0xba, 0xa8, 0x80, 0x52, 0x25, 0x05,
	0xa9, 0x2d, 0x92, 0xe5, 0xf1, 0x9c, 0x24, 0x56, 0x66, 0xec, 0xc8, 0x76, 0x42, 0x92, 0x05, 0xcf,
	0xc0, 0x92, 0x25, 0x8f, 0xd3, 0x65, 0x97, 0x88, 0x45, 0x85, 0xda, 0xb7, 0x60, 0x85, 0x66, 0x3c,
	0x99, 0x24, 0x55, 0x61, 0x61, 0x56, 0x99, 0xc4, 0x93, 0xdf, 0xf7, 0xf9, 0x9c, 0xcf, 0x3e, 0xe8,
	0x81, 0xd2, 0x92, 0x05, 0x50, 0x55, 0x9a, 0xb4, 0x81, 0xf9, 0xb4, 0xda, 0x21, 0x92, 0x44, 0xca,
	0xeb, 0x48, 0xa1, 0x85, 0xb3, 0x62, 0x56, 0xbd, 0xd1, 0x6a, 0x69, 0xad, 0x29, 0x9a, 0x22, 0x59,
	0xab, 0xc6, 0x4f, 0xe6, 0xb5, 0x87, 0x3f, 0x97, 0xd1, 0xc2, 0x71, 0xf2, 0x3f, 0xe7, 0x14, 0x15,
	0x24, 0x7c, 0x24, 0x32, 0x50, 0x98, 0x71, 0x0d, 0xb2, 0x47, 0x42, 0x37, 0xbf, 0x99, 0xdf, 0x5a,
	0xdc, 0xf3, 0x2e, 0xae, 0x2a, 0xb9, 0xef, 0x57, 0x95, 0xc7, 0x4d, 0xa6, 0x5b, 0x5d, 0xdf, 0xa3,
	0x22, 0xaa, 0x52, 0xa1, 0x22, 0xa1, 0xd2, 0x8f, 0x6d, 0x15, 0xb4, 0xab, 0x7a, 0xd0, 0x01, 0xe5,
	0x1d, 0x72, 0x5d, 0x5b, 0x49, 0x39, 0x87, 0x29, 0xc6, 0x39, 0x47, 0xc5, 0x00, 0x42, 0x68, 0x12,
	0x0d, 0x63, 0xf6, 0x82, 0x15, 0xbb, 0x30, 0x02, 0x65, 0xf0, 0x53, 0x54, 0x08, 0xa0, 0x23, 0x14,
	0xd3, 0x63, 0xf6, 0x8c, 0x9d, 0xef, 0x94, 0x93, 0xa1, 0x5b, 0xc8, 0x95, 0x10, 0x40, 0xd4, 0xd1,
	0x4c, 0x70, 0x2c, 0xa7, 0xec, 0xcf, 0x5a, 0x49, 0xdc, 0x1b, 0xf3, 0x6a, 0x93, 0x9b, 0x38, 0x47,
	0x45, 0xd3, 0x30, 0x4c, 0x45, 0x14, 0x31, 0xa5, 0x98, 0xe0, 0xee, 0x9c, 0x5d, 0x85, 0x0c, 0x68,
	0x3f, 0xe3, 0x38, 0xef, 0x50, 0x61, 0x28, 0x78, 0x82, 0xc6, 0x24, 0x08, 0x24, 0x28, 0xe5, 0xce,
	0x6f, 0xce, 0x6e, 0x2d, 0x3d, 0x7b, 0xe2, 0xdd, 0x8a, 0x89, 0x67, 0xc2, 0xe0, 0x9d, 0x09, 0x1e,
	0x13, 0x76, 0xcd, 0xdb, 0x07, 0x5c, 0xcb, 0x41, 0x6d, 0x79, 0x38, 0xf5, 0x63, 0xec, 0x59, 0x02,
	0xe3, 0x3d, 0x50, 0x13, 0x95, 0xff, 0xc7, 0xce, 0xf3, 0x08, 0x94, 0x15, 0xa4, 0x87, 0x2a, 0x3d,
	0x12, 0xb2, 0x80, 0x68, 0x21, 0xb1, 0x04, 0x9f, 0x84, 0x84, 0x53, 0xc6, 0x9b, 0x58, 0xb7, 0x24,
	0xa8, 0x96, 0x08, 0x03, 0xf7, 0x5f, 0x2b, 0xa9, 0x8d, 0x0c, 0x5b, 0x1b, 0x53, 0x4f, 0x46, 0x50,
	0xe7, 0x0c, 0x15, 0x19, 0x25, 0x58, 0xb3, 0x08, 0x44, 0x57, 0x63, 0x4e, 0xb8, 0x50, 0xee, 0xa2,
	0x5d, 0x9c, 0x18, 0x25, 0x27, 0x86, 0x73, 0x14, 0x63, 0x9c, 0xb7, 0x68, 0xc9, 0xef, 0x36, 0x1a,
	0x20, 0xb1, 0x62, 0x43, 0x70, 0x91, 0x15, 0x15, 0x19, 0x44, 0x9d, 0x0d, 0xc1, 0xf9, 0x80, 0x1c,
	0xe6, 0xd3, 0xcc, 0xac, 0x1f, 0x0a, 0xda, 0x56, 0xee, 0x92, 0x5d, 0x0b, 0x98, 0x4f, 0x53, 0xb7,
	0x7b, 0x09, 0xc7, 0x69, 0xa3, 0x52, 0x03, 0x00, 0x6b, 0x49, 0xb8, 0x8a, 0x4d, 0x4f, 0xd7, 0xe4,
	0x3f, 0x2b, 0x95, 0xfb, 0x0d, 0x80, 0x93, 0x14, 0x38, 0x55, 0x1b, 0x81, 0x36, 0x22, 0xd2, 0xc7,
	0x49, 0x0e, 0x71, 0xdc, 0x01, 0x4a, 0xc2, 0x50, 0xe1, 0x0e, 0x48, 0x0c, 0x1d, 0x41, 0x5b, 0xee,
	0xff, 0x56, 0x7a, 0x6e, 0x44, 0xfa, 0xf5, 0x98, 0x79, 0x48, 0xc9, 0x7e, 0x4c, 0x3c, 0x06, 0x79,
	0x10, 0xf3, 0x9c, 0x4f, 0xe8, 0x91, 0x22, 0x0d, 0xd0, 0x03, 0x1c, 0x31, 0x8e, 0x6f, 0x1f, 0xf3,
	0x71, 0xca, 0x96, 0xad, 0x74, 0x37, 0x0d, 0xfb, 0x0d, 0xe3, 0xb5, 0xa9, 0x03, 0x3f, 0x0e, 0xda,
	0x84, 0x3e, 0xe9, 0xff, 0x41, 0x7f, 0xe5, 0xaf, 0xf4, 0x49, 0xff, 0x77, 0xfa, 0x6d, 0x54, 0x4a,
	0xb2, 0x73, 0x77, 0x77, 0x0b, 0x76, 0xdd, 0x8d, 0x33, 0x74, 0x57, 0x77, 0x7d, 0xb4, 0x9e, 0x6e,
	0x96, 0x77, 0x23, 0x9c, 0x9d, 0x40, 0xe5, 0x16, 0xad, 0x74, 0x56, 0x0d, 0xec, 0xa8, 0x1b, 0xbd,
	0xcf, 0x50, 0x4e, 0x13, 0xb9, 0x13, 0x05, 0x55, 0x21, 0x51, 0xad, 0x38, 0x3e, 0x14, 0xb8, 0x76,
	0x1d, 0x2b, 0x99, 0xf5, 0xac, 0x88, 0xf5, 0x98, 0x76, 0x6c, 0x60, 0xa5, 0x5d, 0xb4, 0x7a, 0xc7,
	0xf5, 0xe8, 0x14, 0xd0, 0x6c, 0x1b, 0x06, 0x66, 0x64, 0xd6, 0xe2, 0x47, 0x67, 0x0d, 0xcd, 0xf7,
	0x48, 0xd8, 0x05, 0x33, 0x8e, 0x6a, 0xe6, 0xcb, 0xce, 0xcc, 0xcb, 0xfc, 0xce, 0xdc, 0x97, 0xaf,
	0x95, 0xdc, 0xde, 0xab, 0x8b, 0xeb, 0x72, 0xfe, 0xf2, 0xba, 0x9c, 0xff, 0x71, 0x5d, 0xce, 0x7f,
	0xbe, 0x29, 0xe7, 0x2e, 0x6f, 0xca, 0xb9, 0x6f, 0x37, 0xe5, 0xdc, 0xd9, 0xd3, 0x09, 0x87, 0xf5,
	0xe4, 0x86, 0xde, 0x7e, 0x4d, 0x7c, 0x55, 0x4d, 0x47, 0x7e, 0xef, 0x45, 0xb5, 0x3f, 0x9e, 0xfb,
	0x89, 0x61, 0x7f, 0x21, 0x19, 0xe8, 0xcf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x97, 0x3f,
	0xe6, 0x17, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SafetyMaxSlashPercent.Size()
		i -= size
		if _, err := m.SafetyMaxSlashPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.SafetyNumValidators.Size()
		i -= size
		if _, err := m.SafetyNumValidators.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.IbcTransferTimeoutNanos.Size()
		i -= size
		if _, err := m.IbcTransferTimeoutNanos.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.SafetyMaxRedemptionRateThreshold.Size()
		i -= size
		if _, err := m.SafetyMaxRedemptionRateThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.SafetyMinRedemptionRateThreshold.Size()
		i -= size
		if _, err := m.SafetyMinRedemptionRateThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.MaxStakeIcaCallsPerEpoch.Size()
		i -= size
		if _, err := m.MaxStakeIcaCallsPerEpoch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.FeeTransferTimeoutNanos.Size()
		i -= size
		if _, err := m.FeeTransferTimeoutNanos.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.IbcTimeoutBlocks.Size()
		i -= size
		if _, err := m.IbcTimeoutBlocks.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.BufferSize.Size()
		i -= size
		if _, err := m.BufferSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.IcaTimeoutNanos.Size()
		i -= size
		if _, err := m.IcaTimeoutNanos.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ValidatorRebalancingThreshold.Size()
		i -= size
		if _, err := m.ValidatorRebalancingThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.ReinvestInterval.Size()
		i -= size
		if _, err := m.ReinvestInterval.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DelegateInterval.Size()
		i -= size
		if _, err := m.DelegateInterval.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ZoneComAddress) > 0 {
		for k := range m.ZoneComAddress {
			v := m.ZoneComAddress[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintParams(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.StrideCommission.Size()
		i -= size
		if _, err := m.StrideCommission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.RedemptionRateInterval.Size()
		i -= size
		if _, err := m.RedemptionRateInterval.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.DepositInterval.Size()
		i -= size
		if _, err := m.DepositInterval.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.RewardsInterval.Size()
		i -= size
		if _, err := m.RewardsInterval.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardsInterval.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DepositInterval.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.RedemptionRateInterval.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.StrideCommission.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.ZoneComAddress) > 0 {
		for k, v := range m.ZoneComAddress {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + 1 + len(v) + sovParams(uint64(len(v)))
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	l = m.DelegateInterval.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ReinvestInterval.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ValidatorRebalancingThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.IcaTimeoutNanos.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BufferSize.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.IbcTimeoutBlocks.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.FeeTransferTimeoutNanos.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxStakeIcaCallsPerEpoch.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SafetyMinRedemptionRateThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SafetyMaxRedemptionRateThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.IbcTransferTimeoutNanos.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SafetyNumValidators.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SafetyMaxSlashPercent.Size()
	n += 2 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedemptionRateInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrideCommission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StrideCommission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneComAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZoneComAddress == nil {
				m.ZoneComAddress = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ZoneComAddress[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegateInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinvestInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReinvestInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRebalancingThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorRebalancingThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaTimeoutNanos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IcaTimeoutNanos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BufferSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTimeoutBlocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IbcTimeoutBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTransferTimeoutNanos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeTransferTimeoutNanos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStakeIcaCallsPerEpoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxStakeIcaCallsPerEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafetyMinRedemptionRateThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SafetyMinRedemptionRateThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafetyMaxRedemptionRateThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SafetyMaxRedemptionRateThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTransferTimeoutNanos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IbcTransferTimeoutNanos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafetyNumValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SafetyNumValidators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafetyMaxSlashPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SafetyMaxSlashPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
