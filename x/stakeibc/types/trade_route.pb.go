// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/trade_route.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradeHop struct {
	TransferChannelId string     `protobuf:"bytes,1,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
	FromAccount       ICAAccount `protobuf:"bytes,2,opt,name=from_account,json=fromAccount,proto3" json:"from_account"`
	ToAccount         ICAAccount `protobuf:"bytes,3,opt,name=to_account,json=toAccount,proto3" json:"to_account"`
}

func (m *TradeHop) Reset()         { *m = TradeHop{} }
func (m *TradeHop) String() string { return proto.CompactTextString(m) }
func (*TradeHop) ProtoMessage()    {}
func (*TradeHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_c252b142ecf88017, []int{0}
}
func (m *TradeHop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeHop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeHop.Merge(m, src)
}
func (m *TradeHop) XXX_Size() int {
	return m.Size()
}
func (m *TradeHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeHop.DiscardUnknown(m)
}

var xxx_messageInfo_TradeHop proto.InternalMessageInfo

func (m *TradeHop) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

func (m *TradeHop) GetFromAccount() ICAAccount {
	if m != nil {
		return m.FromAccount
	}
	return ICAAccount{}
}

func (m *TradeHop) GetToAccount() ICAAccount {
	if m != nil {
		return m.ToAccount
	}
	return ICAAccount{}
}

type TradeRoute struct {
	RewardDenomOnHostZone   string   `protobuf:"bytes,1,opt,name=reward_denom_on_host_zone,json=rewardDenomOnHostZone,proto3" json:"reward_denom_on_host_zone,omitempty"`
	RewardDenomOnRewardZone string   `protobuf:"bytes,2,opt,name=reward_denom_on_reward_zone,json=rewardDenomOnRewardZone,proto3" json:"reward_denom_on_reward_zone,omitempty"`
	RewardDenomOnTradeZone  string   `protobuf:"bytes,3,opt,name=reward_denom_on_trade_zone,json=rewardDenomOnTradeZone,proto3" json:"reward_denom_on_trade_zone,omitempty"`
	TargetDenomOnTradeZone  string   `protobuf:"bytes,4,opt,name=target_denom_on_trade_zone,json=targetDenomOnTradeZone,proto3" json:"target_denom_on_trade_zone,omitempty"`
	TargetDenomOnHostZone   string   `protobuf:"bytes,5,opt,name=target_denom_on_host_zone,json=targetDenomOnHostZone,proto3" json:"target_denom_on_host_zone,omitempty"`
	HostToRewardHop         TradeHop `protobuf:"bytes,6,opt,name=host_to_reward_hop,json=hostToRewardHop,proto3" json:"host_to_reward_hop"`
	RewardToTradeHop        TradeHop `protobuf:"bytes,7,opt,name=reward_to_trade_hop,json=rewardToTradeHop,proto3" json:"reward_to_trade_hop"`
	TradeToHostHop          TradeHop `protobuf:"bytes,8,opt,name=trade_to_host_hop,json=tradeToHostHop,proto3" json:"trade_to_host_hop"`
	PoolId                  uint64   `protobuf:"varint,9,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *TradeRoute) Reset()         { *m = TradeRoute{} }
func (m *TradeRoute) String() string { return proto.CompactTextString(m) }
func (*TradeRoute) ProtoMessage()    {}
func (*TradeRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_c252b142ecf88017, []int{1}
}
func (m *TradeRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRoute.Merge(m, src)
}
func (m *TradeRoute) XXX_Size() int {
	return m.Size()
}
func (m *TradeRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRoute proto.InternalMessageInfo

func (m *TradeRoute) GetRewardDenomOnHostZone() string {
	if m != nil {
		return m.RewardDenomOnHostZone
	}
	return ""
}

func (m *TradeRoute) GetRewardDenomOnRewardZone() string {
	if m != nil {
		return m.RewardDenomOnRewardZone
	}
	return ""
}

func (m *TradeRoute) GetRewardDenomOnTradeZone() string {
	if m != nil {
		return m.RewardDenomOnTradeZone
	}
	return ""
}

func (m *TradeRoute) GetTargetDenomOnTradeZone() string {
	if m != nil {
		return m.TargetDenomOnTradeZone
	}
	return ""
}

func (m *TradeRoute) GetTargetDenomOnHostZone() string {
	if m != nil {
		return m.TargetDenomOnHostZone
	}
	return ""
}

func (m *TradeRoute) GetHostToRewardHop() TradeHop {
	if m != nil {
		return m.HostToRewardHop
	}
	return TradeHop{}
}

func (m *TradeRoute) GetRewardToTradeHop() TradeHop {
	if m != nil {
		return m.RewardToTradeHop
	}
	return TradeHop{}
}

func (m *TradeRoute) GetTradeToHostHop() TradeHop {
	if m != nil {
		return m.TradeToHostHop
	}
	return TradeHop{}
}

func (m *TradeRoute) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*TradeHop)(nil), "stride.stakeibc.TradeHop")
	proto.RegisterType((*TradeRoute)(nil), "stride.stakeibc.TradeRoute")
}

func init() { proto.RegisterFile("stride/stakeibc/trade_route.proto", fileDescriptor_c252b142ecf88017) }

var fileDescriptor_c252b142ecf88017 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x36, 0xa4, 0xcd, 0x14, 0x51, 0xea, 0x02, 0x4d, 0x52, 0xc9, 0x84, 0x9e, 0x72,
	0xc1, 0x16, 0x85, 0x43, 0x85, 0x38, 0xd0, 0x8f, 0x43, 0x83, 0x22, 0x90, 0x4c, 0x4e, 0xbd, 0x58,
	0x1b, 0x7b, 0x9b, 0x58, 0x90, 0x1d, 0x6b, 0x3d, 0xe1, 0xeb, 0x57, 0xf0, 0x77, 0xb8, 0x72, 0xea,
	0x31, 0x47, 0x4e, 0x08, 0x25, 0x7f, 0x04, 0xed, 0x87, 0x03, 0x71, 0x7a, 0xc8, 0xcd, 0xbb, 0xf3,
	0x3e, 0xaf, 0xf7, 0xdd, 0x99, 0x85, 0x27, 0x39, 0xc9, 0x34, 0xe1, 0x41, 0x4e, 0xec, 0x03, 0x4f,
	0x07, 0x71, 0x40, 0x92, 0x25, 0x3c, 0x92, 0x38, 0x21, 0xee, 0x67, 0x12, 0x09, 0xdd, 0x5d, 0x23,
	0xf1, 0x0b, 0x49, 0xeb, 0xc1, 0x10, 0x87, 0xa8, 0x6b, 0x81, 0xfa, 0x32, 0xb2, 0xd6, 0x8a, 0x53,
	0x1a, 0xb3, 0x88, 0xc5, 0x31, 0x4e, 0x04, 0x19, 0xc9, 0xd1, 0x4f, 0x07, 0xb6, 0xfb, 0xca, 0xff,
	0x12, 0x33, 0xd7, 0x87, 0x7d, 0x92, 0x4c, 0xe4, 0xd7, 0x5c, 0x46, 0xf1, 0x88, 0x09, 0xc1, 0x3f,
	0x46, 0x69, 0xd2, 0x70, 0xda, 0x4e, 0xa7, 0x1e, 0xee, 0x15, 0xa5, 0x73, 0x53, 0xe9, 0x26, 0xee,
	0x05, 0xdc, 0xbd, 0x96, 0x38, 0x2e, 0x2c, 0x1b, 0x1b, 0x6d, 0xa7, 0xb3, 0x73, 0x7c, 0xe8, 0x97,
	0x4e, 0xe7, 0x77, 0xcf, 0x4f, 0x4f, 0x8d, 0xe4, 0xac, 0x7a, 0xf3, 0xfb, 0x71, 0x25, 0xdc, 0x51,
	0x98, 0xdd, 0x72, 0x5f, 0x03, 0x10, 0x2e, 0x3c, 0x36, 0xd7, 0xf5, 0xa8, 0x13, 0xda, 0x8d, 0xa3,
	0x1f, 0x55, 0x00, 0x1d, 0x22, 0x54, 0x77, 0xe4, 0x9e, 0x40, 0x53, 0xf2, 0xcf, 0x4c, 0x26, 0x51,
	0xc2, 0x05, 0x8e, 0x23, 0x14, 0xd1, 0x08, 0x73, 0x8a, 0xbe, 0xa1, 0xe0, 0x36, 0xcc, 0x43, 0x23,
	0xb8, 0x50, 0xf5, 0x77, 0xe2, 0x12, 0x73, 0xba, 0x42, 0xc1, 0xdd, 0x57, 0x70, 0x58, 0x26, 0xed,
	0x5a, 0xb3, 0x1b, 0x9a, 0x3d, 0x58, 0x62, 0x43, 0xbd, 0xd0, 0xf4, 0x4b, 0x68, 0x95, 0x69, 0xd3,
	0x3a, 0x0d, 0x6f, 0x6a, 0xf8, 0xd1, 0x12, 0xac, 0x0f, 0x5d, 0xb0, 0xc4, 0xe4, 0x90, 0xd3, 0xad,
	0x6c, 0xd5, 0xb0, 0x46, 0xb1, 0xc2, 0x9e, 0x40, 0xb3, 0xcc, 0xfe, 0xcb, 0x7b, 0xc7, 0xe4, 0x5d,
	0x42, 0x17, 0x79, 0x7b, 0xe0, 0x6a, 0x25, 0x61, 0x91, 0x73, 0x84, 0x59, 0xa3, 0xa6, 0x5b, 0xd0,
	0x5c, 0x69, 0x41, 0x31, 0x27, 0xb6, 0x01, 0xbb, 0x0a, 0xed, 0xa3, 0xb9, 0x00, 0x35, 0x3e, 0x6f,
	0x61, 0xdf, 0xba, 0x10, 0xda, 0xd3, 0x2b, 0xbb, 0xad, 0xf5, 0xec, 0xee, 0x1b, 0xb6, 0x8f, 0x8b,
	0x71, 0x7c, 0x03, 0x7b, 0xc6, 0x85, 0xd0, 0x04, 0x52, 0x6e, 0xdb, 0xeb, 0xb9, 0xdd, 0xd3, 0x64,
	0x1f, 0x55, 0x54, 0xe5, 0x75, 0x00, 0x5b, 0x19, 0xa2, 0x1e, 0xe7, 0x7a, 0xdb, 0xe9, 0x54, 0xc3,
	0x9a, 0x5a, 0x76, 0x93, 0xb3, 0xde, 0xcd, 0xcc, 0x73, 0xa6, 0x33, 0xcf, 0xf9, 0x33, 0xf3, 0x9c,
	0xef, 0x73, 0xaf, 0x32, 0x9d, 0x7b, 0x95, 0x5f, 0x73, 0xaf, 0x72, 0x75, 0x3c, 0x4c, 0x69, 0x34,
	0x19, 0xf8, 0x31, 0x8e, 0x83, 0xf7, 0xfa, 0x6f, 0x4f, 0x7b, 0x6c, 0x90, 0x07, 0xf6, 0x51, 0x7d,
	0x7a, 0xf6, 0x22, 0xf8, 0xf2, 0xdf, 0x23, 0xfd, 0x9a, 0xf1, 0x7c, 0x50, 0xd3, 0xaf, 0xea, 0xf9,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x26, 0x15, 0xd6, 0xc4, 0x03, 0x00, 0x00,
}

func (m *TradeHop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeHop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeHop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ToAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FromAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradeRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintTradeRoute(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.TradeToHostHop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.RewardToTradeHop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.HostToRewardHop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.TargetDenomOnHostZone) > 0 {
		i -= len(m.TargetDenomOnHostZone)
		copy(dAtA[i:], m.TargetDenomOnHostZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.TargetDenomOnHostZone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetDenomOnTradeZone) > 0 {
		i -= len(m.TargetDenomOnTradeZone)
		copy(dAtA[i:], m.TargetDenomOnTradeZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.TargetDenomOnTradeZone)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RewardDenomOnTradeZone) > 0 {
		i -= len(m.RewardDenomOnTradeZone)
		copy(dAtA[i:], m.RewardDenomOnTradeZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.RewardDenomOnTradeZone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RewardDenomOnRewardZone) > 0 {
		i -= len(m.RewardDenomOnRewardZone)
		copy(dAtA[i:], m.RewardDenomOnRewardZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.RewardDenomOnRewardZone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardDenomOnHostZone) > 0 {
		i -= len(m.RewardDenomOnHostZone)
		copy(dAtA[i:], m.RewardDenomOnHostZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.RewardDenomOnHostZone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradeRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradeRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradeHop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = m.FromAccount.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.ToAccount.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	return n
}

func (m *TradeRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardDenomOnHostZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.RewardDenomOnRewardZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.RewardDenomOnTradeZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.TargetDenomOnTradeZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.TargetDenomOnHostZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = m.HostToRewardHop.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.RewardToTradeHop.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.TradeToHostHop.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTradeRoute(uint64(m.PoolId))
	}
	return n
}

func sovTradeRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradeRoute(x uint64) (n int) {
	return sovTradeRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradeHop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeHop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeHop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradeRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnHostZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenomOnHostZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnRewardZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenomOnRewardZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnTradeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenomOnTradeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDenomOnTradeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetDenomOnTradeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDenomOnHostZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetDenomOnHostZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostToRewardHop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostToRewardHop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardToTradeHop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardToTradeHop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeToHostHop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeToHostHop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTradeRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradeRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradeRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradeRoute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradeRoute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradeRoute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradeRoute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradeRoute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradeRoute = fmt.Errorf("proto: unexpected end of group")
)
