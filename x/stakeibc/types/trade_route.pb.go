// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/trade_route.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Represents a single directional hop from one ICA to another ICA
// transfer_channel is between the first chain and second
// No need for the transfer port because that is a fixed variable
type TradeHop struct {
	TransferChannelId string     `protobuf:"bytes,1,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
	FromAccount       ICAAccount `protobuf:"bytes,2,opt,name=from_account,json=fromAccount,proto3" json:"from_account"`
	ToAccount         ICAAccount `protobuf:"bytes,3,opt,name=to_account,json=toAccount,proto3" json:"to_account"`
}

func (m *TradeHop) Reset()         { *m = TradeHop{} }
func (m *TradeHop) String() string { return proto.CompactTextString(m) }
func (*TradeHop) ProtoMessage()    {}
func (*TradeHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_c252b142ecf88017, []int{0}
}
func (m *TradeHop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeHop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeHop.Merge(m, src)
}
func (m *TradeHop) XXX_Size() int {
	return m.Size()
}
func (m *TradeHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeHop.DiscardUnknown(m)
}

var xxx_messageInfo_TradeHop proto.InternalMessageInfo

func (m *TradeHop) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

func (m *TradeHop) GetFromAccount() ICAAccount {
	if m != nil {
		return m.FromAccount
	}
	return ICAAccount{}
}

func (m *TradeHop) GetToAccount() ICAAccount {
	if m != nil {
		return m.ToAccount
	}
	return ICAAccount{}
}

// TradeRoute represents a round trip including info on transfer and how to do
// the swap. It makes the assumption that the reward token is always foreign to
// the host so therefore the first two hops are to unwind the ibc denom enroute
// to the trade chain and the last hop is the return so funds start/end in the
// withdrawl ICA on hostZone
type TradeRoute struct {
	// ibc denom for the reward on the host zone
	RewardDenomOnHostZone string `protobuf:"bytes,1,opt,name=reward_denom_on_host_zone,json=rewardDenomOnHostZone,proto3" json:"reward_denom_on_host_zone,omitempty"`
	// should be the native denom for the reward chain
	RewardDenomOnRewardZone string `protobuf:"bytes,2,opt,name=reward_denom_on_reward_zone,json=rewardDenomOnRewardZone,proto3" json:"reward_denom_on_reward_zone,omitempty"`
	// ibc denom of the reward on the trade chain, input to the swap
	RewardDenomOnTradeZone string `protobuf:"bytes,3,opt,name=reward_denom_on_trade_zone,json=rewardDenomOnTradeZone,proto3" json:"reward_denom_on_trade_zone,omitempty"`
	// ibc of the host denom on the trade chain, output from the swap
	TargetDenomOnTradeZone string `protobuf:"bytes,4,opt,name=target_denom_on_trade_zone,json=targetDenomOnTradeZone,proto3" json:"target_denom_on_trade_zone,omitempty"`
	// should be the same as the native host denom on the host chain
	TargetDenomOnHostZone string   `protobuf:"bytes,5,opt,name=target_denom_on_host_zone,json=targetDenomOnHostZone,proto3" json:"target_denom_on_host_zone,omitempty"`
	HostToRewardHop       TradeHop `protobuf:"bytes,6,opt,name=host_to_reward_hop,json=hostToRewardHop,proto3" json:"host_to_reward_hop"`
	RewardToTradeHop      TradeHop `protobuf:"bytes,7,opt,name=reward_to_trade_hop,json=rewardToTradeHop,proto3" json:"reward_to_trade_hop"`
	TradeToHostHop        TradeHop `protobuf:"bytes,8,opt,name=trade_to_host_hop,json=tradeToHostHop,proto3" json:"trade_to_host_hop"`
	// Currently Osmosis is the only trade chain so this is an osmosis pool id
	PoolId uint64 `protobuf:"varint,9,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// price of the output denom relative to the input denom
	// this is update periodically via an ICQ
	HostTokenPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=host_token_price,json=hostTokenPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"host_token_price"`
	// timestamp that the price was last updated
	PriceUpdateTime time.Time `protobuf:"bytes,11,opt,name=price_update_time,json=priceUpdateTime,proto3,stdtime" json:"price_update_time"`
	// max acceptable slippage from the trade, (e.g. 0.05 for 5%)
	// the latest price and slippage determine the min output tokens from the
	// trade
	MaxSlippagePercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=max_slippage_percentage,json=maxSlippagePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_slippage_percentage"`
	// min and max set boundaries of reward denom on trade chain we will swap
	MinSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=min_swap_amount,json=minSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_swap_amount"`
	MaxSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,14,opt,name=max_swap_amount,json=maxSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_swap_amount"`
}

func (m *TradeRoute) Reset()         { *m = TradeRoute{} }
func (m *TradeRoute) String() string { return proto.CompactTextString(m) }
func (*TradeRoute) ProtoMessage()    {}
func (*TradeRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_c252b142ecf88017, []int{1}
}
func (m *TradeRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRoute.Merge(m, src)
}
func (m *TradeRoute) XXX_Size() int {
	return m.Size()
}
func (m *TradeRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRoute proto.InternalMessageInfo

func (m *TradeRoute) GetRewardDenomOnHostZone() string {
	if m != nil {
		return m.RewardDenomOnHostZone
	}
	return ""
}

func (m *TradeRoute) GetRewardDenomOnRewardZone() string {
	if m != nil {
		return m.RewardDenomOnRewardZone
	}
	return ""
}

func (m *TradeRoute) GetRewardDenomOnTradeZone() string {
	if m != nil {
		return m.RewardDenomOnTradeZone
	}
	return ""
}

func (m *TradeRoute) GetTargetDenomOnTradeZone() string {
	if m != nil {
		return m.TargetDenomOnTradeZone
	}
	return ""
}

func (m *TradeRoute) GetTargetDenomOnHostZone() string {
	if m != nil {
		return m.TargetDenomOnHostZone
	}
	return ""
}

func (m *TradeRoute) GetHostToRewardHop() TradeHop {
	if m != nil {
		return m.HostToRewardHop
	}
	return TradeHop{}
}

func (m *TradeRoute) GetRewardToTradeHop() TradeHop {
	if m != nil {
		return m.RewardToTradeHop
	}
	return TradeHop{}
}

func (m *TradeRoute) GetTradeToHostHop() TradeHop {
	if m != nil {
		return m.TradeToHostHop
	}
	return TradeHop{}
}

func (m *TradeRoute) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *TradeRoute) GetPriceUpdateTime() time.Time {
	if m != nil {
		return m.PriceUpdateTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*TradeHop)(nil), "stride.stakeibc.TradeHop")
	proto.RegisterType((*TradeRoute)(nil), "stride.stakeibc.TradeRoute")
}

func init() { proto.RegisterFile("stride/stakeibc/trade_route.proto", fileDescriptor_c252b142ecf88017) }

var fileDescriptor_c252b142ecf88017 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x4f, 0xdb, 0x3e,
	0x18, 0xc7, 0x1b, 0xe0, 0x07, 0xc5, 0xfc, 0x29, 0x84, 0x1f, 0xa3, 0x2d, 0x52, 0xca, 0x38, 0x4c,
	0x5c, 0x48, 0x34, 0x26, 0x4d, 0x68, 0xe2, 0x30, 0x4a, 0x0f, 0x74, 0x42, 0x1b, 0x0a, 0xdd, 0x0e,
	0x5c, 0x2c, 0x37, 0x71, 0xd3, 0xa8, 0xc4, 0x4f, 0x14, 0xbb, 0xa3, 0xdb, 0xab, 0xe0, 0xba, 0xf7,
	0xb1, 0x57, 0xb0, 0x13, 0x47, 0xb4, 0xd3, 0xb4, 0x03, 0x9b, 0xe0, 0x8d, 0x4c, 0xfe, 0x93, 0x02,
	0x65, 0x07, 0x36, 0xed, 0xd4, 0x3a, 0x7e, 0x3e, 0x9f, 0xf8, 0x6b, 0xfb, 0x09, 0x7a, 0xcc, 0x45,
	0x16, 0x87, 0xd4, 0xe3, 0x82, 0xf4, 0x68, 0xdc, 0x0e, 0x3c, 0x91, 0x91, 0x90, 0xe2, 0x0c, 0xfa,
	0x82, 0xba, 0x69, 0x06, 0x02, 0xec, 0x92, 0x2e, 0x71, 0xf3, 0x92, 0xea, 0xff, 0x11, 0x44, 0xa0,
	0xe6, 0x3c, 0xf9, 0x4f, 0x97, 0x55, 0xef, 0x99, 0xe2, 0x80, 0x60, 0x12, 0x04, 0xd0, 0x67, 0xc2,
	0x94, 0x54, 0x02, 0xe0, 0x09, 0x70, 0xac, 0x59, 0x3d, 0x30, 0x53, 0xb5, 0x08, 0x20, 0x3a, 0xa1,
	0x9e, 0x1a, 0xb5, 0xfb, 0x1d, 0x4f, 0xc4, 0x09, 0xe5, 0x82, 0x24, 0xa9, 0x2e, 0x58, 0xff, 0x62,
	0xa1, 0x62, 0x4b, 0xae, 0x6d, 0x1f, 0x52, 0xdb, 0x45, 0x4b, 0x22, 0x23, 0x8c, 0x77, 0x68, 0x86,
	0x83, 0x2e, 0x61, 0x8c, 0x9e, 0xe0, 0x38, 0x2c, 0x5b, 0x6b, 0xd6, 0xc6, 0xb4, 0xbf, 0x98, 0x4f,
	0xed, 0xe9, 0x99, 0x66, 0x68, 0x37, 0xd0, 0x6c, 0x27, 0x83, 0x24, 0x5f, 0x4e, 0x79, 0x6c, 0xcd,
	0xda, 0x98, 0xd9, 0x5a, 0x75, 0x47, 0x92, 0xb9, 0xcd, 0xbd, 0xdd, 0x5d, 0x5d, 0x52, 0x9f, 0x38,
	0xbf, 0xac, 0x15, 0xfc, 0x19, 0x89, 0x99, 0x47, 0xf6, 0x4b, 0x84, 0x04, 0x0c, 0x1d, 0xe3, 0x0f,
	0x75, 0x4c, 0x0b, 0x30, 0x0f, 0xd6, 0x3f, 0x15, 0x11, 0x52, 0x21, 0x7c, 0xb9, 0xbf, 0xf6, 0x36,
	0xaa, 0x64, 0xf4, 0x94, 0x64, 0x21, 0x0e, 0x29, 0x83, 0x04, 0x03, 0xc3, 0x5d, 0xe0, 0x02, 0x7f,
	0x04, 0x46, 0x4d, 0x98, 0x65, 0x5d, 0xd0, 0x90, 0xf3, 0x6f, 0xd8, 0x3e, 0x70, 0x71, 0x0c, 0x8c,
	0xda, 0x3b, 0x68, 0x75, 0x94, 0x34, 0x63, 0xc5, 0x8e, 0x29, 0x76, 0xe5, 0x0e, 0xeb, 0xab, 0x81,
	0xa2, 0x5f, 0xa0, 0xea, 0x28, 0xad, 0x8f, 0x5d, 0xc1, 0xe3, 0x0a, 0x7e, 0x74, 0x07, 0x56, 0x8b,
	0xce, 0x59, 0x41, 0xb2, 0x88, 0x8a, 0xdf, 0xb2, 0x13, 0x9a, 0xd5, 0x15, 0xf7, 0xd8, 0x6d, 0x54,
	0x19, 0x65, 0x6f, 0xf2, 0xfe, 0xa7, 0xf3, 0xde, 0x41, 0x87, 0x79, 0x0f, 0x90, 0xad, 0x2a, 0x05,
	0xe4, 0x39, 0xbb, 0x90, 0x96, 0x27, 0xd5, 0x11, 0x54, 0xee, 0x1d, 0x41, 0x7e, 0x4f, 0xcc, 0x01,
	0x94, 0x24, 0xda, 0x02, 0xbd, 0x01, 0xf2, 0xfa, 0xbc, 0x46, 0x4b, 0xc6, 0x22, 0xc0, 0xac, 0x5e,
	0xea, 0xa6, 0x1e, 0xa6, 0x5b, 0xd0, 0x6c, 0x0b, 0x86, 0xd7, 0xf1, 0x15, 0x5a, 0xd4, 0x16, 0x01,
	0x3a, 0x90, 0xb4, 0x15, 0x1f, 0x66, 0x9b, 0x57, 0x64, 0x0b, 0x64, 0x54, 0xe9, 0x5a, 0x41, 0x53,
	0x29, 0x80, 0xba, 0xce, 0xd3, 0x6b, 0xd6, 0xc6, 0x84, 0x3f, 0x29, 0x87, 0xcd, 0xd0, 0xee, 0xa0,
	0x05, 0xb3, 0x05, 0x3d, 0xca, 0x70, 0x9a, 0xc5, 0x01, 0x2d, 0x23, 0xb9, 0x67, 0xf5, 0x1d, 0x29,
	0xfa, 0x7e, 0x59, 0x7b, 0x12, 0xc5, 0xa2, 0xdb, 0x6f, 0xbb, 0x01, 0x24, 0xa6, 0xb9, 0xcc, 0xcf,
	0x26, 0x0f, 0x7b, 0x9e, 0xf8, 0x90, 0x52, 0xee, 0x36, 0x68, 0xf0, 0xf5, 0xf3, 0x26, 0x32, 0xbd,
	0xd7, 0xa0, 0x81, 0x3f, 0xaf, 0x77, 0xa7, 0x47, 0xd9, 0xa1, 0x74, 0xda, 0x87, 0x68, 0x51, 0xc9,
	0x71, 0x3f, 0x0d, 0x89, 0xa0, 0x58, 0x36, 0x62, 0x79, 0x46, 0x85, 0xa9, 0xba, 0xba, 0x4b, 0xdd,
	0xbc, 0x4b, 0xdd, 0x56, 0xde, 0xa5, 0xf5, 0xa2, 0x5c, 0xc4, 0xd9, 0x8f, 0x9a, 0xe5, 0x97, 0x14,
	0xfe, 0x56, 0xd1, 0x72, 0xde, 0x16, 0x68, 0x25, 0x21, 0x03, 0xcc, 0x4f, 0xe2, 0x34, 0x25, 0x11,
	0xc5, 0x29, 0xcd, 0x02, 0xca, 0x04, 0x89, 0x68, 0x79, 0xf6, 0x1f, 0x04, 0x58, 0x4e, 0xc8, 0xe0,
	0xc8, 0xb8, 0x0f, 0x87, 0x6a, 0xfb, 0x1d, 0x2a, 0x25, 0x31, 0xc3, 0xfc, 0x94, 0xa4, 0x98, 0x24,
	0xaa, 0x65, 0xe7, 0xd4, 0xdb, 0xdc, 0x3f, 0x78, 0x5b, 0x93, 0x09, 0x7f, 0x2e, 0x89, 0xd9, 0xd1,
	0x29, 0x49, 0x77, 0x95, 0x44, 0x79, 0x65, 0x9a, 0x5b, 0xde, 0xf9, 0xbf, 0xf4, 0x92, 0xc1, 0x8d,
	0xb7, 0x7e, 0x70, 0x7e, 0xe5, 0x58, 0x17, 0x57, 0x8e, 0xf5, 0xf3, 0xca, 0xb1, 0xce, 0xae, 0x9d,
	0xc2, 0xc5, 0xb5, 0x53, 0xf8, 0x76, 0xed, 0x14, 0x8e, 0xb7, 0x6e, 0x09, 0x8f, 0xd4, 0x6d, 0xda,
	0x3c, 0x20, 0x6d, 0xee, 0x99, 0x0f, 0xee, 0xfb, 0xa7, 0xcf, 0xbd, 0xc1, 0xad, 0x0f, 0xb8, 0x7c,
	0x41, 0x7b, 0x52, 0x1d, 0xd1, 0xb3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x42, 0x83, 0xa8, 0xff,
	0xe0, 0x05, 0x00, 0x00,
}

func (m *TradeHop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeHop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeHop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ToAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FromAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradeRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxSwapAmount.Size()
		i -= size
		if _, err := m.MaxSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.MinSwapAmount.Size()
		i -= size
		if _, err := m.MinSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.MaxSlippagePercentage.Size()
		i -= size
		if _, err := m.MaxSlippagePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PriceUpdateTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PriceUpdateTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTradeRoute(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x5a
	{
		size := m.HostTokenPrice.Size()
		i -= size
		if _, err := m.HostTokenPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.PoolId != 0 {
		i = encodeVarintTradeRoute(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.TradeToHostHop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.RewardToTradeHop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.HostToRewardHop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTradeRoute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.TargetDenomOnHostZone) > 0 {
		i -= len(m.TargetDenomOnHostZone)
		copy(dAtA[i:], m.TargetDenomOnHostZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.TargetDenomOnHostZone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetDenomOnTradeZone) > 0 {
		i -= len(m.TargetDenomOnTradeZone)
		copy(dAtA[i:], m.TargetDenomOnTradeZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.TargetDenomOnTradeZone)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RewardDenomOnTradeZone) > 0 {
		i -= len(m.RewardDenomOnTradeZone)
		copy(dAtA[i:], m.RewardDenomOnTradeZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.RewardDenomOnTradeZone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RewardDenomOnRewardZone) > 0 {
		i -= len(m.RewardDenomOnRewardZone)
		copy(dAtA[i:], m.RewardDenomOnRewardZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.RewardDenomOnRewardZone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardDenomOnHostZone) > 0 {
		i -= len(m.RewardDenomOnHostZone)
		copy(dAtA[i:], m.RewardDenomOnHostZone)
		i = encodeVarintTradeRoute(dAtA, i, uint64(len(m.RewardDenomOnHostZone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradeRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradeRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradeHop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = m.FromAccount.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.ToAccount.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	return n
}

func (m *TradeRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardDenomOnHostZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.RewardDenomOnRewardZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.RewardDenomOnTradeZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.TargetDenomOnTradeZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = len(m.TargetDenomOnHostZone)
	if l > 0 {
		n += 1 + l + sovTradeRoute(uint64(l))
	}
	l = m.HostToRewardHop.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.RewardToTradeHop.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.TradeToHostHop.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTradeRoute(uint64(m.PoolId))
	}
	l = m.HostTokenPrice.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PriceUpdateTime)
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.MaxSlippagePercentage.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.MinSwapAmount.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	l = m.MaxSwapAmount.Size()
	n += 1 + l + sovTradeRoute(uint64(l))
	return n
}

func sovTradeRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradeRoute(x uint64) (n int) {
	return sovTradeRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradeHop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeHop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeHop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradeRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnHostZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenomOnHostZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnRewardZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenomOnRewardZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnTradeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenomOnTradeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDenomOnTradeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetDenomOnTradeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDenomOnHostZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetDenomOnHostZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostToRewardHop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostToRewardHop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardToTradeHop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardToTradeHop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeToHostHop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeToHostHop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostTokenPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostTokenPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceUpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PriceUpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlippagePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSlippagePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSwapAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSwapAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradeRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradeRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradeRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradeRoute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradeRoute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradeRoute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradeRoute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradeRoute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradeRoute = fmt.Errorf("proto: unexpected end of group")
)
