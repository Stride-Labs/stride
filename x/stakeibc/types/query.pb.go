// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryInterchainAccountFromAddressRequest is the request type for the
// Query/InterchainAccountAddress RPC
type QueryInterchainAccountFromAddressRequest struct {
	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
}

func (m *QueryInterchainAccountFromAddressRequest) Reset() {
	*m = QueryInterchainAccountFromAddressRequest{}
}
func (m *QueryInterchainAccountFromAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInterchainAccountFromAddressRequest) ProtoMessage()    {}
func (*QueryInterchainAccountFromAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{0}
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInterchainAccountFromAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInterchainAccountFromAddressRequest.Merge(m, src)
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInterchainAccountFromAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInterchainAccountFromAddressRequest proto.InternalMessageInfo

func (m *QueryInterchainAccountFromAddressRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryInterchainAccountFromAddressRequest) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// QueryInterchainAccountFromAddressResponse the response type for the
// Query/InterchainAccountAddress RPC
type QueryInterchainAccountFromAddressResponse struct {
	InterchainAccountAddress string `protobuf:"bytes,1,opt,name=interchain_account_address,json=interchainAccountAddress,proto3" json:"interchain_account_address,omitempty" yaml:"interchain_account_address"`
}

func (m *QueryInterchainAccountFromAddressResponse) Reset() {
	*m = QueryInterchainAccountFromAddressResponse{}
}
func (m *QueryInterchainAccountFromAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInterchainAccountFromAddressResponse) ProtoMessage() {}
func (*QueryInterchainAccountFromAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{1}
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInterchainAccountFromAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInterchainAccountFromAddressResponse.Merge(m, src)
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInterchainAccountFromAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInterchainAccountFromAddressResponse proto.InternalMessageInfo

func (m *QueryInterchainAccountFromAddressResponse) GetInterchainAccountAddress() string {
	if m != nil {
		return m.InterchainAccountAddress
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetValidatorsRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetValidatorsRequest) Reset()         { *m = QueryGetValidatorsRequest{} }
func (m *QueryGetValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorsRequest) ProtoMessage()    {}
func (*QueryGetValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{4}
}
func (m *QueryGetValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorsRequest.Merge(m, src)
}
func (m *QueryGetValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorsRequest proto.InternalMessageInfo

func (m *QueryGetValidatorsRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetValidatorsResponse struct {
	Validators []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (m *QueryGetValidatorsResponse) Reset()         { *m = QueryGetValidatorsResponse{} }
func (m *QueryGetValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorsResponse) ProtoMessage()    {}
func (*QueryGetValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{5}
}
func (m *QueryGetValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorsResponse.Merge(m, src)
}
func (m *QueryGetValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorsResponse proto.InternalMessageInfo

func (m *QueryGetValidatorsResponse) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type QueryGetHostZoneRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetHostZoneRequest) Reset()         { *m = QueryGetHostZoneRequest{} }
func (m *QueryGetHostZoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostZoneRequest) ProtoMessage()    {}
func (*QueryGetHostZoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{6}
}
func (m *QueryGetHostZoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostZoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostZoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostZoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostZoneRequest.Merge(m, src)
}
func (m *QueryGetHostZoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostZoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostZoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostZoneRequest proto.InternalMessageInfo

func (m *QueryGetHostZoneRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetHostZoneResponse struct {
	HostZone HostZone `protobuf:"bytes,1,opt,name=host_zone,json=hostZone,proto3" json:"host_zone"`
}

func (m *QueryGetHostZoneResponse) Reset()         { *m = QueryGetHostZoneResponse{} }
func (m *QueryGetHostZoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHostZoneResponse) ProtoMessage()    {}
func (*QueryGetHostZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{7}
}
func (m *QueryGetHostZoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHostZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHostZoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHostZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHostZoneResponse.Merge(m, src)
}
func (m *QueryGetHostZoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHostZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHostZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHostZoneResponse proto.InternalMessageInfo

func (m *QueryGetHostZoneResponse) GetHostZone() HostZone {
	if m != nil {
		return m.HostZone
	}
	return HostZone{}
}

type QueryAllHostZoneRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostZoneRequest) Reset()         { *m = QueryAllHostZoneRequest{} }
func (m *QueryAllHostZoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostZoneRequest) ProtoMessage()    {}
func (*QueryAllHostZoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{8}
}
func (m *QueryAllHostZoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostZoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostZoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostZoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostZoneRequest.Merge(m, src)
}
func (m *QueryAllHostZoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostZoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostZoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostZoneRequest proto.InternalMessageInfo

func (m *QueryAllHostZoneRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHostZoneResponse struct {
	HostZone   []HostZone          `protobuf:"bytes,1,rep,name=host_zone,json=hostZone,proto3" json:"host_zone"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHostZoneResponse) Reset()         { *m = QueryAllHostZoneResponse{} }
func (m *QueryAllHostZoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHostZoneResponse) ProtoMessage()    {}
func (*QueryAllHostZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{9}
}
func (m *QueryAllHostZoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHostZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHostZoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHostZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHostZoneResponse.Merge(m, src)
}
func (m *QueryAllHostZoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHostZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHostZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHostZoneResponse proto.InternalMessageInfo

func (m *QueryAllHostZoneResponse) GetHostZone() []HostZone {
	if m != nil {
		return m.HostZone
	}
	return nil
}

func (m *QueryAllHostZoneResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryModuleAddressRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryModuleAddressRequest) Reset()         { *m = QueryModuleAddressRequest{} }
func (m *QueryModuleAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleAddressRequest) ProtoMessage()    {}
func (*QueryModuleAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{10}
}
func (m *QueryModuleAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleAddressRequest.Merge(m, src)
}
func (m *QueryModuleAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleAddressRequest proto.InternalMessageInfo

func (m *QueryModuleAddressRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryModuleAddressResponse struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryModuleAddressResponse) Reset()         { *m = QueryModuleAddressResponse{} }
func (m *QueryModuleAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleAddressResponse) ProtoMessage()    {}
func (*QueryModuleAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{11}
}
func (m *QueryModuleAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleAddressResponse.Merge(m, src)
}
func (m *QueryModuleAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleAddressResponse proto.InternalMessageInfo

func (m *QueryModuleAddressResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryGetEpochTrackerRequest struct {
	EpochIdentifier string `protobuf:"bytes,1,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
}

func (m *QueryGetEpochTrackerRequest) Reset()         { *m = QueryGetEpochTrackerRequest{} }
func (m *QueryGetEpochTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochTrackerRequest) ProtoMessage()    {}
func (*QueryGetEpochTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{12}
}
func (m *QueryGetEpochTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochTrackerRequest.Merge(m, src)
}
func (m *QueryGetEpochTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochTrackerRequest proto.InternalMessageInfo

func (m *QueryGetEpochTrackerRequest) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

type QueryGetEpochTrackerResponse struct {
	EpochTracker EpochTracker `protobuf:"bytes,1,opt,name=epoch_tracker,json=epochTracker,proto3" json:"epoch_tracker"`
}

func (m *QueryGetEpochTrackerResponse) Reset()         { *m = QueryGetEpochTrackerResponse{} }
func (m *QueryGetEpochTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochTrackerResponse) ProtoMessage()    {}
func (*QueryGetEpochTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{13}
}
func (m *QueryGetEpochTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochTrackerResponse.Merge(m, src)
}
func (m *QueryGetEpochTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochTrackerResponse proto.InternalMessageInfo

func (m *QueryGetEpochTrackerResponse) GetEpochTracker() EpochTracker {
	if m != nil {
		return m.EpochTracker
	}
	return EpochTracker{}
}

type QueryAllEpochTrackerRequest struct {
}

func (m *QueryAllEpochTrackerRequest) Reset()         { *m = QueryAllEpochTrackerRequest{} }
func (m *QueryAllEpochTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochTrackerRequest) ProtoMessage()    {}
func (*QueryAllEpochTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{14}
}
func (m *QueryAllEpochTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochTrackerRequest.Merge(m, src)
}
func (m *QueryAllEpochTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochTrackerRequest proto.InternalMessageInfo

type QueryAllEpochTrackerResponse struct {
	EpochTracker []EpochTracker `protobuf:"bytes,1,rep,name=epoch_tracker,json=epochTracker,proto3" json:"epoch_tracker"`
}

func (m *QueryAllEpochTrackerResponse) Reset()         { *m = QueryAllEpochTrackerResponse{} }
func (m *QueryAllEpochTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochTrackerResponse) ProtoMessage()    {}
func (*QueryAllEpochTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{15}
}
func (m *QueryAllEpochTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochTrackerResponse.Merge(m, src)
}
func (m *QueryAllEpochTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochTrackerResponse proto.InternalMessageInfo

func (m *QueryAllEpochTrackerResponse) GetEpochTracker() []EpochTracker {
	if m != nil {
		return m.EpochTracker
	}
	return nil
}

type QueryGetNextPacketSequenceRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId    string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *QueryGetNextPacketSequenceRequest) Reset()         { *m = QueryGetNextPacketSequenceRequest{} }
func (m *QueryGetNextPacketSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNextPacketSequenceRequest) ProtoMessage()    {}
func (*QueryGetNextPacketSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{16}
}
func (m *QueryGetNextPacketSequenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNextPacketSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNextPacketSequenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNextPacketSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNextPacketSequenceRequest.Merge(m, src)
}
func (m *QueryGetNextPacketSequenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNextPacketSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNextPacketSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNextPacketSequenceRequest proto.InternalMessageInfo

func (m *QueryGetNextPacketSequenceRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *QueryGetNextPacketSequenceRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

type QueryGetNextPacketSequenceResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *QueryGetNextPacketSequenceResponse) Reset()         { *m = QueryGetNextPacketSequenceResponse{} }
func (m *QueryGetNextPacketSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNextPacketSequenceResponse) ProtoMessage()    {}
func (*QueryGetNextPacketSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{17}
}
func (m *QueryGetNextPacketSequenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNextPacketSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNextPacketSequenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNextPacketSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNextPacketSequenceResponse.Merge(m, src)
}
func (m *QueryGetNextPacketSequenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNextPacketSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNextPacketSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNextPacketSequenceResponse proto.InternalMessageInfo

func (m *QueryGetNextPacketSequenceResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type QueryAddressUnbondings struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAddressUnbondings) Reset()         { *m = QueryAddressUnbondings{} }
func (m *QueryAddressUnbondings) String() string { return proto.CompactTextString(m) }
func (*QueryAddressUnbondings) ProtoMessage()    {}
func (*QueryAddressUnbondings) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{18}
}
func (m *QueryAddressUnbondings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressUnbondings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressUnbondings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressUnbondings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressUnbondings.Merge(m, src)
}
func (m *QueryAddressUnbondings) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressUnbondings) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressUnbondings.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressUnbondings proto.InternalMessageInfo

func (m *QueryAddressUnbondings) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAddressUnbondingsResponse struct {
	AddressUnbondings []AddressUnbonding `protobuf:"bytes,1,rep,name=address_unbondings,json=addressUnbondings,proto3" json:"address_unbondings"`
}

func (m *QueryAddressUnbondingsResponse) Reset()         { *m = QueryAddressUnbondingsResponse{} }
func (m *QueryAddressUnbondingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressUnbondingsResponse) ProtoMessage()    {}
func (*QueryAddressUnbondingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_494b786fe66f2b80, []int{19}
}
func (m *QueryAddressUnbondingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressUnbondingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressUnbondingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressUnbondingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressUnbondingsResponse.Merge(m, src)
}
func (m *QueryAddressUnbondingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressUnbondingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressUnbondingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressUnbondingsResponse proto.InternalMessageInfo

func (m *QueryAddressUnbondingsResponse) GetAddressUnbondings() []AddressUnbonding {
	if m != nil {
		return m.AddressUnbondings
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryInterchainAccountFromAddressRequest)(nil), "stride.stakeibc.QueryInterchainAccountFromAddressRequest")
	proto.RegisterType((*QueryInterchainAccountFromAddressResponse)(nil), "stride.stakeibc.QueryInterchainAccountFromAddressResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "stride.stakeibc.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stride.stakeibc.QueryParamsResponse")
	proto.RegisterType((*QueryGetValidatorsRequest)(nil), "stride.stakeibc.QueryGetValidatorsRequest")
	proto.RegisterType((*QueryGetValidatorsResponse)(nil), "stride.stakeibc.QueryGetValidatorsResponse")
	proto.RegisterType((*QueryGetHostZoneRequest)(nil), "stride.stakeibc.QueryGetHostZoneRequest")
	proto.RegisterType((*QueryGetHostZoneResponse)(nil), "stride.stakeibc.QueryGetHostZoneResponse")
	proto.RegisterType((*QueryAllHostZoneRequest)(nil), "stride.stakeibc.QueryAllHostZoneRequest")
	proto.RegisterType((*QueryAllHostZoneResponse)(nil), "stride.stakeibc.QueryAllHostZoneResponse")
	proto.RegisterType((*QueryModuleAddressRequest)(nil), "stride.stakeibc.QueryModuleAddressRequest")
	proto.RegisterType((*QueryModuleAddressResponse)(nil), "stride.stakeibc.QueryModuleAddressResponse")
	proto.RegisterType((*QueryGetEpochTrackerRequest)(nil), "stride.stakeibc.QueryGetEpochTrackerRequest")
	proto.RegisterType((*QueryGetEpochTrackerResponse)(nil), "stride.stakeibc.QueryGetEpochTrackerResponse")
	proto.RegisterType((*QueryAllEpochTrackerRequest)(nil), "stride.stakeibc.QueryAllEpochTrackerRequest")
	proto.RegisterType((*QueryAllEpochTrackerResponse)(nil), "stride.stakeibc.QueryAllEpochTrackerResponse")
	proto.RegisterType((*QueryGetNextPacketSequenceRequest)(nil), "stride.stakeibc.QueryGetNextPacketSequenceRequest")
	proto.RegisterType((*QueryGetNextPacketSequenceResponse)(nil), "stride.stakeibc.QueryGetNextPacketSequenceResponse")
	proto.RegisterType((*QueryAddressUnbondings)(nil), "stride.stakeibc.QueryAddressUnbondings")
	proto.RegisterType((*QueryAddressUnbondingsResponse)(nil), "stride.stakeibc.QueryAddressUnbondingsResponse")
}

func init() { proto.RegisterFile("stride/stakeibc/query.proto", fileDescriptor_494b786fe66f2b80) }

var fileDescriptor_494b786fe66f2b80 = []byte{
	// 1156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x97, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc7, 0xb3, 0x4d, 0x9a, 0x97, 0x27, 0x89, 0x42, 0x87, 0x88, 0x38, 0xdb, 0xc4, 0x21, 0xd3,
	0xd2, 0xbc, 0x90, 0x7a, 0x89, 0x53, 0x10, 0x8d, 0xa8, 0x20, 0x91, 0xda, 0xc6, 0x50, 0x50, 0x70,
	0xa1, 0x42, 0xe5, 0x60, 0x8d, 0x77, 0x07, 0x7b, 0xd5, 0xf5, 0x8c, 0xbb, 0xbb, 0x0e, 0x09, 0x91,
	0x55, 0x89, 0x4f, 0x50, 0x81, 0xb8, 0x70, 0x2b, 0xe2, 0xc0, 0x99, 0x4f, 0xd1, 0x1b, 0x95, 0xb8,
	0x70, 0x8a, 0x50, 0xc2, 0x27, 0xa8, 0xf8, 0x00, 0x68, 0x67, 0x66, 0xd7, 0xf6, 0xbe, 0x18, 0xa7,
	0x37, 0xcf, 0xcc, 0xf3, 0xf2, 0x9b, 0x67, 0x9e, 0xf9, 0xcf, 0x1a, 0x2e, 0x7b, 0xbe, 0x6b, 0x5b,
	0xd4, 0xf0, 0x7c, 0xf2, 0x88, 0xda, 0x55, 0xd3, 0x78, 0xdc, 0xa2, 0xee, 0x51, 0xa1, 0xe9, 0x72,
	0x9f, 0xa3, 0x19, 0xb9, 0x58, 0x08, 0x17, 0xf5, 0xd9, 0x1a, 0xaf, 0x71, 0xb1, 0x66, 0x04, 0xbf,
	0xa4, 0x99, 0xbe, 0x50, 0xe3, 0xbc, 0xe6, 0x50, 0x83, 0x34, 0x6d, 0x83, 0x30, 0xc6, 0x7d, 0xe2,
	0xdb, 0x9c, 0x79, 0x6a, 0x75, 0xdd, 0xe4, 0x5e, 0x83, 0x7b, 0x46, 0x95, 0x78, 0x54, 0x46, 0x37,
	0x0e, 0x36, 0xab, 0xd4, 0x27, 0x9b, 0x46, 0x93, 0xd4, 0x6c, 0x26, 0x8c, 0xc3, 0x48, 0x71, 0x9a,
	0x26, 0x71, 0x49, 0x23, 0x8c, 0xb4, 0x14, 0x5f, 0x3d, 0x20, 0x8e, 0x6d, 0x11, 0x9f, 0xbb, 0x59,
	0x06, 0x75, 0xee, 0xf9, 0x95, 0xef, 0x38, 0xa3, 0xca, 0xe0, 0x4a, 0xdc, 0x80, 0x36, 0xb9, 0x59,
	0xaf, 0xf8, 0x2e, 0x31, 0x1f, 0xd1, 0x30, 0xca, 0x4a, 0xdc, 0x88, 0x58, 0x96, 0x4b, 0x3d, 0xaf,
	0xd2, 0x62, 0x55, 0xce, 0x2c, 0x9b, 0xd5, 0xa4, 0x21, 0x7e, 0x02, 0xab, 0x9f, 0x07, 0xfb, 0x29,
	0x31, 0x9f, 0xba, 0x66, 0x9d, 0xd8, 0x6c, 0xc7, 0x34, 0x79, 0x8b, 0xf9, 0x77, 0x5c, 0xde, 0xd8,
	0x91, 0x4e, 0x65, 0xfa, 0xb8, 0x45, 0x3d, 0x1f, 0xcd, 0xc2, 0x45, 0xfe, 0x2d, 0xa3, 0x6e, 0x4e,
	0x7b, 0x53, 0x5b, 0x9d, 0x28, 0xcb, 0x01, 0xba, 0x05, 0xd3, 0x26, 0x67, 0x8c, 0x9a, 0x41, 0x0d,
	0x2a, 0xb6, 0x95, 0xbb, 0x10, 0xac, 0xee, 0xe6, 0x5e, 0x9e, 0x2c, 0xcd, 0x1e, 0x91, 0x86, 0xb3,
	0x8d, 0x7b, 0x96, 0x71, 0x79, 0xaa, 0x33, 0x2e, 0x59, 0xf8, 0xa9, 0x06, 0x6b, 0x03, 0x10, 0x78,
	0x4d, 0xce, 0x3c, 0x8a, 0x4c, 0xd0, 0xed, 0xc8, 0xae, 0x42, 0xa4, 0x61, 0x45, 0x6d, 0x4e, 0x72,
	0xed, 0xbe, 0xf5, 0xf2, 0x64, 0x69, 0x59, 0x66, 0xce, 0xb6, 0xc5, 0xe5, 0x9c, 0x1d, 0x4f, 0xa8,
	0x92, 0xe1, 0x59, 0x40, 0x82, 0x68, 0x5f, 0x1c, 0x9c, 0xda, 0x3d, 0xbe, 0x07, 0xaf, 0xf7, 0xcc,
	0x2a, 0xa2, 0x77, 0x61, 0x54, 0x1e, 0xb0, 0xc8, 0x3e, 0x59, 0x9c, 0x2b, 0xc4, 0x1a, 0xae, 0x20,
	0x1d, 0x76, 0x47, 0x9e, 0x9f, 0x2c, 0x0d, 0x95, 0x95, 0x31, 0x7e, 0x0f, 0xe6, 0x45, 0xb4, 0xbb,
	0xd4, 0x7f, 0x10, 0x76, 0x40, 0x54, 0xe8, 0x79, 0x18, 0x97, 0xd0, 0xb6, 0xa5, 0x6a, 0x3d, 0x26,
	0xc6, 0x25, 0x0b, 0x7f, 0x05, 0x7a, 0x9a, 0x9f, 0x82, 0xd9, 0x06, 0x88, 0xfa, 0x29, 0x00, 0x1a,
	0x5e, 0x9d, 0x2c, 0xea, 0x09, 0xa0, 0xc8, 0xb1, 0xdc, 0x65, 0x8d, 0x6f, 0xc0, 0x5c, 0x18, 0x79,
	0x8f, 0x7b, 0xfe, 0x43, 0xce, 0xe8, 0x40, 0x3c, 0xb9, 0xa4, 0x97, 0xa2, 0xf9, 0x00, 0x26, 0xa2,
	0xe6, 0x55, 0xd5, 0x99, 0x4f, 0xc0, 0x84, 0x5e, 0xaa, 0x3e, 0xe3, 0x75, 0x35, 0xc6, 0x44, 0xf1,
	0xec, 0x38, 0x4e, 0x9c, 0xe7, 0x0e, 0x40, 0xe7, 0xda, 0xa9, 0xc8, 0xd7, 0x0a, 0xf2, 0x8e, 0x16,
	0x82, 0x3b, 0x5a, 0x90, 0x0a, 0xa0, 0xee, 0x68, 0x61, 0x9f, 0xd4, 0x42, 0xdf, 0x72, 0x97, 0x27,
	0x7e, 0xa6, 0x29, 0xfa, 0x9e, 0x1c, 0xe9, 0xf4, 0xc3, 0xe7, 0xa2, 0x47, 0x77, 0x7b, 0x10, 0x2f,
	0x08, 0xc4, 0x95, 0xff, 0x45, 0x94, 0xa9, 0x7b, 0x18, 0x0d, 0xd5, 0x28, 0x9f, 0x72, 0xab, 0xe5,
	0xd0, 0xd8, 0x8d, 0x44, 0x30, 0xc2, 0x48, 0x83, 0xaa, 0x43, 0x11, 0xbf, 0xf1, 0x3b, 0xaa, 0x43,
	0x62, 0x0e, 0x6a, 0x57, 0x08, 0x46, 0x82, 0x1b, 0x10, 0x7a, 0x04, 0xbf, 0xf1, 0x1e, 0x5c, 0x0e,
	0xcf, 0xf0, 0x76, 0xa0, 0x25, 0x5f, 0x48, 0x29, 0x09, 0x93, 0xac, 0xc1, 0x6b, 0x52, 0x62, 0x6c,
	0x8b, 0x32, 0xdf, 0xfe, 0xc6, 0x8e, 0x14, 0x60, 0x46, 0xcc, 0x97, 0xa2, 0x69, 0x5c, 0x87, 0x85,
	0xf4, 0x48, 0x2a, 0xfb, 0x1e, 0x4c, 0xf7, 0xa8, 0x95, 0x3a, 0xbb, 0xc5, 0x44, 0x5d, 0xbb, 0xbd,
	0x55, 0x6d, 0xa7, 0x68, 0xd7, 0x1c, 0x5e, 0x54, 0xcc, 0x3b, 0x8e, 0x93, 0xc2, 0x1c, 0x81, 0x24,
	0x96, 0xb3, 0x41, 0x86, 0x5f, 0x0d, 0xe4, 0x6b, 0x58, 0x0e, 0xb7, 0xfc, 0x19, 0x3d, 0xf4, 0xf7,
	0x83, 0x59, 0xff, 0x7e, 0x80, 0xc1, 0xcc, 0xa8, 0x61, 0x17, 0x01, 0xcc, 0x3a, 0x61, 0x8c, 0x3a,
	0x9d, 0x2b, 0x34, 0xa1, 0x66, 0x4a, 0x16, 0x9a, 0x83, 0xb1, 0x26, 0x77, 0xfd, 0x48, 0x3c, 0xcb,
	0xa3, 0xc1, 0xb0, 0x64, 0xe1, 0x8f, 0x00, 0xf7, 0x0b, 0xae, 0x36, 0xa3, 0xc3, 0xb8, 0xa7, 0xe6,
	0x44, 0xec, 0x91, 0x72, 0x34, 0xc6, 0x45, 0x78, 0x43, 0x16, 0x42, 0xf6, 0xc1, 0x97, 0xa1, 0xfc,
	0x7b, 0x28, 0x07, 0x63, 0x3d, 0xba, 0x59, 0x0e, 0x87, 0xf8, 0x10, 0xf2, 0xe9, 0x3e, 0x51, 0xc6,
	0x07, 0x80, 0x12, 0x0f, 0x4a, 0xa8, 0x37, 0xcb, 0x89, 0x1a, 0xc6, 0xe3, 0xa8, 0x3a, 0x5e, 0x22,
	0xf1, 0xf8, 0xc5, 0x7f, 0xa7, 0xe0, 0xa2, 0x48, 0x8d, 0x9e, 0xc0, 0xa8, 0xd4, 0x4d, 0x74, 0x25,
	0x11, 0x2f, 0x29, 0xce, 0xfa, 0xd5, 0xfe, 0x46, 0x12, 0x1b, 0xaf, 0x7f, 0xff, 0xe7, 0x3f, 0x3f,
	0x5e, 0xb8, 0x8a, 0xb0, 0x71, 0x5f, 0x58, 0x3b, 0xa4, 0xea, 0x19, 0xe9, 0xcf, 0x35, 0x7a, 0xa6,
	0x01, 0x74, 0x14, 0x16, 0xad, 0xa7, 0x27, 0x48, 0x93, 0x6f, 0xfd, 0xed, 0x81, 0x6c, 0x15, 0xd3,
	0xb6, 0x60, 0xba, 0x81, 0x8a, 0x8a, 0xe9, 0xfa, 0xbd, 0x34, 0xa8, 0x8e, 0x4e, 0x1b, 0xc7, 0xa1,
	0x14, 0xb7, 0xd1, 0xcf, 0x1a, 0x8c, 0x87, 0x0a, 0x84, 0x56, 0x33, 0xb3, 0xc6, 0xe4, 0x53, 0x5f,
	0x1b, 0xc0, 0x52, 0xd1, 0xdd, 0x14, 0x74, 0x5b, 0x68, 0xb3, 0x2f, 0x5d, 0xa4, 0x93, 0xdd, 0x70,
	0x3f, 0x68, 0x30, 0x19, 0xc6, 0xdb, 0x71, 0x9c, 0x2c, 0xbe, 0xa4, 0xbc, 0x67, 0xf1, 0xa5, 0x88,
	0x34, 0x2e, 0x08, 0xbe, 0x55, 0x74, 0x6d, 0x30, 0x3e, 0xf4, 0xab, 0x06, 0xd3, 0x3d, 0xc2, 0x98,
	0x75, 0xb0, 0x69, 0x72, 0x9b, 0x75, 0xb0, 0xa9, 0x4a, 0x3b, 0xe0, 0xc1, 0x36, 0x84, 0x6f, 0xf8,
	0x55, 0x62, 0x1c, 0x07, 0x12, 0xde, 0x46, 0x3f, 0x69, 0xb0, 0xd0, 0xef, 0x7b, 0x08, 0xdd, 0x4c,
	0x27, 0x19, 0xe0, 0x2b, 0x4e, 0xdf, 0x7e, 0x15, 0x57, 0x75, 0xef, 0x7f, 0xd7, 0x60, 0xaa, 0x5b,
	0x11, 0xd1, 0x46, 0x66, 0x2b, 0xa5, 0xa8, 0xb2, 0x7e, 0x7d, 0x40, 0x6b, 0x55, 0xc1, 0xdb, 0xa2,
	0x82, 0x1f, 0xa2, 0x5b, 0x7d, 0x2b, 0xd8, 0xa3, 0xe3, 0xc6, 0x71, 0xfc, 0xa9, 0x6a, 0xa3, 0x5f,
	0x34, 0x98, 0xe9, 0x8e, 0x1f, 0x34, 0xe3, 0x46, 0x66, 0x8b, 0x9d, 0x83, 0x3b, 0xe3, 0x71, 0xc1,
	0x45, 0xc1, 0xbd, 0x81, 0xd6, 0x07, 0xe7, 0x46, 0x7f, 0x68, 0x80, 0x92, 0x12, 0x8f, 0x8a, 0x99,
	0x15, 0xcb, 0x7c, 0x6c, 0xf4, 0xad, 0x73, 0xf9, 0x28, 0xe6, 0x7d, 0xc1, 0xfc, 0x31, 0xda, 0xeb,
	0xcb, 0xcc, 0xe8, 0xa1, 0x5f, 0x69, 0x8a, 0x08, 0x95, 0xf0, 0x89, 0x11, 0x77, 0x5e, 0x3d, 0x6d,
	0x6d, 0xe3, 0x58, 0x3d, 0x64, 0x6d, 0xf4, 0x9b, 0x06, 0x97, 0x92, 0xaf, 0xce, 0x4a, 0x46, 0x29,
	0xe3, 0x86, 0xba, 0x31, 0xa0, 0xe1, 0x39, 0xa5, 0xaa, 0xf3, 0x5c, 0x19, 0xc7, 0xea, 0xd2, 0xb5,
	0x77, 0x3f, 0x79, 0x7e, 0x9a, 0xd7, 0x5e, 0x9c, 0xe6, 0xb5, 0xbf, 0x4f, 0xf3, 0xda, 0xd3, 0xb3,
	0xfc, 0xd0, 0x8b, 0xb3, 0xfc, 0xd0, 0x5f, 0x67, 0xf9, 0xa1, 0x87, 0x9b, 0x35, 0xdb, 0xaf, 0xb7,
	0xaa, 0x05, 0x93, 0x37, 0xd2, 0xc2, 0x1e, 0xbc, 0x6f, 0x1c, 0x76, 0x62, 0xfb, 0x47, 0x4d, 0xea,
	0x55, 0x47, 0xc5, 0x1f, 0xab, 0xad, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x72, 0xeb, 0xc4, 0xe4,
	0x96, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Validator by host zone.
	Validators(ctx context.Context, in *QueryGetValidatorsRequest, opts ...grpc.CallOption) (*QueryGetValidatorsResponse, error)
	// Queries a HostZone by id.
	HostZone(ctx context.Context, in *QueryGetHostZoneRequest, opts ...grpc.CallOption) (*QueryGetHostZoneResponse, error)
	// Queries a list of HostZone items.
	HostZoneAll(ctx context.Context, in *QueryAllHostZoneRequest, opts ...grpc.CallOption) (*QueryAllHostZoneResponse, error)
	// Queries a list of ModuleAddress items.
	ModuleAddress(ctx context.Context, in *QueryModuleAddressRequest, opts ...grpc.CallOption) (*QueryModuleAddressResponse, error)
	// QueryInterchainAccountFromAddress returns the interchain account for given
	// owner address on a given connection pair
	InterchainAccountFromAddress(ctx context.Context, in *QueryInterchainAccountFromAddressRequest, opts ...grpc.CallOption) (*QueryInterchainAccountFromAddressResponse, error)
	// Queries a EpochTracker by index.
	EpochTracker(ctx context.Context, in *QueryGetEpochTrackerRequest, opts ...grpc.CallOption) (*QueryGetEpochTrackerResponse, error)
	// Queries a list of EpochTracker items.
	EpochTrackerAll(ctx context.Context, in *QueryAllEpochTrackerRequest, opts ...grpc.CallOption) (*QueryAllEpochTrackerResponse, error)
	// Queries the next packet sequence for one for a given channel
	NextPacketSequence(ctx context.Context, in *QueryGetNextPacketSequenceRequest, opts ...grpc.CallOption) (*QueryGetNextPacketSequenceResponse, error)
	// Queries an address's unbondings
	AddressUnbondings(ctx context.Context, in *QueryAddressUnbondings, opts ...grpc.CallOption) (*QueryAddressUnbondingsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryGetValidatorsRequest, opts ...grpc.CallOption) (*QueryGetValidatorsResponse, error) {
	out := new(QueryGetValidatorsResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostZone(ctx context.Context, in *QueryGetHostZoneRequest, opts ...grpc.CallOption) (*QueryGetHostZoneResponse, error) {
	out := new(QueryGetHostZoneResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/HostZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostZoneAll(ctx context.Context, in *QueryAllHostZoneRequest, opts ...grpc.CallOption) (*QueryAllHostZoneResponse, error) {
	out := new(QueryAllHostZoneResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/HostZoneAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModuleAddress(ctx context.Context, in *QueryModuleAddressRequest, opts ...grpc.CallOption) (*QueryModuleAddressResponse, error) {
	out := new(QueryModuleAddressResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/ModuleAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InterchainAccountFromAddress(ctx context.Context, in *QueryInterchainAccountFromAddressRequest, opts ...grpc.CallOption) (*QueryInterchainAccountFromAddressResponse, error) {
	out := new(QueryInterchainAccountFromAddressResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/InterchainAccountFromAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochTracker(ctx context.Context, in *QueryGetEpochTrackerRequest, opts ...grpc.CallOption) (*QueryGetEpochTrackerResponse, error) {
	out := new(QueryGetEpochTrackerResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/EpochTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochTrackerAll(ctx context.Context, in *QueryAllEpochTrackerRequest, opts ...grpc.CallOption) (*QueryAllEpochTrackerResponse, error) {
	out := new(QueryAllEpochTrackerResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/EpochTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextPacketSequence(ctx context.Context, in *QueryGetNextPacketSequenceRequest, opts ...grpc.CallOption) (*QueryGetNextPacketSequenceResponse, error) {
	out := new(QueryGetNextPacketSequenceResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/NextPacketSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressUnbondings(ctx context.Context, in *QueryAddressUnbondings, opts ...grpc.CallOption) (*QueryAddressUnbondingsResponse, error) {
	out := new(QueryAddressUnbondingsResponse)
	err := c.cc.Invoke(ctx, "/stride.stakeibc.Query/AddressUnbondings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Validator by host zone.
	Validators(context.Context, *QueryGetValidatorsRequest) (*QueryGetValidatorsResponse, error)
	// Queries a HostZone by id.
	HostZone(context.Context, *QueryGetHostZoneRequest) (*QueryGetHostZoneResponse, error)
	// Queries a list of HostZone items.
	HostZoneAll(context.Context, *QueryAllHostZoneRequest) (*QueryAllHostZoneResponse, error)
	// Queries a list of ModuleAddress items.
	ModuleAddress(context.Context, *QueryModuleAddressRequest) (*QueryModuleAddressResponse, error)
	// QueryInterchainAccountFromAddress returns the interchain account for given
	// owner address on a given connection pair
	InterchainAccountFromAddress(context.Context, *QueryInterchainAccountFromAddressRequest) (*QueryInterchainAccountFromAddressResponse, error)
	// Queries a EpochTracker by index.
	EpochTracker(context.Context, *QueryGetEpochTrackerRequest) (*QueryGetEpochTrackerResponse, error)
	// Queries a list of EpochTracker items.
	EpochTrackerAll(context.Context, *QueryAllEpochTrackerRequest) (*QueryAllEpochTrackerResponse, error)
	// Queries the next packet sequence for one for a given channel
	NextPacketSequence(context.Context, *QueryGetNextPacketSequenceRequest) (*QueryGetNextPacketSequenceResponse, error)
	// Queries an address's unbondings
	AddressUnbondings(context.Context, *QueryAddressUnbondings) (*QueryAddressUnbondingsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Validators(ctx context.Context, req *QueryGetValidatorsRequest) (*QueryGetValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryServer) HostZone(ctx context.Context, req *QueryGetHostZoneRequest) (*QueryGetHostZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostZone not implemented")
}
func (*UnimplementedQueryServer) HostZoneAll(ctx context.Context, req *QueryAllHostZoneRequest) (*QueryAllHostZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostZoneAll not implemented")
}
func (*UnimplementedQueryServer) ModuleAddress(ctx context.Context, req *QueryModuleAddressRequest) (*QueryModuleAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleAddress not implemented")
}
func (*UnimplementedQueryServer) InterchainAccountFromAddress(ctx context.Context, req *QueryInterchainAccountFromAddressRequest) (*QueryInterchainAccountFromAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterchainAccountFromAddress not implemented")
}
func (*UnimplementedQueryServer) EpochTracker(ctx context.Context, req *QueryGetEpochTrackerRequest) (*QueryGetEpochTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochTracker not implemented")
}
func (*UnimplementedQueryServer) EpochTrackerAll(ctx context.Context, req *QueryAllEpochTrackerRequest) (*QueryAllEpochTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochTrackerAll not implemented")
}
func (*UnimplementedQueryServer) NextPacketSequence(ctx context.Context, req *QueryGetNextPacketSequenceRequest) (*QueryGetNextPacketSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextPacketSequence not implemented")
}
func (*UnimplementedQueryServer) AddressUnbondings(ctx context.Context, req *QueryAddressUnbondings) (*QueryAddressUnbondingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressUnbondings not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryGetValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHostZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/HostZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostZone(ctx, req.(*QueryGetHostZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostZoneAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHostZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostZoneAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/HostZoneAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostZoneAll(ctx, req.(*QueryAllHostZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModuleAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/ModuleAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleAddress(ctx, req.(*QueryModuleAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InterchainAccountFromAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInterchainAccountFromAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InterchainAccountFromAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/InterchainAccountFromAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InterchainAccountFromAddress(ctx, req.(*QueryInterchainAccountFromAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/EpochTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochTracker(ctx, req.(*QueryGetEpochTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/EpochTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochTrackerAll(ctx, req.(*QueryAllEpochTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextPacketSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNextPacketSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextPacketSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/NextPacketSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextPacketSequence(ctx, req.(*QueryGetNextPacketSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressUnbondings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressUnbondings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressUnbondings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakeibc.Query/AddressUnbondings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressUnbondings(ctx, req.(*QueryAddressUnbondings))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.stakeibc.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "HostZone",
			Handler:    _Query_HostZone_Handler,
		},
		{
			MethodName: "HostZoneAll",
			Handler:    _Query_HostZoneAll_Handler,
		},
		{
			MethodName: "ModuleAddress",
			Handler:    _Query_ModuleAddress_Handler,
		},
		{
			MethodName: "InterchainAccountFromAddress",
			Handler:    _Query_InterchainAccountFromAddress_Handler,
		},
		{
			MethodName: "EpochTracker",
			Handler:    _Query_EpochTracker_Handler,
		},
		{
			MethodName: "EpochTrackerAll",
			Handler:    _Query_EpochTrackerAll_Handler,
		},
		{
			MethodName: "NextPacketSequence",
			Handler:    _Query_NextPacketSequence_Handler,
		},
		{
			MethodName: "AddressUnbondings",
			Handler:    _Query_AddressUnbondings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/stakeibc/query.proto",
}

func (m *QueryInterchainAccountFromAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInterchainAccountFromAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInterchainAccountFromAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInterchainAccountFromAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInterchainAccountFromAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInterchainAccountFromAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterchainAccountAddress) > 0 {
		i -= len(m.InterchainAccountAddress)
		copy(dAtA[i:], m.InterchainAccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterchainAccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostZoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostZoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostZoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHostZoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHostZoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHostZoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HostZone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHostZoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostZoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostZoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHostZoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHostZoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHostZoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostZone) > 0 {
		for iNdEx := len(m.HostZone) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostZone[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochTracker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochTracker) > 0 {
		for iNdEx := len(m.EpochTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNextPacketSequenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNextPacketSequenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNextPacketSequenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNextPacketSequenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNextPacketSequenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNextPacketSequenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressUnbondings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressUnbondings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressUnbondings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressUnbondingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressUnbondingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressUnbondingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressUnbondings) > 0 {
		for iNdEx := len(m.AddressUnbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressUnbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryInterchainAccountFromAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInterchainAccountFromAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterchainAccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetHostZoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHostZoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HostZone.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHostZoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHostZoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HostZone) > 0 {
		for _, e := range m.HostZone {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryModuleAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryModuleAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochTracker.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllEpochTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochTracker) > 0 {
		for _, e := range m.EpochTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetNextPacketSequenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNextPacketSequenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovQuery(uint64(m.Sequence))
	}
	return n
}

func (m *QueryAddressUnbondings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressUnbondingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressUnbondings) > 0 {
		for _, e := range m.AddressUnbondings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryInterchainAccountFromAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInterchainAccountFromAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostZoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostZoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostZoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHostZoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHostZoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHostZoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostZoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostZoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostZoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHostZoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHostZoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHostZoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZone = append(m.HostZone, HostZone{})
			if err := m.HostZone[len(m.HostZone)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochTracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochTracker = append(m.EpochTracker, EpochTracker{})
			if err := m.EpochTracker[len(m.EpochTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNextPacketSequenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNextPacketSequenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNextPacketSequenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNextPacketSequenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNextPacketSequenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNextPacketSequenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressUnbondings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressUnbondings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressUnbondings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressUnbondingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressUnbondingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressUnbondingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressUnbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressUnbondings = append(m.AddressUnbondings, AddressUnbonding{})
			if err := m.AddressUnbondings[len(m.AddressUnbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
