// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/address_unbonding.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddressUnbonding struct {
	Address                string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Receiver               string                                 `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	UnbondingEstimatedTime string                                 `protobuf:"bytes,3,opt,name=unbonding_estimated_time,json=unbondingEstimatedTime,proto3" json:"unbonding_estimated_time,omitempty"`
	Amount                 github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Denom                  string                                 `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	ClaimIsPending         bool                                   `protobuf:"varint,8,opt,name=claim_is_pending,json=claimIsPending,proto3" json:"claim_is_pending,omitempty"`
}

func (m *AddressUnbonding) Reset()         { *m = AddressUnbonding{} }
func (m *AddressUnbonding) String() string { return proto.CompactTextString(m) }
func (*AddressUnbonding) ProtoMessage()    {}
func (*AddressUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_6491082275bcb473, []int{0}
}
func (m *AddressUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressUnbonding.Merge(m, src)
}
func (m *AddressUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *AddressUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_AddressUnbonding proto.InternalMessageInfo

func (m *AddressUnbonding) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressUnbonding) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *AddressUnbonding) GetUnbondingEstimatedTime() string {
	if m != nil {
		return m.UnbondingEstimatedTime
	}
	return ""
}

func (m *AddressUnbonding) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AddressUnbonding) GetClaimIsPending() bool {
	if m != nil {
		return m.ClaimIsPending
	}
	return false
}

func init() {
	proto.RegisterType((*AddressUnbonding)(nil), "stride.stakeibc.AddressUnbonding")
}

func init() {
	proto.RegisterFile("stride/stakeibc/address_unbonding.proto", fileDescriptor_6491082275bcb473)
}

var fileDescriptor_6491082275bcb473 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0x3d, 0x4f, 0x02, 0x41,
	0x10, 0xbd, 0x43, 0x41, 0xdc, 0x42, 0xc9, 0x86, 0x98, 0x0d, 0xc5, 0x41, 0x2c, 0x94, 0x86, 0xdb,
	0x18, 0x1b, 0x5a, 0x49, 0x34, 0x21, 0x5a, 0x18, 0xd4, 0xc6, 0xe6, 0x72, 0x77, 0x3b, 0x39, 0x37,
	0xb8, 0xb7, 0xe4, 0x66, 0x21, 0xfa, 0x17, 0xac, 0xfc, 0x59, 0x94, 0x94, 0xc6, 0x82, 0x18, 0xf8,
	0x23, 0x86, 0xbd, 0x0f, 0xad, 0x76, 0xdf, 0xbc, 0x37, 0x6f, 0x5e, 0x66, 0xc8, 0x39, 0x9a, 0x4c,
	0x0a, 0xe0, 0x68, 0xc2, 0x29, 0xc8, 0x28, 0xe6, 0xa1, 0x10, 0x19, 0x20, 0x06, 0xf3, 0x34, 0xd2,
	0xa9, 0x90, 0x69, 0xe2, 0xcf, 0x32, 0x6d, 0x34, 0x3d, 0xce, 0x85, 0x7e, 0x29, 0xec, 0xb4, 0x13,
	0x9d, 0x68, 0xcb, 0xf1, 0xdd, 0x2f, 0x97, 0x9d, 0x7e, 0xd4, 0x48, 0xeb, 0x2a, 0xb7, 0x78, 0x2a,
	0x1d, 0x28, 0x23, 0x07, 0x85, 0x2d, 0x73, 0x7b, 0x6e, 0xff, 0x70, 0x52, 0x42, 0xda, 0x21, 0xcd,
	0x0c, 0x62, 0x90, 0x0b, 0xc8, 0x58, 0xcd, 0x52, 0x15, 0xa6, 0x43, 0xc2, 0xaa, 0x10, 0x01, 0xa0,
	0x91, 0x2a, 0x34, 0x20, 0x02, 0x23, 0x15, 0xb0, 0x3d, 0xab, 0x3d, 0xa9, 0xf8, 0xeb, 0x92, 0x7e,
	0x94, 0x0a, 0xe8, 0x0d, 0x69, 0x84, 0x4a, 0xcf, 0x53, 0xc3, 0xf6, 0x77, 0xba, 0x91, 0xbf, 0x5c,
	0x77, 0x9d, 0xef, 0x75, 0xf7, 0x2c, 0x91, 0xe6, 0x65, 0x1e, 0xf9, 0xb1, 0x56, 0x3c, 0xd6, 0xa8,
	0x34, 0x16, 0xcf, 0x00, 0xc5, 0x94, 0x9b, 0xf7, 0x19, 0xa0, 0x3f, 0x4e, 0xcd, 0xa4, 0xe8, 0xa6,
	0x6d, 0x52, 0x17, 0x90, 0x6a, 0xc5, 0xea, 0x76, 0x5c, 0x0e, 0x68, 0x9f, 0xb4, 0xe2, 0xd7, 0x50,
	0xaa, 0x40, 0x62, 0x30, 0x03, 0x3b, 0x9e, 0x35, 0x7b, 0x6e, 0xbf, 0x39, 0x39, 0xb2, 0xf5, 0x31,
	0xde, 0xe7, 0xd5, 0xd1, 0xed, 0x72, 0xe3, 0xb9, 0xab, 0x8d, 0xe7, 0xfe, 0x6c, 0x3c, 0xf7, 0x73,
	0xeb, 0x39, 0xab, 0xad, 0xe7, 0x7c, 0x6d, 0x3d, 0xe7, 0xf9, 0xe2, 0x5f, 0x92, 0x07, 0xbb, 0xd8,
	0xc1, 0x5d, 0x18, 0x21, 0x2f, 0xae, 0xb1, 0x18, 0xf2, 0xb7, 0xbf, 0x93, 0xd8, 0x60, 0x51, 0xc3,
	0x2e, 0xf8, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x65, 0xe4, 0xd1, 0xa7, 0xb2, 0x01, 0x00, 0x00,
}

func (m *AddressUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimIsPending {
		i--
		if m.ClaimIsPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAddressUnbonding(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAddressUnbonding(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UnbondingEstimatedTime) > 0 {
		i -= len(m.UnbondingEstimatedTime)
		copy(dAtA[i:], m.UnbondingEstimatedTime)
		i = encodeVarintAddressUnbonding(dAtA, i, uint64(len(m.UnbondingEstimatedTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintAddressUnbonding(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAddressUnbonding(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAddressUnbonding(dAtA []byte, offset int, v uint64) int {
	offset -= sovAddressUnbonding(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddressUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAddressUnbonding(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovAddressUnbonding(uint64(l))
	}
	l = len(m.UnbondingEstimatedTime)
	if l > 0 {
		n += 1 + l + sovAddressUnbonding(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAddressUnbonding(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAddressUnbonding(uint64(l))
	}
	if m.ClaimIsPending {
		n += 2
	}
	return n
}

func sovAddressUnbonding(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAddressUnbonding(x uint64) (n int) {
	return sovAddressUnbonding(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressUnbonding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingEstimatedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingEstimatedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimIsPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimIsPending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAddressUnbonding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddressUnbonding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddressUnbonding(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddressUnbonding
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressUnbonding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAddressUnbonding
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAddressUnbonding
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAddressUnbonding
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAddressUnbonding        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddressUnbonding          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAddressUnbonding = fmt.Errorf("proto: unexpected end of group")
)
