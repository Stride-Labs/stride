// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/auction/auction.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuctionType int32

const (
	// Default value - should not be used
	AuctionType_AUCTION_TYPE_UNSPECIFIED AuctionType = 0
	// First-Come First-Served auction
	AuctionType_AUCTION_TYPE_FCFS AuctionType = 1
)

var AuctionType_name = map[int32]string{
	0: "AUCTION_TYPE_UNSPECIFIED",
	1: "AUCTION_TYPE_FCFS",
}

var AuctionType_value = map[string]int32{
	"AUCTION_TYPE_UNSPECIFIED": 0,
	"AUCTION_TYPE_FCFS":        1,
}

func (x AuctionType) String() string {
	return proto.EnumName(AuctionType_name, int32(x))
}

func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_739480caccbf7be9, []int{0}
}

type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_739480caccbf7be9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type Auction struct {
	// Auction type
	Type AuctionType `protobuf:"varint,1,opt,name=type,proto3,enum=stride.auction.AuctionType" json:"type,omitempty"`
	// A unique auction name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Token denom being sold in the auction
	SellingDenom string `protobuf:"bytes,3,opt,name=selling_denom,json=sellingDenom,proto3" json:"selling_denom,omitempty"`
	// Token denom used to place bids
	PaymentDenom string `protobuf:"bytes,4,opt,name=payment_denom,json=paymentDenom,proto3" json:"payment_denom,omitempty"`
	// Whether auction is active
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Price multiplier (e.g. 0.95 for 5% discount)
	PriceMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=price_multiplier,json=priceMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price_multiplier"`
	// Minimum payment token bid amount
	MinBidAmount cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=min_bid_amount,json=minBidAmount,proto3,customtype=cosmossdk.io/math.Int" json:"min_bid_amount"`
	// Address to send the auction proceeds to
	Beneficiary string `protobuf:"bytes,8,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	// Total amount of payment token received
	TotalPaymentTokenReceived cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=total_payment_token_received,json=totalPaymentTokenReceived,proto3,customtype=cosmossdk.io/math.Int" json:"total_payment_token_received"`
	// Total amount of selling token sold
	TotalSellingTokenSold cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=total_selling_token_sold,json=totalSellingTokenSold,proto3,customtype=cosmossdk.io/math.Int" json:"total_selling_token_sold"`
}

func (m *Auction) Reset()         { *m = Auction{} }
func (m *Auction) String() string { return proto.CompactTextString(m) }
func (*Auction) ProtoMessage()    {}
func (*Auction) Descriptor() ([]byte, []int) {
	return fileDescriptor_739480caccbf7be9, []int{1}
}
func (m *Auction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auction.Merge(m, src)
}
func (m *Auction) XXX_Size() int {
	return m.Size()
}
func (m *Auction) XXX_DiscardUnknown() {
	xxx_messageInfo_Auction.DiscardUnknown(m)
}

var xxx_messageInfo_Auction proto.InternalMessageInfo

func (m *Auction) GetType() AuctionType {
	if m != nil {
		return m.Type
	}
	return AuctionType_AUCTION_TYPE_UNSPECIFIED
}

func (m *Auction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Auction) GetSellingDenom() string {
	if m != nil {
		return m.SellingDenom
	}
	return ""
}

func (m *Auction) GetPaymentDenom() string {
	if m != nil {
		return m.PaymentDenom
	}
	return ""
}

func (m *Auction) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Auction) GetBeneficiary() string {
	if m != nil {
		return m.Beneficiary
	}
	return ""
}

func init() {
	proto.RegisterEnum("stride.auction.AuctionType", AuctionType_name, AuctionType_value)
	proto.RegisterType((*Params)(nil), "stride.auction.Params")
	proto.RegisterType((*Auction)(nil), "stride.auction.Auction")
}

func init() { proto.RegisterFile("stride/auction/auction.proto", fileDescriptor_739480caccbf7be9) }

var fileDescriptor_739480caccbf7be9 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0x28, 0xfb, 0xe3, 0x8d, 0x52, 0xac, 0x55, 0xf2, 0xb6, 0x92, 0x55, 0xdb, 0xa5,
	0x42, 0x5a, 0x22, 0x06, 0x27, 0x6e, 0xfd, 0x2b, 0x55, 0x8c, 0x52, 0x25, 0x1d, 0x12, 0x1c, 0x88,
	0x9c, 0xc4, 0x64, 0xd6, 0x62, 0x3b, 0x8a, 0xdd, 0x89, 0x7e, 0x0b, 0x3e, 0x0c, 0x37, 0xbe, 0xc0,
	0x8e, 0x13, 0x27, 0xc4, 0x61, 0x42, 0xed, 0x17, 0x41, 0xb1, 0xd3, 0x69, 0x13, 0x97, 0x9d, 0x62,
	0x3f, 0xef, 0xf3, 0xfc, 0x62, 0xd9, 0xef, 0x0b, 0x9a, 0x52, 0xe5, 0x34, 0x26, 0x2e, 0x9e, 0x45,
	0x8a, 0x0a, 0xbe, 0xfa, 0x3a, 0x59, 0x2e, 0x94, 0x80, 0x35, 0x53, 0x75, 0x4a, 0x75, 0x6f, 0x37,
	0x12, 0x92, 0x09, 0x19, 0xe8, 0xaa, 0x6b, 0x36, 0xc6, 0xba, 0xb7, 0x93, 0x88, 0x44, 0x18, 0xbd,
	0x58, 0x19, 0xf5, 0x70, 0x03, 0xac, 0x4d, 0x70, 0x8e, 0x99, 0x3c, 0xfc, 0x59, 0x05, 0xeb, 0x1d,
	0x83, 0x81, 0x2e, 0xa8, 0xaa, 0x79, 0x46, 0x90, 0xd5, 0xb2, 0xda, 0xb5, 0x93, 0x7d, 0xe7, 0xfe,
	0x5f, 0x9c, 0xd2, 0x36, 0x9d, 0x67, 0xc4, 0xd3, 0x46, 0x08, 0x41, 0x95, 0x63, 0x46, 0xd0, 0xa3,
	0x96, 0xd5, 0xde, 0xf4, 0xf4, 0x1a, 0x1e, 0x81, 0xa7, 0x92, 0xa4, 0x29, 0xe5, 0x49, 0x10, 0x13,
	0x2e, 0x18, 0x7a, 0xac, 0x8b, 0xdb, 0xa5, 0xd8, 0x2f, 0xb4, 0xc2, 0x94, 0xe1, 0x39, 0x23, 0x5c,
	0x95, 0xa6, 0xaa, 0x31, 0x95, 0xa2, 0x31, 0x21, 0xb0, 0x4e, 0x38, 0x0e, 0x53, 0x12, 0xa3, 0x27,
	0x2d, 0xab, 0xbd, 0xe1, 0xad, 0xb6, 0x70, 0x0c, 0xea, 0x59, 0x4e, 0x23, 0x12, 0xb0, 0x59, 0xaa,
	0x68, 0x96, 0x52, 0x92, 0xa3, 0xb5, 0x82, 0xd0, 0x3d, 0xba, 0xba, 0x39, 0xa8, 0xfc, 0xb9, 0x39,
	0xd8, 0x37, 0x97, 0x20, 0xe3, 0x0b, 0x87, 0x0a, 0x97, 0x61, 0x75, 0xee, 0x9c, 0x92, 0x04, 0x47,
	0xf3, 0x3e, 0x89, 0xbc, 0x67, 0x3a, 0xfc, 0xfe, 0x36, 0x0b, 0x7b, 0xa0, 0xc6, 0x28, 0x0f, 0x42,
	0x1a, 0x07, 0x98, 0x89, 0x19, 0x57, 0x68, 0x5d, 0xd3, 0x5e, 0x94, 0xb4, 0xc6, 0xff, 0xb4, 0x11,
	0x57, 0xde, 0x36, 0xa3, 0xbc, 0x4b, 0xe3, 0x8e, 0x8e, 0xc0, 0xb7, 0x60, 0x2b, 0x24, 0x9c, 0x7c,
	0xa5, 0x11, 0xc5, 0xf9, 0x1c, 0x6d, 0x68, 0x02, 0xfa, 0xf5, 0xe3, 0x78, 0xa7, 0x7c, 0x90, 0x4e,
	0x1c, 0xe7, 0x44, 0x4a, 0x5f, 0xe5, 0x94, 0x27, 0xde, 0x5d, 0x33, 0xfc, 0x02, 0x9a, 0x4a, 0x28,
	0x9c, 0x06, 0xab, 0x5b, 0x51, 0xe2, 0x82, 0xf0, 0x20, 0x27, 0x11, 0xa1, 0x97, 0x24, 0x46, 0x9b,
	0x0f, 0x39, 0xce, 0xae, 0x46, 0x4c, 0x0c, 0x61, 0x5a, 0x00, 0xbc, 0x32, 0x0f, 0x3f, 0x02, 0x64,
	0xf8, 0xab, 0xa7, 0x31, 0x7c, 0x29, 0xd2, 0x18, 0x81, 0x87, 0xb0, 0x1b, 0x3a, 0xee, 0x9b, 0xb4,
	0x66, 0xfb, 0x22, 0x8d, 0x5f, 0x76, 0xc1, 0xd6, 0x9d, 0xae, 0x80, 0x4d, 0x80, 0x3a, 0x67, 0xbd,
	0xe9, 0xe8, 0xc3, 0x38, 0x98, 0x7e, 0x9a, 0x0c, 0x82, 0xb3, 0xb1, 0x3f, 0x19, 0xf4, 0x46, 0xc3,
	0xd1, 0xa0, 0x5f, 0xaf, 0xc0, 0x06, 0x78, 0x7e, 0xaf, 0x3a, 0xec, 0x0d, 0xfd, 0xba, 0xd5, 0x7d,
	0x77, 0xb5, 0xb0, 0xad, 0xeb, 0x85, 0x6d, 0xfd, 0x5d, 0xd8, 0xd6, 0xf7, 0xa5, 0x5d, 0xb9, 0x5e,
	0xda, 0x95, 0xdf, 0x4b, 0xbb, 0xf2, 0xf9, 0x55, 0x42, 0xd5, 0xf9, 0x2c, 0x74, 0x22, 0xc1, 0x5c,
	0x5f, 0xf7, 0xe2, 0xf1, 0x29, 0x0e, 0xa5, 0x5b, 0xce, 0xc6, 0xe5, 0xc9, 0x1b, 0xf7, 0xdb, 0xed,
	0x84, 0x14, 0x0d, 0x29, 0xc3, 0x35, 0xdd, 0xdf, 0xaf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7c,
	0xb8, 0x16, 0x97, 0x40, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Auction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalSellingTokenSold.Size()
		i -= size
		if _, err := m.TotalSellingTokenSold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.TotalPaymentTokenReceived.Size()
		i -= size
		if _, err := m.TotalPaymentTokenReceived.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Beneficiary) > 0 {
		i -= len(m.Beneficiary)
		copy(dAtA[i:], m.Beneficiary)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Beneficiary)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.MinBidAmount.Size()
		i -= size
		if _, err := m.MinBidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.PriceMultiplier.Size()
		i -= size
		if _, err := m.PriceMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.PaymentDenom) > 0 {
		i -= len(m.PaymentDenom)
		copy(dAtA[i:], m.PaymentDenom)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.PaymentDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SellingDenom) > 0 {
		i -= len(m.SellingDenom)
		copy(dAtA[i:], m.SellingDenom)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.SellingDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Auction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAuction(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.SellingDenom)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = len(m.PaymentDenom)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	l = m.PriceMultiplier.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MinBidAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.Beneficiary)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.TotalPaymentTokenReceived.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.TotalSellingTokenSold.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuctionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPaymentTokenReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPaymentTokenReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSellingTokenSold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSellingTokenSold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
