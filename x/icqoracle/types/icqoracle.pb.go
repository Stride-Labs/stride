// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icqoracle/icqoracle.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The type of the Osmosis pool (gamm or CL), needed to determine the ICQ format
type OsmosisPoolType int32

const (
	// Gamm (Balancer) pool
	GAMM OsmosisPoolType = 0
	// Concentrated liquidity pool
	CONCENTRATED_LIQUIDITY OsmosisPoolType = 1
)

var OsmosisPoolType_name = map[int32]string{
	0: "GAMM",
	1: "CONCENTRATED_LIQUIDITY",
}

var OsmosisPoolType_value = map[string]int32{
	"GAMM":                   0,
	"CONCENTRATED_LIQUIDITY": 1,
}

func (x OsmosisPoolType) String() string {
	return proto.EnumName(OsmosisPoolType_name, int32(x))
}

func (OsmosisPoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_08ead8ab9516d7fc, []int{0}
}

// TokenPrice stores latest price data for a token
type TokenPrice struct {
	// Base denom on Stride
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// Quote denom on Stride
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Decimals of base token, used for normalizing price feed from Osmosis
	BaseDenomDecimals int64 `protobuf:"varint,3,opt,name=base_denom_decimals,json=baseDenomDecimals,proto3" json:"base_denom_decimals,omitempty"`
	// Decimals of quote token, used for normalizing price feed from Osmosis
	QuoteDenomDecimals int64 `protobuf:"varint,4,opt,name=quote_denom_decimals,json=quoteDenomDecimals,proto3" json:"quote_denom_decimals,omitempty"`
	// Base denom on Osmosis
	OsmosisBaseDenom string `protobuf:"bytes,5,opt,name=osmosis_base_denom,json=osmosisBaseDenom,proto3" json:"osmosis_base_denom,omitempty"`
	// Quote denom on Osmosis
	OsmosisQuoteDenom string `protobuf:"bytes,6,opt,name=osmosis_quote_denom,json=osmosisQuoteDenom,proto3" json:"osmosis_quote_denom,omitempty"`
	// Pool ID on Osmosis
	OsmosisPoolId uint64 `protobuf:"varint,7,opt,name=osmosis_pool_id,json=osmosisPoolId,proto3" json:"osmosis_pool_id,omitempty"`
	// Osmosis pool type (gamm or CL)
	OsmosisPoolType OsmosisPoolType `protobuf:"varint,8,opt,name=osmosis_pool_type,json=osmosisPoolType,proto3,enum=stride.icqoracle.OsmosisPoolType" json:"osmosis_pool_type,omitempty"`
	// Spot price of base_denom denominated in quote_denom
	SpotPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=spot_price,json=spotPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"spot_price"`
	// Last time a query request was submitted
	LastRequestTime time.Time `protobuf:"bytes,10,opt,name=last_request_time,json=lastRequestTime,proto3,stdtime" json:"last_request_time"`
	// Last time a query response was received
	LastResponseTime time.Time `protobuf:"bytes,11,opt,name=last_response_time,json=lastResponseTime,proto3,stdtime" json:"last_response_time"`
	// Whether there is a spot price query currently in progress
	QueryInProgress bool `protobuf:"varint,12,opt,name=query_in_progress,json=queryInProgress,proto3" json:"query_in_progress,omitempty"`
}

func (m *TokenPrice) Reset()         { *m = TokenPrice{} }
func (m *TokenPrice) String() string { return proto.CompactTextString(m) }
func (*TokenPrice) ProtoMessage()    {}
func (*TokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_08ead8ab9516d7fc, []int{0}
}
func (m *TokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPrice.Merge(m, src)
}
func (m *TokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *TokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPrice proto.InternalMessageInfo

func (m *TokenPrice) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *TokenPrice) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

func (m *TokenPrice) GetBaseDenomDecimals() int64 {
	if m != nil {
		return m.BaseDenomDecimals
	}
	return 0
}

func (m *TokenPrice) GetQuoteDenomDecimals() int64 {
	if m != nil {
		return m.QuoteDenomDecimals
	}
	return 0
}

func (m *TokenPrice) GetOsmosisBaseDenom() string {
	if m != nil {
		return m.OsmosisBaseDenom
	}
	return ""
}

func (m *TokenPrice) GetOsmosisQuoteDenom() string {
	if m != nil {
		return m.OsmosisQuoteDenom
	}
	return ""
}

func (m *TokenPrice) GetOsmosisPoolId() uint64 {
	if m != nil {
		return m.OsmosisPoolId
	}
	return 0
}

func (m *TokenPrice) GetOsmosisPoolType() OsmosisPoolType {
	if m != nil {
		return m.OsmosisPoolType
	}
	return GAMM
}

func (m *TokenPrice) GetLastRequestTime() time.Time {
	if m != nil {
		return m.LastRequestTime
	}
	return time.Time{}
}

func (m *TokenPrice) GetLastResponseTime() time.Time {
	if m != nil {
		return m.LastResponseTime
	}
	return time.Time{}
}

func (m *TokenPrice) GetQueryInProgress() bool {
	if m != nil {
		return m.QueryInProgress
	}
	return false
}

// OracleParams stores global oracle parameters
type Params struct {
	// Osmosis chain identifier
	OsmosisChainId string `protobuf:"bytes,1,opt,name=osmosis_chain_id,json=osmosisChainId,proto3" json:"osmosis_chain_id" yaml:"osmosis_chain_id"`
	// Osmosis IBC connection identifier
	OsmosisConnectionId string `protobuf:"bytes,2,opt,name=osmosis_connection_id,json=osmosisConnectionId,proto3" json:"osmosis_connection_id" yaml:"osmosis_connection_id"`
	// Time between price updates
	// Also used to timeout icq requests
	UpdateIntervalSec uint64 `protobuf:"varint,3,opt,name=update_interval_sec,json=updateIntervalSec,proto3" json:"update_interval_sec" yaml:"update_interval_sec"`
	// Max time before price is considered stale/expired
	PriceExpirationTimeoutSec uint64 `protobuf:"varint,4,opt,name=price_expiration_timeout_sec,json=priceExpirationTimeoutSec,proto3" json:"price_expiration_timeout_sec" yaml:"price_expiration_timeout_sec"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_08ead8ab9516d7fc, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetOsmosisChainId() string {
	if m != nil {
		return m.OsmosisChainId
	}
	return ""
}

func (m *Params) GetOsmosisConnectionId() string {
	if m != nil {
		return m.OsmosisConnectionId
	}
	return ""
}

func (m *Params) GetUpdateIntervalSec() uint64 {
	if m != nil {
		return m.UpdateIntervalSec
	}
	return 0
}

func (m *Params) GetPriceExpirationTimeoutSec() uint64 {
	if m != nil {
		return m.PriceExpirationTimeoutSec
	}
	return 0
}

func init() {
	proto.RegisterEnum("stride.icqoracle.OsmosisPoolType", OsmosisPoolType_name, OsmosisPoolType_value)
	proto.RegisterType((*TokenPrice)(nil), "stride.icqoracle.TokenPrice")
	proto.RegisterType((*Params)(nil), "stride.icqoracle.Params")
}

func init() { proto.RegisterFile("stride/icqoracle/icqoracle.proto", fileDescriptor_08ead8ab9516d7fc) }

var fileDescriptor_08ead8ab9516d7fc = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xbf, 0x4f, 0xdb, 0x4e,
	0x14, 0x8f, 0xbf, 0x04, 0xbe, 0xc9, 0xd1, 0x92, 0xe4, 0xa0, 0x6d, 0x9a, 0xd2, 0x38, 0x0d, 0x52,
	0x15, 0xa1, 0xd6, 0xae, 0x40, 0x0c, 0xad, 0xd4, 0x01, 0x27, 0x08, 0x59, 0x22, 0x10, 0x4c, 0x3a,
	0xd0, 0xc5, 0xba, 0xd8, 0xd7, 0x60, 0x61, 0xfb, 0x1c, 0xdf, 0x05, 0x91, 0xff, 0x80, 0x91, 0xb5,
	0x73, 0xff, 0x95, 0x0e, 0x8c, 0x8c, 0x55, 0x07, 0xb7, 0x82, 0x2d, 0x63, 0xfe, 0x82, 0xca, 0x67,
	0xc7, 0x09, 0x29, 0x42, 0xea, 0x66, 0x7f, 0x7e, 0xbd, 0x27, 0xbd, 0xf7, 0x0e, 0x54, 0x28, 0xf3,
	0x2d, 0x13, 0xcb, 0x96, 0xd1, 0x23, 0x3e, 0x32, 0xec, 0xa9, 0x2f, 0xc9, 0xf3, 0x09, 0x23, 0x30,
	0x1f, 0x29, 0xa4, 0x04, 0x2f, 0xad, 0x74, 0x49, 0x97, 0x70, 0x52, 0x0e, 0xbf, 0x22, 0x5d, 0x49,
	0xec, 0x12, 0xd2, 0xb5, 0xb1, 0xcc, 0xff, 0x3a, 0xfd, 0x2f, 0x32, 0xb3, 0x1c, 0x4c, 0x19, 0x72,
	0xbc, 0x48, 0x50, 0xfd, 0x3a, 0x0f, 0x40, 0x9b, 0x9c, 0x62, 0xb7, 0xe5, 0x5b, 0x06, 0x86, 0x2f,
	0x01, 0xe8, 0x20, 0x8a, 0x75, 0x13, 0xbb, 0xc4, 0x29, 0x0a, 0x15, 0xa1, 0x96, 0xd5, 0xb2, 0x21,
	0xd2, 0x08, 0x01, 0x28, 0x82, 0xc5, 0x5e, 0x9f, 0xb0, 0x31, 0xff, 0x1f, 0xe7, 0x01, 0x87, 0x22,
	0x81, 0x04, 0x96, 0x27, 0x7e, 0xdd, 0xc4, 0x86, 0xe5, 0x20, 0x9b, 0x16, 0xe7, 0x2a, 0x42, 0x6d,
	0x4e, 0x2b, 0x24, 0x41, 0x8d, 0x98, 0x80, 0xef, 0xc0, 0xca, 0x54, 0xe0, 0xc4, 0x90, 0xe6, 0x06,
	0x38, 0x49, 0x4e, 0x1c, 0x6f, 0x00, 0x24, 0xd4, 0x21, 0xd4, 0xa2, 0xfa, 0x54, 0xa7, 0xf3, 0xbc,
	0x93, 0x7c, 0xcc, 0x28, 0x49, 0xc3, 0x12, 0x58, 0x1e, 0xab, 0xa7, 0x1b, 0x5f, 0xe0, 0xf2, 0x42,
	0x4c, 0x1d, 0x4e, 0xfa, 0x7f, 0x0d, 0x72, 0x63, 0xbd, 0x47, 0x88, 0xad, 0x5b, 0x66, 0xf1, 0xff,
	0x8a, 0x50, 0x4b, 0x6b, 0x8f, 0x63, 0xb8, 0x45, 0x88, 0xad, 0x9a, 0xb0, 0x09, 0x0a, 0x77, 0x74,
	0x6c, 0xe0, 0xe1, 0x62, 0xa6, 0x22, 0xd4, 0x96, 0x36, 0x5e, 0x49, 0xb3, 0xb3, 0x91, 0x0e, 0x26,
	0xde, 0xf6, 0xc0, 0xc3, 0x5a, 0x8e, 0xdc, 0x05, 0xa0, 0x02, 0x00, 0xf5, 0x08, 0xd3, 0xbd, 0x70,
	0x08, 0xc5, 0x6c, 0xd8, 0x9d, 0xb2, 0x76, 0x15, 0x88, 0xa9, 0x9f, 0x81, 0xf8, 0xc2, 0xe0, 0x6a,
	0x6a, 0x9e, 0x4a, 0x16, 0x91, 0x1d, 0xc4, 0x4e, 0xa4, 0x3d, 0xdc, 0x45, 0xc6, 0xa0, 0x81, 0x0d,
	0x2d, 0x1b, 0xda, 0xa2, 0xd1, 0xb5, 0x40, 0xc1, 0x46, 0x94, 0xe9, 0x3e, 0xee, 0xf5, 0x31, 0x65,
	0x7a, 0x38, 0xe9, 0x22, 0xa8, 0x08, 0xb5, 0xc5, 0x8d, 0x92, 0x14, 0xad, 0x81, 0x34, 0x5e, 0x03,
	0xa9, 0x3d, 0x5e, 0x03, 0x25, 0x13, 0x96, 0xb9, 0xfc, 0x25, 0x0a, 0x5a, 0x2e, 0xb4, 0x6b, 0x91,
	0x3b, 0xe4, 0xa1, 0x06, 0x60, 0x9c, 0x48, 0x3d, 0xe2, 0x52, 0x1c, 0x45, 0x2e, 0xfe, 0x43, 0x64,
	0x3e, 0x8a, 0x8c, 0xec, 0x3c, 0x73, 0x1d, 0x14, 0x7a, 0x7d, 0xec, 0x0f, 0x74, 0xcb, 0xd5, 0x3d,
	0x9f, 0x74, 0x7d, 0x4c, 0x69, 0xf1, 0x51, 0x45, 0xa8, 0x65, 0xb4, 0x1c, 0x27, 0x54, 0xb7, 0x15,
	0xc3, 0xd5, 0xef, 0x73, 0x60, 0xa1, 0x85, 0x7c, 0xe4, 0x50, 0x78, 0x0c, 0xc6, 0xb3, 0xd5, 0x8d,
	0x13, 0x64, 0xb9, 0xe1, 0x60, 0xf8, 0x76, 0x2a, 0xf2, 0x30, 0x10, 0xff, 0xe2, 0x46, 0x81, 0xf8,
	0x6c, 0x80, 0x1c, 0xfb, 0x43, 0x75, 0x96, 0xa9, 0x6a, 0x4b, 0x31, 0x54, 0x0f, 0x11, 0xd5, 0x84,
	0x0e, 0x78, 0x92, 0x88, 0x88, 0xeb, 0x62, 0x83, 0x59, 0x84, 0xe7, 0xf3, 0xed, 0x56, 0xde, 0x0f,
	0x03, 0xf1, 0x7e, 0xc1, 0x28, 0x10, 0x57, 0x67, 0x8a, 0x4c, 0xd3, 0x55, 0x6d, 0xbc, 0x7a, 0xf5,
	0x04, 0x56, 0x4d, 0x88, 0xc1, 0x72, 0xdf, 0x33, 0x11, 0xc3, 0xba, 0xe5, 0x32, 0xec, 0x9f, 0x21,
	0x5b, 0xa7, 0xd8, 0xe0, 0x17, 0x92, 0x56, 0xb6, 0x86, 0x81, 0x78, 0x1f, 0x3d, 0x0a, 0xc4, 0x52,
	0x54, 0xea, 0x1e, 0xb2, 0xaa, 0x15, 0x22, 0x54, 0x8d, 0xc1, 0x23, 0x6c, 0xc0, 0x0b, 0x01, 0xac,
	0xf2, 0x6d, 0xd2, 0xf1, 0xb9, 0x67, 0xf9, 0x88, 0x37, 0x15, 0xce, 0x8f, 0xf4, 0x19, 0x2f, 0x98,
	0xe6, 0x05, 0x77, 0x87, 0x81, 0xf8, 0xa0, 0x6e, 0x14, 0x88, 0x6b, 0x51, 0xe5, 0x87, 0x54, 0x55,
	0xed, 0x39, 0xa7, 0x77, 0x12, 0xb6, 0x1d, 0x91, 0x47, 0xd8, 0x58, 0xff, 0x08, 0x72, 0x33, 0x07,
	0x00, 0x33, 0x20, 0xbd, 0xbb, 0xdd, 0x6c, 0xe6, 0x53, 0xb0, 0x04, 0x9e, 0xd6, 0x0f, 0xf6, 0xeb,
	0x3b, 0xfb, 0x6d, 0x6d, 0xbb, 0xbd, 0xd3, 0xd0, 0xf7, 0xd4, 0xc3, 0x4f, 0x6a, 0x43, 0x6d, 0x1f,
	0xe7, 0x85, 0x52, 0xfa, 0xe2, 0x5b, 0x39, 0xa5, 0x34, 0xaf, 0x6e, 0xca, 0xc2, 0xf5, 0x4d, 0x59,
	0xf8, 0x7d, 0x53, 0x16, 0x2e, 0x6f, 0xcb, 0xa9, 0xeb, 0xdb, 0x72, 0xea, 0xc7, 0x6d, 0x39, 0xf5,
	0x79, 0xb3, 0x6b, 0xb1, 0x93, 0x7e, 0x47, 0x32, 0x88, 0x23, 0x1f, 0xf1, 0x9b, 0x7b, 0xbb, 0x87,
	0x3a, 0x54, 0x8e, 0x5f, 0xcf, 0xb3, 0x8d, 0x2d, 0xf9, 0x7c, 0xea, 0x0d, 0x0d, 0x6f, 0x94, 0x76,
	0x16, 0xf8, 0xc2, 0x6e, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x72, 0x17, 0x78, 0x49, 0x64, 0x05,
	0x00, 0x00,
}

func (m *TokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryInProgress {
		i--
		if m.QueryInProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastResponseTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastResponseTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintIcqoracle(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastRequestTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRequestTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintIcqoracle(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x52
	{
		size := m.SpotPrice.Size()
		i -= size
		if _, err := m.SpotPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIcqoracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.OsmosisPoolType != 0 {
		i = encodeVarintIcqoracle(dAtA, i, uint64(m.OsmosisPoolType))
		i--
		dAtA[i] = 0x40
	}
	if m.OsmosisPoolId != 0 {
		i = encodeVarintIcqoracle(dAtA, i, uint64(m.OsmosisPoolId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OsmosisQuoteDenom) > 0 {
		i -= len(m.OsmosisQuoteDenom)
		copy(dAtA[i:], m.OsmosisQuoteDenom)
		i = encodeVarintIcqoracle(dAtA, i, uint64(len(m.OsmosisQuoteDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OsmosisBaseDenom) > 0 {
		i -= len(m.OsmosisBaseDenom)
		copy(dAtA[i:], m.OsmosisBaseDenom)
		i = encodeVarintIcqoracle(dAtA, i, uint64(len(m.OsmosisBaseDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.QuoteDenomDecimals != 0 {
		i = encodeVarintIcqoracle(dAtA, i, uint64(m.QuoteDenomDecimals))
		i--
		dAtA[i] = 0x20
	}
	if m.BaseDenomDecimals != 0 {
		i = encodeVarintIcqoracle(dAtA, i, uint64(m.BaseDenomDecimals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintIcqoracle(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintIcqoracle(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriceExpirationTimeoutSec != 0 {
		i = encodeVarintIcqoracle(dAtA, i, uint64(m.PriceExpirationTimeoutSec))
		i--
		dAtA[i] = 0x20
	}
	if m.UpdateIntervalSec != 0 {
		i = encodeVarintIcqoracle(dAtA, i, uint64(m.UpdateIntervalSec))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OsmosisConnectionId) > 0 {
		i -= len(m.OsmosisConnectionId)
		copy(dAtA[i:], m.OsmosisConnectionId)
		i = encodeVarintIcqoracle(dAtA, i, uint64(len(m.OsmosisConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OsmosisChainId) > 0 {
		i -= len(m.OsmosisChainId)
		copy(dAtA[i:], m.OsmosisChainId)
		i = encodeVarintIcqoracle(dAtA, i, uint64(len(m.OsmosisChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIcqoracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovIcqoracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovIcqoracle(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovIcqoracle(uint64(l))
	}
	if m.BaseDenomDecimals != 0 {
		n += 1 + sovIcqoracle(uint64(m.BaseDenomDecimals))
	}
	if m.QuoteDenomDecimals != 0 {
		n += 1 + sovIcqoracle(uint64(m.QuoteDenomDecimals))
	}
	l = len(m.OsmosisBaseDenom)
	if l > 0 {
		n += 1 + l + sovIcqoracle(uint64(l))
	}
	l = len(m.OsmosisQuoteDenom)
	if l > 0 {
		n += 1 + l + sovIcqoracle(uint64(l))
	}
	if m.OsmosisPoolId != 0 {
		n += 1 + sovIcqoracle(uint64(m.OsmosisPoolId))
	}
	if m.OsmosisPoolType != 0 {
		n += 1 + sovIcqoracle(uint64(m.OsmosisPoolType))
	}
	l = m.SpotPrice.Size()
	n += 1 + l + sovIcqoracle(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRequestTime)
	n += 1 + l + sovIcqoracle(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastResponseTime)
	n += 1 + l + sovIcqoracle(uint64(l))
	if m.QueryInProgress {
		n += 2
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OsmosisChainId)
	if l > 0 {
		n += 1 + l + sovIcqoracle(uint64(l))
	}
	l = len(m.OsmosisConnectionId)
	if l > 0 {
		n += 1 + l + sovIcqoracle(uint64(l))
	}
	if m.UpdateIntervalSec != 0 {
		n += 1 + sovIcqoracle(uint64(m.UpdateIntervalSec))
	}
	if m.PriceExpirationTimeoutSec != 0 {
		n += 1 + sovIcqoracle(uint64(m.PriceExpirationTimeoutSec))
	}
	return n
}

func sovIcqoracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIcqoracle(x uint64) (n int) {
	return sovIcqoracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcqoracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenomDecimals", wireType)
			}
			m.BaseDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseDenomDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenomDecimals", wireType)
			}
			m.QuoteDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteDenomDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisBaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisBaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisQuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisQuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisPoolId", wireType)
			}
			m.OsmosisPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsmosisPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisPoolType", wireType)
			}
			m.OsmosisPoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsmosisPoolType |= OsmosisPoolType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastRequestTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResponseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastResponseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryInProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryInProgress = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIcqoracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcqoracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIcqoracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIntervalSec", wireType)
			}
			m.UpdateIntervalSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateIntervalSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceExpirationTimeoutSec", wireType)
			}
			m.PriceExpirationTimeoutSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceExpirationTimeoutSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIcqoracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcqoracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIcqoracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIcqoracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcqoracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIcqoracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIcqoracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIcqoracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIcqoracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIcqoracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIcqoracle = fmt.Errorf("proto: unexpected end of group")
)
