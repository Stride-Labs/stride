// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icqoracle/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTokenPriceRequest is the request type for the Query/TokenPrice RPC
// method
type QueryTokenPriceRequest struct {
	BaseDenom  string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	PoolId     string `protobuf:"bytes,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryTokenPriceRequest) Reset()         { *m = QueryTokenPriceRequest{} }
func (m *QueryTokenPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPriceRequest) ProtoMessage()    {}
func (*QueryTokenPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{0}
}
func (m *QueryTokenPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPriceRequest.Merge(m, src)
}
func (m *QueryTokenPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPriceRequest proto.InternalMessageInfo

func (m *QueryTokenPriceRequest) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *QueryTokenPriceRequest) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

func (m *QueryTokenPriceRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

// QueryTokenPriceResponse is the response type for the Query/TokenPrice RPC
// method
type QueryTokenPriceResponse struct {
	TokenPrice TokenPriceResponse `protobuf:"bytes,1,opt,name=token_price,json=tokenPrice,proto3" json:"token_price"`
}

func (m *QueryTokenPriceResponse) Reset()         { *m = QueryTokenPriceResponse{} }
func (m *QueryTokenPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPriceResponse) ProtoMessage()    {}
func (*QueryTokenPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{1}
}
func (m *QueryTokenPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPriceResponse.Merge(m, src)
}
func (m *QueryTokenPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPriceResponse proto.InternalMessageInfo

func (m *QueryTokenPriceResponse) GetTokenPrice() TokenPriceResponse {
	if m != nil {
		return m.TokenPrice
	}
	return TokenPriceResponse{}
}

// QueryTokenPricesRequest is the request type for the Query/TokenPrices RPC
// method
type QueryTokenPricesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenPricesRequest) Reset()         { *m = QueryTokenPricesRequest{} }
func (m *QueryTokenPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPricesRequest) ProtoMessage()    {}
func (*QueryTokenPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{2}
}
func (m *QueryTokenPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPricesRequest.Merge(m, src)
}
func (m *QueryTokenPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPricesRequest proto.InternalMessageInfo

func (m *QueryTokenPricesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenPricesResponse is the response type for the Query/TokenPrices RPC
// method
type QueryTokenPricesResponse struct {
	TokenPrices []TokenPriceResponse `protobuf:"bytes,1,rep,name=token_prices,json=tokenPrices,proto3" json:"token_prices"`
	Pagination  *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenPricesResponse) Reset()         { *m = QueryTokenPricesResponse{} }
func (m *QueryTokenPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPricesResponse) ProtoMessage()    {}
func (*QueryTokenPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{3}
}
func (m *QueryTokenPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPricesResponse.Merge(m, src)
}
func (m *QueryTokenPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPricesResponse proto.InternalMessageInfo

func (m *QueryTokenPricesResponse) GetTokenPrices() []TokenPriceResponse {
	if m != nil {
		return m.TokenPrices
	}
	return nil
}

func (m *QueryTokenPricesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryTokenPriceForQuoteDenomRequest is the request type for the
// Query/TokenPriceForQuoteDenom RPC method
type QueryTokenPriceForQuoteDenomRequest struct {
	BaseDenom  string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	QuoteDenom string `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
}

func (m *QueryTokenPriceForQuoteDenomRequest) Reset()         { *m = QueryTokenPriceForQuoteDenomRequest{} }
func (m *QueryTokenPriceForQuoteDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPriceForQuoteDenomRequest) ProtoMessage()    {}
func (*QueryTokenPriceForQuoteDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{6}
}
func (m *QueryTokenPriceForQuoteDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPriceForQuoteDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPriceForQuoteDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPriceForQuoteDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPriceForQuoteDenomRequest.Merge(m, src)
}
func (m *QueryTokenPriceForQuoteDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPriceForQuoteDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPriceForQuoteDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPriceForQuoteDenomRequest proto.InternalMessageInfo

func (m *QueryTokenPriceForQuoteDenomRequest) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *QueryTokenPriceForQuoteDenomRequest) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

// QueryTokenPriceForQuoteDenomResponse is the response type for the
// Query/TokenPriceForQuoteDenom RPC method
type QueryTokenPriceForQuoteDenomResponse struct {
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
}

func (m *QueryTokenPriceForQuoteDenomResponse) Reset()         { *m = QueryTokenPriceForQuoteDenomResponse{} }
func (m *QueryTokenPriceForQuoteDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPriceForQuoteDenomResponse) ProtoMessage()    {}
func (*QueryTokenPriceForQuoteDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{7}
}
func (m *QueryTokenPriceForQuoteDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPriceForQuoteDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPriceForQuoteDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPriceForQuoteDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPriceForQuoteDenomResponse.Merge(m, src)
}
func (m *QueryTokenPriceForQuoteDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPriceForQuoteDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPriceForQuoteDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPriceForQuoteDenomResponse proto.InternalMessageInfo

// TokenPriceResponse adds human readable info on to of TokenPrice
type TokenPriceResponse struct {
	// If IBC token, base denom unwrapped (e.g. ibc/... -> uatom)
	BaseDenomUnwrapped string `protobuf:"bytes,1,opt,name=base_denom_unwrapped,json=baseDenomUnwrapped,proto3" json:"base_denom_unwrapped,omitempty"`
	// If IBC token, Quote denom unwrapped (e.g. ibc/... -> uatom)
	QuoteDenomUnwrapped string `protobuf:"bytes,2,opt,name=quote_denom_unwrapped,json=quoteDenomUnwrapped,proto3" json:"quote_denom_unwrapped,omitempty"`
	// Base denom on Stride, can be IBC denom
	BaseDenom string `protobuf:"bytes,3,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// Quote denom on Stride, can be IBC denom
	QuoteDenom string `protobuf:"bytes,4,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Decimals of base token, used for normalizing price feed from Osmosis
	BaseDenomDecimals int64 `protobuf:"varint,5,opt,name=base_denom_decimals,json=baseDenomDecimals,proto3" json:"base_denom_decimals,omitempty"`
	// Decimals of quote token, used for normalizing price feed from Osmosis
	QuoteDenomDecimals int64 `protobuf:"varint,6,opt,name=quote_denom_decimals,json=quoteDenomDecimals,proto3" json:"quote_denom_decimals,omitempty"`
	// Base denom on Osmosis
	OsmosisBaseDenom string `protobuf:"bytes,7,opt,name=osmosis_base_denom,json=osmosisBaseDenom,proto3" json:"osmosis_base_denom,omitempty"`
	// Quote denom on Osmosis
	OsmosisQuoteDenom string `protobuf:"bytes,8,opt,name=osmosis_quote_denom,json=osmosisQuoteDenom,proto3" json:"osmosis_quote_denom,omitempty"`
	// Pool ID on Osmosis
	OsmosisPoolId string `protobuf:"bytes,9,opt,name=osmosis_pool_id,json=osmosisPoolId,proto3" json:"osmosis_pool_id,omitempty"`
	// Spot price of base_denom denominated in quote_denom
	SpotPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=spot_price,json=spotPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"spot_price"`
	// Last time a query request was submitted
	LastRequestTime time.Time `protobuf:"bytes,11,opt,name=last_request_time,json=lastRequestTime,proto3,stdtime" json:"last_request_time"`
	// Last time a query response was received
	LastResponseTime time.Time `protobuf:"bytes,12,opt,name=last_response_time,json=lastResponseTime,proto3,stdtime" json:"last_response_time"`
	// Whether there is a spot price query currently in progress
	QueryInProgress bool `protobuf:"varint,13,opt,name=query_in_progress,json=queryInProgress,proto3" json:"query_in_progress,omitempty"`
}

func (m *TokenPriceResponse) Reset()         { *m = TokenPriceResponse{} }
func (m *TokenPriceResponse) String() string { return proto.CompactTextString(m) }
func (*TokenPriceResponse) ProtoMessage()    {}
func (*TokenPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2bacbcf1e1cb4, []int{8}
}
func (m *TokenPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPriceResponse.Merge(m, src)
}
func (m *TokenPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *TokenPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPriceResponse proto.InternalMessageInfo

func (m *TokenPriceResponse) GetBaseDenomUnwrapped() string {
	if m != nil {
		return m.BaseDenomUnwrapped
	}
	return ""
}

func (m *TokenPriceResponse) GetQuoteDenomUnwrapped() string {
	if m != nil {
		return m.QuoteDenomUnwrapped
	}
	return ""
}

func (m *TokenPriceResponse) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *TokenPriceResponse) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

func (m *TokenPriceResponse) GetBaseDenomDecimals() int64 {
	if m != nil {
		return m.BaseDenomDecimals
	}
	return 0
}

func (m *TokenPriceResponse) GetQuoteDenomDecimals() int64 {
	if m != nil {
		return m.QuoteDenomDecimals
	}
	return 0
}

func (m *TokenPriceResponse) GetOsmosisBaseDenom() string {
	if m != nil {
		return m.OsmosisBaseDenom
	}
	return ""
}

func (m *TokenPriceResponse) GetOsmosisQuoteDenom() string {
	if m != nil {
		return m.OsmosisQuoteDenom
	}
	return ""
}

func (m *TokenPriceResponse) GetOsmosisPoolId() string {
	if m != nil {
		return m.OsmosisPoolId
	}
	return ""
}

func (m *TokenPriceResponse) GetLastRequestTime() time.Time {
	if m != nil {
		return m.LastRequestTime
	}
	return time.Time{}
}

func (m *TokenPriceResponse) GetLastResponseTime() time.Time {
	if m != nil {
		return m.LastResponseTime
	}
	return time.Time{}
}

func (m *TokenPriceResponse) GetQueryInProgress() bool {
	if m != nil {
		return m.QueryInProgress
	}
	return false
}

func init() {
	proto.RegisterType((*QueryTokenPriceRequest)(nil), "stride.icqoracle.QueryTokenPriceRequest")
	proto.RegisterType((*QueryTokenPriceResponse)(nil), "stride.icqoracle.QueryTokenPriceResponse")
	proto.RegisterType((*QueryTokenPricesRequest)(nil), "stride.icqoracle.QueryTokenPricesRequest")
	proto.RegisterType((*QueryTokenPricesResponse)(nil), "stride.icqoracle.QueryTokenPricesResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "stride.icqoracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stride.icqoracle.QueryParamsResponse")
	proto.RegisterType((*QueryTokenPriceForQuoteDenomRequest)(nil), "stride.icqoracle.QueryTokenPriceForQuoteDenomRequest")
	proto.RegisterType((*QueryTokenPriceForQuoteDenomResponse)(nil), "stride.icqoracle.QueryTokenPriceForQuoteDenomResponse")
	proto.RegisterType((*TokenPriceResponse)(nil), "stride.icqoracle.TokenPriceResponse")
}

func init() { proto.RegisterFile("stride/icqoracle/query.proto", fileDescriptor_51a2bacbcf1e1cb4) }

var fileDescriptor_51a2bacbcf1e1cb4 = []byte{
	// 902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0xfd, 0x50, 0xac, 0xab, 0x04, 0xb6, 0xc7, 0x6e, 0xcd, 0xaa, 0x89, 0x24, 0x30, 0x8e,
	0xeb, 0x1a, 0xcd, 0xb0, 0x71, 0x90, 0x7c, 0x80, 0x60, 0xa4, 0x08, 0x1a, 0x03, 0x0a, 0x9b, 0x6e,
	0xba, 0x11, 0x46, 0xe4, 0x84, 0x21, 0x2c, 0x72, 0x28, 0xce, 0x28, 0xa9, 0xb7, 0x59, 0x74, 0x1d,
	0xa0, 0x1f, 0x52, 0xa0, 0xab, 0x2e, 0xbb, 0xcc, 0x32, 0x40, 0x37, 0x45, 0x17, 0x69, 0x61, 0xf7,
	0x43, 0x8a, 0x79, 0xf0, 0xa1, 0xd0, 0xae, 0x6c, 0x20, 0x2b, 0x4b, 0xf7, 0x79, 0xce, 0xbd, 0x77,
	0x8e, 0x0c, 0x37, 0xb9, 0xc8, 0xa2, 0x80, 0xba, 0x91, 0x3f, 0x61, 0x19, 0xf1, 0xc7, 0xd4, 0x9d,
	0x4c, 0x69, 0x76, 0x82, 0xd3, 0x8c, 0x09, 0x86, 0xd6, 0xb5, 0x17, 0x17, 0xde, 0xf6, 0xbe, 0xcf,
	0x78, 0xcc, 0xb8, 0x3b, 0x22, 0xdc, 0x84, 0xba, 0x2f, 0xef, 0x8d, 0xa8, 0x20, 0xf7, 0xdc, 0x94,
	0x84, 0x51, 0x42, 0x44, 0xc4, 0x12, 0x9d, 0xdd, 0xde, 0x0a, 0x59, 0xc8, 0xd4, 0x47, 0x57, 0x7e,
	0x32, 0xd6, 0x9b, 0x21, 0x63, 0xe1, 0x98, 0xba, 0x24, 0x8d, 0x5c, 0x92, 0x24, 0x4c, 0xa8, 0x14,
	0x6e, 0xbc, 0x5d, 0xe3, 0x55, 0xdf, 0x46, 0xd3, 0xe7, 0xae, 0x88, 0x62, 0xca, 0x05, 0x89, 0x53,
	0x13, 0xd0, 0xab, 0x01, 0x2e, 0x3e, 0xe9, 0x08, 0x67, 0x02, 0x9f, 0x3e, 0x95, 0xc0, 0x9e, 0xb1,
	0x63, 0x9a, 0x0c, 0xb2, 0xc8, 0xa7, 0x1e, 0x9d, 0x4c, 0x29, 0x17, 0xe8, 0x16, 0x80, 0xc4, 0x3d,
	0x0c, 0x68, 0xc2, 0x62, 0xdb, 0xea, 0x59, 0x7b, 0x4d, 0xaf, 0x29, 0x2d, 0x87, 0xd2, 0x80, 0xba,
	0xd0, 0x9a, 0x4c, 0x99, 0xc8, 0xfd, 0x8b, 0xca, 0x0f, 0xca, 0xa4, 0x03, 0xb6, 0xe1, 0x5a, 0xca,
	0xd8, 0x78, 0x18, 0x05, 0xf6, 0x92, 0x72, 0x36, 0xe4, 0xd7, 0xc7, 0x81, 0xf3, 0x1c, 0xb6, 0x6b,
	0x2d, 0x79, 0xca, 0x12, 0x4e, 0xd1, 0xb7, 0xd0, 0x12, 0xd2, 0x3a, 0x4c, 0xa5, 0x59, 0x35, 0x6d,
	0x1d, 0xec, 0xe0, 0x0f, 0x07, 0x8b, 0xeb, 0xa9, 0xfd, 0xe5, 0xb7, 0xef, 0xbb, 0x0b, 0x1e, 0x88,
	0xc2, 0xe3, 0x90, 0x5a, 0x1f, 0x9e, 0x73, 0x7b, 0x04, 0x50, 0x2e, 0xc0, 0xb4, 0xd9, 0xc5, 0x7a,
	0x5b, 0x58, 0x72, 0xc4, 0x7a, 0xb1, 0x66, 0x5b, 0x78, 0x40, 0xc2, 0x7c, 0x2e, 0x5e, 0x25, 0xd3,
	0xf9, 0xd5, 0x02, 0xbb, 0xde, 0xc3, 0x90, 0x39, 0x82, 0xeb, 0x15, 0x32, 0xdc, 0xb6, 0x7a, 0x4b,
	0x57, 0x64, 0xd3, 0x2a, 0xd9, 0x70, 0xf4, 0xcd, 0x0c, 0xe6, 0x45, 0x85, 0xf9, 0x8b, 0xb9, 0x98,
	0x75, 0xbd, 0x19, 0xd0, 0x5b, 0x80, 0x14, 0xe6, 0x01, 0xc9, 0x48, 0x9c, 0x8f, 0xc4, 0x39, 0x82,
	0xcd, 0x19, 0xab, 0x21, 0xf1, 0x10, 0x1a, 0xa9, 0xb2, 0x98, 0x29, 0xd9, 0x75, 0xf8, 0x3a, 0xc3,
	0x40, 0x36, 0xd1, 0x0e, 0x85, 0xdb, 0x1f, 0x0c, 0xe6, 0x11, 0xcb, 0x9e, 0x16, 0xd7, 0xf1, 0x91,
	0x8e, 0xcc, 0x19, 0xc3, 0xce, 0xff, 0xb7, 0x31, 0x34, 0x0e, 0x61, 0xa5, 0x3c, 0xa9, 0x66, 0x1f,
	0x4b, 0xac, 0x7f, 0xbd, 0xef, 0xee, 0x86, 0x91, 0x78, 0x31, 0x1d, 0x61, 0x9f, 0xc5, 0xae, 0x79,
	0xab, 0xfa, 0xcf, 0x5d, 0x1e, 0x1c, 0xbb, 0xe2, 0x24, 0xa5, 0x1c, 0x1f, 0x52, 0xdf, 0xd3, 0xc9,
	0xce, 0x6f, 0x2b, 0x80, 0xce, 0xb9, 0xda, 0xaf, 0x61, 0xab, 0x24, 0x31, 0x9c, 0x26, 0xaf, 0x32,
	0x92, 0xa6, 0x34, 0x30, 0x74, 0x50, 0x41, 0xe7, 0xfb, 0xdc, 0x83, 0x0e, 0xe0, 0x93, 0x0a, 0xaf,
	0x4a, 0x8a, 0x66, 0xb8, 0x59, 0x32, 0x2c, 0x73, 0x66, 0x47, 0xb5, 0x34, 0x67, 0x54, 0xcb, 0xb5,
	0xf7, 0x88, 0x61, 0xb3, 0x82, 0x32, 0xa0, 0x7e, 0x14, 0x93, 0x31, 0xb7, 0x57, 0x7a, 0xd6, 0xde,
	0x92, 0xb7, 0x51, 0x14, 0x3a, 0x34, 0x0e, 0xc9, 0xaa, 0x8a, 0xb1, 0x48, 0x68, 0xa8, 0x04, 0x54,
	0x56, 0x2e, 0x32, 0xbe, 0x02, 0xa4, 0x86, 0x17, 0xf1, 0x61, 0x05, 0xe9, 0x35, 0x85, 0x64, 0xdd,
	0x78, 0xfa, 0x05, 0x60, 0x0c, 0x9b, 0x79, 0x74, 0x15, 0xf8, 0xaa, 0x0a, 0xdf, 0x30, 0xae, 0x72,
	0x95, 0x68, 0x17, 0xd6, 0xf2, 0xf8, 0x5c, 0x57, 0x9a, 0x2a, 0xf6, 0x86, 0x31, 0x0f, 0x94, 0xbc,
	0xa0, 0x3e, 0x00, 0x4f, 0x99, 0x30, 0x12, 0x02, 0x6a, 0xdf, 0xb7, 0xcd, 0xbe, 0x3f, 0xd7, 0xdb,
	0xe5, 0xc1, 0x31, 0x8e, 0x98, 0x1b, 0x13, 0xf1, 0x02, 0x3f, 0xa1, 0x21, 0xf1, 0x4f, 0xe4, 0x92,
	0x9b, 0x32, 0x4d, 0x6d, 0x16, 0x0d, 0x60, 0x63, 0x4c, 0xb8, 0x18, 0x66, 0xfa, 0x4c, 0x87, 0x52,
	0x57, 0xed, 0x96, 0x7a, 0x00, 0x6d, 0xac, 0x45, 0x17, 0xe7, 0xa2, 0x8b, 0x9f, 0xe5, 0xa2, 0xdb,
	0x5f, 0x95, 0x6d, 0xde, 0xfc, 0xdd, 0xb5, 0xbc, 0x35, 0x99, 0x6e, 0x8e, 0x5c, 0xfa, 0x91, 0x07,
	0xc8, 0x54, 0xd4, 0x47, 0xa3, 0x4b, 0x5e, 0xbf, 0x42, 0xc9, 0x75, 0x5d, 0x52, 0xa7, 0xab, 0x9a,
	0xfb, 0xb0, 0xa1, 0x9e, 0xfc, 0x30, 0x92, 0x1a, 0xc3, 0xc2, 0x8c, 0x72, 0x6e, 0xdf, 0xe8, 0x59,
	0x7b, 0xab, 0xde, 0x9a, 0x72, 0x3c, 0x4e, 0x06, 0xc6, 0x7c, 0xf0, 0xfb, 0x32, 0xac, 0xa8, 0x97,
	0x82, 0x5e, 0x5b, 0x00, 0xe5, 0x11, 0xa3, 0xbd, 0xfa, 0x83, 0x3e, 0xff, 0x07, 0xa1, 0xfd, 0xe5,
	0x25, 0x22, 0x35, 0x3a, 0xa7, 0xfb, 0xfa, 0x8f, 0x7f, 0x7f, 0x5e, 0xfc, 0x0c, 0x6d, 0xbb, 0xb5,
	0x1f, 0x20, 0xb5, 0x16, 0xf4, 0x93, 0x05, 0xad, 0x8a, 0x66, 0xa2, 0xf9, 0xb5, 0x73, 0xa1, 0x6a,
	0xef, 0x5f, 0x26, 0xd4, 0xe0, 0xe8, 0x29, 0x1c, 0x6d, 0x64, 0x5f, 0x80, 0x83, 0xa3, 0x57, 0xd0,
	0xd0, 0xfa, 0x85, 0x76, 0x2e, 0xa8, 0x3b, 0x23, 0x93, 0xed, 0x3b, 0x73, 0xa2, 0x2e, 0xd1, 0x58,
	0xb7, 0xfb, 0xc5, 0x82, 0xed, 0x0b, 0x54, 0x0b, 0x3d, 0x98, 0x4b, 0xf1, 0x3c, 0x31, 0x6d, 0x3f,
	0xbc, 0x6a, 0x9a, 0x01, 0x7b, 0x47, 0x81, 0xed, 0xa2, 0x5b, 0xee, 0x39, 0xff, 0xdf, 0xc8, 0x97,
	0xa9, 0x66, 0xd5, 0x3f, 0x7a, 0x7b, 0xda, 0xb1, 0xde, 0x9d, 0x76, 0xac, 0x7f, 0x4e, 0x3b, 0xd6,
	0x9b, 0xb3, 0xce, 0xc2, 0xbb, 0xb3, 0xce, 0xc2, 0x9f, 0x67, 0x9d, 0x85, 0x1f, 0xee, 0x57, 0x64,
	0xf4, 0x3b, 0x55, 0xe2, 0xee, 0x13, 0x32, 0xe2, 0x79, 0xb9, 0x97, 0x07, 0x0f, 0xdc, 0x1f, 0x2b,
	0x45, 0x95, 0xae, 0x8e, 0x1a, 0xea, 0xda, 0xef, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x57, 0xeb,
	0xa3, 0x7d, 0x55, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TokenPrice queries the current price for a specific token
	TokenPrice(ctx context.Context, in *QueryTokenPriceRequest, opts ...grpc.CallOption) (*QueryTokenPriceResponse, error)
	// TokenPrices queries all token prices
	TokenPrices(ctx context.Context, in *QueryTokenPricesRequest, opts ...grpc.CallOption) (*QueryTokenPricesResponse, error)
	// Params queries the oracle parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TokenPriceForQuoteDenom queries the exchange rate between two tokens
	TokenPriceForQuoteDenom(ctx context.Context, in *QueryTokenPriceForQuoteDenomRequest, opts ...grpc.CallOption) (*QueryTokenPriceForQuoteDenomResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TokenPrice(ctx context.Context, in *QueryTokenPriceRequest, opts ...grpc.CallOption) (*QueryTokenPriceResponse, error) {
	out := new(QueryTokenPriceResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Query/TokenPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPrices(ctx context.Context, in *QueryTokenPricesRequest, opts ...grpc.CallOption) (*QueryTokenPricesResponse, error) {
	out := new(QueryTokenPricesResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Query/TokenPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPriceForQuoteDenom(ctx context.Context, in *QueryTokenPriceForQuoteDenomRequest, opts ...grpc.CallOption) (*QueryTokenPriceForQuoteDenomResponse, error) {
	out := new(QueryTokenPriceForQuoteDenomResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Query/TokenPriceForQuoteDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TokenPrice queries the current price for a specific token
	TokenPrice(context.Context, *QueryTokenPriceRequest) (*QueryTokenPriceResponse, error)
	// TokenPrices queries all token prices
	TokenPrices(context.Context, *QueryTokenPricesRequest) (*QueryTokenPricesResponse, error)
	// Params queries the oracle parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TokenPriceForQuoteDenom queries the exchange rate between two tokens
	TokenPriceForQuoteDenom(context.Context, *QueryTokenPriceForQuoteDenomRequest) (*QueryTokenPriceForQuoteDenomResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TokenPrice(ctx context.Context, req *QueryTokenPriceRequest) (*QueryTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPrice not implemented")
}
func (*UnimplementedQueryServer) TokenPrices(ctx context.Context, req *QueryTokenPricesRequest) (*QueryTokenPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPrices not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TokenPriceForQuoteDenom(ctx context.Context, req *QueryTokenPriceForQuoteDenomRequest) (*QueryTokenPriceForQuoteDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPriceForQuoteDenom not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Query/TokenPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPrice(ctx, req.(*QueryTokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Query/TokenPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPrices(ctx, req.(*QueryTokenPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPriceForQuoteDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPriceForQuoteDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPriceForQuoteDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Query/TokenPriceForQuoteDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPriceForQuoteDenom(ctx, req.(*QueryTokenPriceForQuoteDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.icqoracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenPrice",
			Handler:    _Query_TokenPrice_Handler,
		},
		{
			MethodName: "TokenPrices",
			Handler:    _Query_TokenPrices_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TokenPriceForQuoteDenom",
			Handler:    _Query_TokenPriceForQuoteDenom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/icqoracle/query.proto",
}

func (m *QueryTokenPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenPrices) > 0 {
		for iNdEx := len(m.TokenPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenPriceForQuoteDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPriceForQuoteDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPriceForQuoteDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPriceForQuoteDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPriceForQuoteDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPriceForQuoteDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TokenPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryInProgress {
		i--
		if m.QueryInProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastResponseTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastResponseTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintQuery(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x62
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastRequestTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRequestTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintQuery(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x5a
	{
		size := m.SpotPrice.Size()
		i -= size
		if _, err := m.SpotPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.OsmosisPoolId) > 0 {
		i -= len(m.OsmosisPoolId)
		copy(dAtA[i:], m.OsmosisPoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OsmosisPoolId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OsmosisQuoteDenom) > 0 {
		i -= len(m.OsmosisQuoteDenom)
		copy(dAtA[i:], m.OsmosisQuoteDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OsmosisQuoteDenom)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OsmosisBaseDenom) > 0 {
		i -= len(m.OsmosisBaseDenom)
		copy(dAtA[i:], m.OsmosisBaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OsmosisBaseDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if m.QuoteDenomDecimals != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QuoteDenomDecimals))
		i--
		dAtA[i] = 0x30
	}
	if m.BaseDenomDecimals != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BaseDenomDecimals))
		i--
		dAtA[i] = 0x28
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuoteDenomUnwrapped) > 0 {
		i -= len(m.QuoteDenomUnwrapped)
		copy(dAtA[i:], m.QuoteDenomUnwrapped)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteDenomUnwrapped)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenomUnwrapped) > 0 {
		i -= len(m.BaseDenomUnwrapped)
		copy(dAtA[i:], m.BaseDenomUnwrapped)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenomUnwrapped)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTokenPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenPrices) > 0 {
		for _, e := range m.TokenPrices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenPriceForQuoteDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPriceForQuoteDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *TokenPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenomUnwrapped)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteDenomUnwrapped)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BaseDenomDecimals != 0 {
		n += 1 + sovQuery(uint64(m.BaseDenomDecimals))
	}
	if m.QuoteDenomDecimals != 0 {
		n += 1 + sovQuery(uint64(m.QuoteDenomDecimals))
	}
	l = len(m.OsmosisBaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OsmosisQuoteDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OsmosisPoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.SpotPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRequestTime)
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastResponseTime)
	n += 1 + l + sovQuery(uint64(l))
	if m.QueryInProgress {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTokenPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPrices = append(m.TokenPrices, TokenPriceResponse{})
			if err := m.TokenPrices[len(m.TokenPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPriceForQuoteDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPriceForQuoteDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPriceForQuoteDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPriceForQuoteDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPriceForQuoteDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPriceForQuoteDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenomUnwrapped", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenomUnwrapped = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenomUnwrapped", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenomUnwrapped = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenomDecimals", wireType)
			}
			m.BaseDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseDenomDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenomDecimals", wireType)
			}
			m.QuoteDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteDenomDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisBaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisBaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisQuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisQuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisPoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisPoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastRequestTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResponseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastResponseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryInProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryInProgress = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
