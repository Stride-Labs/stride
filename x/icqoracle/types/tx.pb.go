// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icqoracle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams defines the message for updating module parameters
type MsgUpdateParams struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// How often to fetch the price
	UpdateIntervalSec uint64 `protobuf:"varint,2,opt,name=update_interval_sec,json=updateIntervalSec,proto3" json:"update_interval_sec,omitempty"`
	// When price is considered stale
	TimeoutSec uint64 `protobuf:"varint,3,opt,name=timeout_sec,json=timeoutSec,proto3" json:"timeout_sec,omitempty"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateParams) GetUpdateIntervalSec() uint64 {
	if m != nil {
		return m.UpdateIntervalSec
	}
	return 0
}

func (m *MsgUpdateParams) GetTimeoutSec() uint64 {
	if m != nil {
		return m.TimeoutSec
	}
	return 0
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgAddTokenPrice defines the message for adding a new token to track prices
type MsgAddTokenPrice struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgAddTokenPrice) Reset()         { *m = MsgAddTokenPrice{} }
func (m *MsgAddTokenPrice) String() string { return proto.CompactTextString(m) }
func (*MsgAddTokenPrice) ProtoMessage()    {}
func (*MsgAddTokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{2}
}
func (m *MsgAddTokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTokenPrice.Merge(m, src)
}
func (m *MsgAddTokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTokenPrice proto.InternalMessageInfo

func (m *MsgAddTokenPrice) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddTokenPrice) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgAddTokenPriceResponse struct {
}

func (m *MsgAddTokenPriceResponse) Reset()         { *m = MsgAddTokenPriceResponse{} }
func (m *MsgAddTokenPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddTokenPriceResponse) ProtoMessage()    {}
func (*MsgAddTokenPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{3}
}
func (m *MsgAddTokenPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTokenPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTokenPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTokenPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTokenPriceResponse.Merge(m, src)
}
func (m *MsgAddTokenPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTokenPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTokenPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTokenPriceResponse proto.InternalMessageInfo

// MsgRemoveTokenPrice defines the message for removing a token from price
// tracking
type MsgRemoveTokenPrice struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgRemoveTokenPrice) Reset()         { *m = MsgRemoveTokenPrice{} }
func (m *MsgRemoveTokenPrice) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTokenPrice) ProtoMessage()    {}
func (*MsgRemoveTokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{4}
}
func (m *MsgRemoveTokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTokenPrice.Merge(m, src)
}
func (m *MsgRemoveTokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTokenPrice proto.InternalMessageInfo

func (m *MsgRemoveTokenPrice) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRemoveTokenPrice) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgRemoveTokenPriceResponse struct {
}

func (m *MsgRemoveTokenPriceResponse) Reset()         { *m = MsgRemoveTokenPriceResponse{} }
func (m *MsgRemoveTokenPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTokenPriceResponse) ProtoMessage()    {}
func (*MsgRemoveTokenPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{5}
}
func (m *MsgRemoveTokenPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTokenPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTokenPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTokenPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTokenPriceResponse.Merge(m, src)
}
func (m *MsgRemoveTokenPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTokenPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTokenPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTokenPriceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "stride.icqoracle.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "stride.icqoracle.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgAddTokenPrice)(nil), "stride.icqoracle.MsgAddTokenPrice")
	proto.RegisterType((*MsgAddTokenPriceResponse)(nil), "stride.icqoracle.MsgAddTokenPriceResponse")
	proto.RegisterType((*MsgRemoveTokenPrice)(nil), "stride.icqoracle.MsgRemoveTokenPrice")
	proto.RegisterType((*MsgRemoveTokenPriceResponse)(nil), "stride.icqoracle.MsgRemoveTokenPriceResponse")
}

func init() { proto.RegisterFile("stride/icqoracle/tx.proto", fileDescriptor_be640eb75c1babd5) }

var fileDescriptor_be640eb75c1babd5 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x41, 0x8b, 0xd3, 0x50,
	0x10, 0xc7, 0xfb, 0x76, 0xdd, 0x85, 0x8e, 0x8a, 0xdd, 0xec, 0xc2, 0xb6, 0x11, 0xe3, 0x1a, 0x51,
	0xd6, 0x42, 0x13, 0xdd, 0xaa, 0x87, 0xbd, 0xed, 0xde, 0x04, 0x03, 0x4b, 0xaa, 0x17, 0x11, 0x4a,
	0x9a, 0x0c, 0xe9, 0xc3, 0x4d, 0x5e, 0x7d, 0xf3, 0x5a, 0x76, 0x6f, 0xe2, 0xd1, 0x8b, 0x5e, 0xfc,
	0x1e, 0x3d, 0xe8, 0x77, 0x10, 0xbc, 0x2c, 0x9e, 0x3c, 0x4a, 0x7b, 0xe8, 0xd7, 0x90, 0x26, 0x69,
	0x31, 0x31, 0x50, 0x11, 0xf6, 0xd2, 0x32, 0x33, 0xbf, 0x79, 0xff, 0xff, 0x9b, 0x79, 0x81, 0x06,
	0x29, 0xc9, 0x03, 0xb4, 0xb9, 0xff, 0x56, 0x48, 0xcf, 0x3f, 0x45, 0x5b, 0x9d, 0x59, 0x03, 0x29,
	0x94, 0xd0, 0x6a, 0x69, 0xc9, 0x5a, 0x96, 0xf4, 0x5d, 0x5f, 0x50, 0x24, 0xc8, 0x8e, 0x28, 0xb4,
	0x47, 0x8f, 0xe6, 0x7f, 0x29, 0xaa, 0x6f, 0x79, 0x11, 0x8f, 0x85, 0x9d, 0xfc, 0x66, 0xa9, 0x46,
	0xca, 0x76, 0x93, 0xc8, 0x4e, 0x83, 0xb4, 0x64, 0x7e, 0x67, 0x70, 0xc3, 0xa1, 0xf0, 0xe5, 0x20,
	0xf0, 0x14, 0x9e, 0x78, 0xd2, 0x8b, 0x48, 0x7b, 0x08, 0x9b, 0x84, 0x71, 0x80, 0xb2, 0xce, 0xf6,
	0xd8, 0x7e, 0xf5, 0xb8, 0xfe, 0xe3, 0x4b, 0x6b, 0x27, 0xeb, 0x3a, 0x0a, 0x02, 0x89, 0x44, 0x1d,
	0x25, 0x79, 0x1c, 0xba, 0x19, 0xa7, 0x59, 0xb0, 0x3d, 0x4c, 0x4e, 0xe8, 0xf2, 0x58, 0xa1, 0x1c,
	0x79, 0xa7, 0x5d, 0x42, 0xbf, 0xbe, 0xb6, 0xc7, 0xf6, 0xaf, 0xb8, 0x5b, 0x69, 0xe9, 0x59, 0x56,
	0xe9, 0xa0, 0xaf, 0xdd, 0x86, 0xab, 0x8a, 0x47, 0x28, 0x86, 0x2a, 0xe1, 0xd6, 0x13, 0x0e, 0xb2,
	0x54, 0x07, 0xfd, 0xc3, 0x27, 0xef, 0x67, 0xe3, 0x66, 0xd5, 0x1b, 0xaa, 0xbe, 0x90, 0x5c, 0x9d,
	0x7f, 0x98, 0x8d, 0x9b, 0x66, 0x36, 0x9d, 0xb3, 0x3f, 0xe6, 0x53, 0x70, 0x6e, 0x36, 0x60, 0xb7,
	0x90, 0x72, 0x91, 0x06, 0x22, 0x26, 0x34, 0x3f, 0x32, 0xa8, 0x39, 0x14, 0x1e, 0x05, 0xc1, 0x0b,
	0xf1, 0x06, 0xe3, 0x13, 0xc9, 0x7d, 0xfc, 0x8f, 0x9b, 0xee, 0xc0, 0x46, 0x80, 0xb1, 0x88, 0x92,
	0xbb, 0x55, 0xdd, 0x34, 0x38, 0x6c, 0xcf, 0xed, 0x66, 0xc8, 0xdc, 0xeb, 0xdd, 0x72, 0xaf, 0x39,
	0x71, 0x53, 0x87, 0x7a, 0x31, 0xb7, 0x74, 0xfb, 0x99, 0xc1, 0xb6, 0x43, 0xa1, 0x8b, 0x91, 0x18,
	0xe1, 0x25, 0x18, 0x7e, 0x5a, 0x30, 0x7c, 0xbf, 0xdc, 0x70, 0x51, 0xdf, 0xbc, 0x05, 0x37, 0x4b,
	0xd2, 0x0b, 0xdb, 0x07, 0x5f, 0xd7, 0x60, 0xdd, 0xa1, 0x50, 0x7b, 0x0d, 0xd7, 0x72, 0x2f, 0xea,
	0x8e, 0x55, 0x7c, 0xbf, 0x56, 0x61, 0x4f, 0xfa, 0x83, 0x95, 0xc8, 0x42, 0x45, 0xeb, 0xc2, 0xf5,
	0xfc, 0x1a, 0xcd, 0xd2, 0xde, 0x1c, 0xa3, 0x37, 0x57, 0x33, 0x4b, 0x81, 0x3e, 0xd4, 0xfe, 0x9a,
	0xfc, 0xbd, 0xd2, 0xfe, 0x22, 0xa6, 0xb7, 0xfe, 0x09, 0x5b, 0x28, 0xe9, 0x1b, 0xef, 0x66, 0xe3,
	0x26, 0x3b, 0x76, 0xbe, 0x4d, 0x0c, 0x76, 0x31, 0x31, 0xd8, 0xaf, 0x89, 0xc1, 0x3e, 0x4d, 0x8d,
	0xca, 0xc5, 0xd4, 0xa8, 0xfc, 0x9c, 0x1a, 0x95, 0x57, 0xed, 0x90, 0xab, 0xfe, 0xb0, 0x67, 0xf9,
	0x22, 0xb2, 0x3b, 0xc9, 0xc9, 0xad, 0xe7, 0x5e, 0x8f, 0xec, 0x6c, 0x5f, 0xa3, 0x83, 0xc7, 0xb9,
	0x9d, 0xa9, 0xf3, 0x01, 0x52, 0x6f, 0x33, 0xf9, 0xb6, 0xdb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xc0, 0x38, 0xbd, 0xc7, 0x51, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams allows the admin to update the module parameters
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// AddTokenPrice adds a new token to track prices for
	AddTokenPrice(ctx context.Context, in *MsgAddTokenPrice, opts ...grpc.CallOption) (*MsgAddTokenPriceResponse, error)
	// RemoveTokenPrice removes a token from price tracking
	RemoveTokenPrice(ctx context.Context, in *MsgRemoveTokenPrice, opts ...grpc.CallOption) (*MsgRemoveTokenPriceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddTokenPrice(ctx context.Context, in *MsgAddTokenPrice, opts ...grpc.CallOption) (*MsgAddTokenPriceResponse, error) {
	out := new(MsgAddTokenPriceResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Msg/AddTokenPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveTokenPrice(ctx context.Context, in *MsgRemoveTokenPrice, opts ...grpc.CallOption) (*MsgRemoveTokenPriceResponse, error) {
	out := new(MsgRemoveTokenPriceResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Msg/RemoveTokenPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams allows the admin to update the module parameters
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// AddTokenPrice adds a new token to track prices for
	AddTokenPrice(context.Context, *MsgAddTokenPrice) (*MsgAddTokenPriceResponse, error)
	// RemoveTokenPrice removes a token from price tracking
	RemoveTokenPrice(context.Context, *MsgRemoveTokenPrice) (*MsgRemoveTokenPriceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) AddTokenPrice(ctx context.Context, req *MsgAddTokenPrice) (*MsgAddTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTokenPrice not implemented")
}
func (*UnimplementedMsgServer) RemoveTokenPrice(ctx context.Context, req *MsgRemoveTokenPrice) (*MsgRemoveTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTokenPrice not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddTokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddTokenPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddTokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Msg/AddTokenPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddTokenPrice(ctx, req.(*MsgAddTokenPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveTokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveTokenPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveTokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Msg/RemoveTokenPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveTokenPrice(ctx, req.(*MsgRemoveTokenPrice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.icqoracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddTokenPrice",
			Handler:    _Msg_AddTokenPrice_Handler,
		},
		{
			MethodName: "RemoveTokenPrice",
			Handler:    _Msg_RemoveTokenPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/icqoracle/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutSec != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutSec))
		i--
		dAtA[i] = 0x18
	}
	if m.UpdateIntervalSec != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UpdateIntervalSec))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddTokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddTokenPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTokenPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTokenPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTokenPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTokenPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTokenPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateIntervalSec != 0 {
		n += 1 + sovTx(uint64(m.UpdateIntervalSec))
	}
	if m.TimeoutSec != 0 {
		n += 1 + sovTx(uint64(m.TimeoutSec))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddTokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddTokenPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveTokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveTokenPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIntervalSec", wireType)
			}
			m.UpdateIntervalSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateIntervalSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSec", wireType)
			}
			m.TimeoutSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTokenPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTokenPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTokenPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTokenPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTokenPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTokenPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
