// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icqoracle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterTokenPriceQuery defines the message for adding a new token to
// track prices
type MsgRegisterTokenPriceQuery struct {
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Token denom on Stride
	BaseDenom string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// Quote denom on Stride
	QuoteDenom string `protobuf:"bytes,3,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Decimals of base token, used for normalizing price feed from Osmosis
	BaseDenomDecimals int64 `protobuf:"varint,4,opt,name=base_denom_decimals,json=baseDenomDecimals,proto3" json:"base_denom_decimals,omitempty"`
	// Decimals of quote token, used for normalizing price feed from Osmosis
	QuoteDenomDecimals int64 `protobuf:"varint,5,opt,name=quote_denom_decimals,json=quoteDenomDecimals,proto3" json:"quote_denom_decimals,omitempty"`
	// Token denom on Osmosis
	OsmosisBaseDenom string `protobuf:"bytes,6,opt,name=osmosis_base_denom,json=osmosisBaseDenom,proto3" json:"osmosis_base_denom,omitempty"`
	// Quote denom on Osmosis
	OsmosisQuoteDenom string `protobuf:"bytes,7,opt,name=osmosis_quote_denom,json=osmosisQuoteDenom,proto3" json:"osmosis_quote_denom,omitempty"`
	// Pool ID on Osmosis
	OsmosisPoolId string `protobuf:"bytes,8,opt,name=osmosis_pool_id,json=osmosisPoolId,proto3" json:"osmosis_pool_id,omitempty"`
}

func (m *MsgRegisterTokenPriceQuery) Reset()         { *m = MsgRegisterTokenPriceQuery{} }
func (m *MsgRegisterTokenPriceQuery) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTokenPriceQuery) ProtoMessage()    {}
func (*MsgRegisterTokenPriceQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{0}
}
func (m *MsgRegisterTokenPriceQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTokenPriceQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTokenPriceQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTokenPriceQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTokenPriceQuery.Merge(m, src)
}
func (m *MsgRegisterTokenPriceQuery) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTokenPriceQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTokenPriceQuery.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTokenPriceQuery proto.InternalMessageInfo

func (m *MsgRegisterTokenPriceQuery) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgRegisterTokenPriceQuery) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *MsgRegisterTokenPriceQuery) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

func (m *MsgRegisterTokenPriceQuery) GetBaseDenomDecimals() int64 {
	if m != nil {
		return m.BaseDenomDecimals
	}
	return 0
}

func (m *MsgRegisterTokenPriceQuery) GetQuoteDenomDecimals() int64 {
	if m != nil {
		return m.QuoteDenomDecimals
	}
	return 0
}

func (m *MsgRegisterTokenPriceQuery) GetOsmosisBaseDenom() string {
	if m != nil {
		return m.OsmosisBaseDenom
	}
	return ""
}

func (m *MsgRegisterTokenPriceQuery) GetOsmosisQuoteDenom() string {
	if m != nil {
		return m.OsmosisQuoteDenom
	}
	return ""
}

func (m *MsgRegisterTokenPriceQuery) GetOsmosisPoolId() string {
	if m != nil {
		return m.OsmosisPoolId
	}
	return ""
}

type MsgRegisterTokenPriceQueryResponse struct {
}

func (m *MsgRegisterTokenPriceQueryResponse) Reset()         { *m = MsgRegisterTokenPriceQueryResponse{} }
func (m *MsgRegisterTokenPriceQueryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTokenPriceQueryResponse) ProtoMessage()    {}
func (*MsgRegisterTokenPriceQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{1}
}
func (m *MsgRegisterTokenPriceQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTokenPriceQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTokenPriceQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTokenPriceQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTokenPriceQueryResponse.Merge(m, src)
}
func (m *MsgRegisterTokenPriceQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTokenPriceQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTokenPriceQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTokenPriceQueryResponse proto.InternalMessageInfo

// MsgRemoveTokenPriceQuery defines the message for removing a token from price
// tracking
type MsgRemoveTokenPriceQuery struct {
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Token denom on Stride
	BaseDenom string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// Quote denom on Stride
	QuoteDenom string `protobuf:"bytes,3,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Pool ID on Osmosis
	OsmosisPoolId string `protobuf:"bytes,4,opt,name=osmosis_pool_id,json=osmosisPoolId,proto3" json:"osmosis_pool_id,omitempty"`
}

func (m *MsgRemoveTokenPriceQuery) Reset()         { *m = MsgRemoveTokenPriceQuery{} }
func (m *MsgRemoveTokenPriceQuery) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTokenPriceQuery) ProtoMessage()    {}
func (*MsgRemoveTokenPriceQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{2}
}
func (m *MsgRemoveTokenPriceQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTokenPriceQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTokenPriceQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTokenPriceQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTokenPriceQuery.Merge(m, src)
}
func (m *MsgRemoveTokenPriceQuery) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTokenPriceQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTokenPriceQuery.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTokenPriceQuery proto.InternalMessageInfo

func (m *MsgRemoveTokenPriceQuery) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgRemoveTokenPriceQuery) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *MsgRemoveTokenPriceQuery) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

func (m *MsgRemoveTokenPriceQuery) GetOsmosisPoolId() string {
	if m != nil {
		return m.OsmosisPoolId
	}
	return ""
}

type MsgRemoveTokenPriceQueryResponse struct {
}

func (m *MsgRemoveTokenPriceQueryResponse) Reset()         { *m = MsgRemoveTokenPriceQueryResponse{} }
func (m *MsgRemoveTokenPriceQueryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveTokenPriceQueryResponse) ProtoMessage()    {}
func (*MsgRemoveTokenPriceQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be640eb75c1babd5, []int{3}
}
func (m *MsgRemoveTokenPriceQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveTokenPriceQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveTokenPriceQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveTokenPriceQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveTokenPriceQueryResponse.Merge(m, src)
}
func (m *MsgRemoveTokenPriceQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveTokenPriceQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveTokenPriceQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveTokenPriceQueryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterTokenPriceQuery)(nil), "stride.icqoracle.MsgRegisterTokenPriceQuery")
	proto.RegisterType((*MsgRegisterTokenPriceQueryResponse)(nil), "stride.icqoracle.MsgRegisterTokenPriceQueryResponse")
	proto.RegisterType((*MsgRemoveTokenPriceQuery)(nil), "stride.icqoracle.MsgRemoveTokenPriceQuery")
	proto.RegisterType((*MsgRemoveTokenPriceQueryResponse)(nil), "stride.icqoracle.MsgRemoveTokenPriceQueryResponse")
}

func init() { proto.RegisterFile("stride/icqoracle/tx.proto", fileDescriptor_be640eb75c1babd5) }

var fileDescriptor_be640eb75c1babd5 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xb1, 0x6e, 0xd3, 0x50,
	0x14, 0x8d, 0x9b, 0xa6, 0xd0, 0x8b, 0x10, 0xcd, 0x6b, 0x51, 0x5d, 0x4b, 0x98, 0xc8, 0xaa, 0x50,
	0x15, 0xb5, 0x7e, 0x34, 0x81, 0x85, 0x8d, 0xa8, 0x0b, 0x12, 0x91, 0x5a, 0x97, 0x89, 0xc5, 0x72,
	0xec, 0x27, 0xf3, 0x44, 0xec, 0x97, 0xfa, 0x3a, 0xa1, 0x1d, 0x90, 0x10, 0x62, 0x62, 0xe2, 0x37,
	0xd8, 0x32, 0xf0, 0x11, 0x8c, 0x15, 0x13, 0x23, 0x4a, 0x84, 0xf2, 0x1b, 0x28, 0xcf, 0x76, 0x1c,
	0x22, 0x5b, 0x82, 0xa9, 0x8b, 0xad, 0x77, 0xcf, 0xb9, 0xc7, 0xc7, 0xe7, 0xda, 0x17, 0xf6, 0x30,
	0x8e, 0xb8, 0xc7, 0x28, 0x77, 0x2f, 0x44, 0xe4, 0xb8, 0x7d, 0x46, 0xe3, 0x4b, 0x73, 0x10, 0x89,
	0x58, 0x90, 0xad, 0x04, 0x32, 0x17, 0x90, 0x56, 0x77, 0x02, 0x1e, 0x0a, 0x2a, 0xaf, 0x09, 0x49,
	0xdb, 0x73, 0x05, 0x06, 0x02, 0x6d, 0x79, 0xa2, 0xc9, 0x21, 0x85, 0x76, 0x93, 0x13, 0x0d, 0xd0,
	0xa7, 0xa3, 0xe3, 0xf9, 0x2d, 0x01, 0x8c, 0xaf, 0x55, 0xd0, 0xba, 0xe8, 0x5b, 0xcc, 0xe7, 0x18,
	0xb3, 0xe8, 0x95, 0x78, 0xcb, 0xc2, 0xd3, 0x88, 0xbb, 0xec, 0x6c, 0xc8, 0xa2, 0x2b, 0x62, 0x42,
	0xcd, 0xf1, 0x02, 0x1e, 0xaa, 0x4a, 0x43, 0x39, 0xd8, 0xec, 0xa8, 0x3f, 0xbe, 0x1d, 0xed, 0xa4,
	0xc2, 0xcf, 0x3d, 0x2f, 0x62, 0x88, 0xe7, 0x71, 0xc4, 0x43, 0xdf, 0x4a, 0x68, 0xe4, 0x01, 0x40,
	0xcf, 0x41, 0x66, 0x7b, 0x2c, 0x14, 0x81, 0xba, 0x36, 0x6f, 0xb2, 0x36, 0xe7, 0x95, 0x93, 0x79,
	0x81, 0x3c, 0x84, 0x3b, 0x17, 0x43, 0x11, 0x67, 0x78, 0x55, 0xe2, 0x20, 0x4b, 0x09, 0xc1, 0x84,
	0xed, 0xbc, 0xdf, 0xf6, 0x98, 0xcb, 0x03, 0xa7, 0x8f, 0xea, 0x7a, 0x43, 0x39, 0xa8, 0x5a, 0xf5,
	0x85, 0xd0, 0x49, 0x0a, 0x90, 0xc7, 0xb0, 0xb3, 0x24, 0x98, 0x37, 0xd4, 0x64, 0x03, 0xc9, 0x95,
	0x17, 0x1d, 0x87, 0x40, 0xa4, 0x7f, 0x8e, 0xf6, 0x92, 0xd3, 0x0d, 0xe9, 0x64, 0x2b, 0x45, 0x3a,
	0x0b, 0xc3, 0x26, 0x6c, 0x67, 0xec, 0x65, 0xe3, 0xb7, 0x24, 0xbd, 0x9e, 0x42, 0x67, 0xb9, 0xff,
	0x47, 0x70, 0x2f, 0xe3, 0x0f, 0x84, 0xe8, 0xdb, 0xdc, 0x53, 0x6f, 0x4b, 0xee, 0xdd, 0xb4, 0x7c,
	0x2a, 0x44, 0xff, 0x85, 0xf7, 0xac, 0xfd, 0x71, 0x36, 0x6e, 0x26, 0x99, 0x7d, 0x9e, 0x8d, 0x9b,
	0xfb, 0xf9, 0xc8, 0xcb, 0x87, 0x61, 0xec, 0x83, 0x51, 0x8e, 0x5a, 0x0c, 0x07, 0x22, 0x44, 0x66,
	0xfc, 0x56, 0x40, 0x95, 0xb4, 0x40, 0x8c, 0xd8, 0x4d, 0xcf, 0xb3, 0x20, 0x8f, 0xf5, 0xa2, 0x3c,
	0x8e, 0xff, 0xce, 0xc3, 0x58, 0xc9, 0xa3, 0xe0, 0x55, 0x0c, 0x03, 0x1a, 0x65, 0x58, 0x96, 0x45,
	0xeb, 0xd3, 0x1a, 0x54, 0xbb, 0xe8, 0x93, 0xf7, 0xb0, 0x5b, 0xf6, 0x85, 0x1f, 0x9a, 0xab, 0xbf,
	0x96, 0x59, 0x1e, 0xb2, 0xf6, 0xe4, 0x7f, 0xd8, 0x99, 0x0d, 0xf2, 0x0e, 0xee, 0x17, 0x8f, 0xa3,
	0x59, 0x22, 0x57, 0xc0, 0xd5, 0x5a, 0xff, 0xce, 0xcd, 0x1e, 0xac, 0xd5, 0x3e, 0xcc, 0xc6, 0x4d,
	0xa5, 0xd3, 0xfd, 0x3e, 0xd1, 0x95, 0xeb, 0x89, 0xae, 0xfc, 0x9a, 0xe8, 0xca, 0x97, 0xa9, 0x5e,
	0xb9, 0x9e, 0xea, 0x95, 0x9f, 0x53, 0xbd, 0xf2, 0xba, 0xed, 0xf3, 0xf8, 0xcd, 0xb0, 0x67, 0xba,
	0x22, 0xa0, 0xe7, 0x52, 0xfe, 0xe8, 0xa5, 0xd3, 0x43, 0x9a, 0x6e, 0xa2, 0x51, 0xeb, 0x29, 0xbd,
	0x5c, 0xde, 0x47, 0x57, 0x03, 0x86, 0xbd, 0x0d, 0xb9, 0x3a, 0xda, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x7b, 0x76, 0x0a, 0x6f, 0xb0, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterTokenPriceQuery registers a new token to track prices for
	RegisterTokenPriceQuery(ctx context.Context, in *MsgRegisterTokenPriceQuery, opts ...grpc.CallOption) (*MsgRegisterTokenPriceQueryResponse, error)
	// RemoveTokenPriceQuery removes a token from price tracking
	RemoveTokenPriceQuery(ctx context.Context, in *MsgRemoveTokenPriceQuery, opts ...grpc.CallOption) (*MsgRemoveTokenPriceQueryResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterTokenPriceQuery(ctx context.Context, in *MsgRegisterTokenPriceQuery, opts ...grpc.CallOption) (*MsgRegisterTokenPriceQueryResponse, error) {
	out := new(MsgRegisterTokenPriceQueryResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Msg/RegisterTokenPriceQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveTokenPriceQuery(ctx context.Context, in *MsgRemoveTokenPriceQuery, opts ...grpc.CallOption) (*MsgRemoveTokenPriceQueryResponse, error) {
	out := new(MsgRemoveTokenPriceQueryResponse)
	err := c.cc.Invoke(ctx, "/stride.icqoracle.Msg/RemoveTokenPriceQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterTokenPriceQuery registers a new token to track prices for
	RegisterTokenPriceQuery(context.Context, *MsgRegisterTokenPriceQuery) (*MsgRegisterTokenPriceQueryResponse, error)
	// RemoveTokenPriceQuery removes a token from price tracking
	RemoveTokenPriceQuery(context.Context, *MsgRemoveTokenPriceQuery) (*MsgRemoveTokenPriceQueryResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterTokenPriceQuery(ctx context.Context, req *MsgRegisterTokenPriceQuery) (*MsgRegisterTokenPriceQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTokenPriceQuery not implemented")
}
func (*UnimplementedMsgServer) RemoveTokenPriceQuery(ctx context.Context, req *MsgRemoveTokenPriceQuery) (*MsgRemoveTokenPriceQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTokenPriceQuery not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterTokenPriceQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterTokenPriceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterTokenPriceQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Msg/RegisterTokenPriceQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterTokenPriceQuery(ctx, req.(*MsgRegisterTokenPriceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveTokenPriceQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveTokenPriceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveTokenPriceQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icqoracle.Msg/RemoveTokenPriceQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveTokenPriceQuery(ctx, req.(*MsgRemoveTokenPriceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.icqoracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTokenPriceQuery",
			Handler:    _Msg_RegisterTokenPriceQuery_Handler,
		},
		{
			MethodName: "RemoveTokenPriceQuery",
			Handler:    _Msg_RemoveTokenPriceQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/icqoracle/tx.proto",
}

func (m *MsgRegisterTokenPriceQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTokenPriceQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTokenPriceQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OsmosisPoolId) > 0 {
		i -= len(m.OsmosisPoolId)
		copy(dAtA[i:], m.OsmosisPoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OsmosisPoolId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OsmosisQuoteDenom) > 0 {
		i -= len(m.OsmosisQuoteDenom)
		copy(dAtA[i:], m.OsmosisQuoteDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OsmosisQuoteDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OsmosisBaseDenom) > 0 {
		i -= len(m.OsmosisBaseDenom)
		copy(dAtA[i:], m.OsmosisBaseDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OsmosisBaseDenom)))
		i--
		dAtA[i] = 0x32
	}
	if m.QuoteDenomDecimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.QuoteDenomDecimals))
		i--
		dAtA[i] = 0x28
	}
	if m.BaseDenomDecimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BaseDenomDecimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterTokenPriceQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTokenPriceQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTokenPriceQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTokenPriceQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTokenPriceQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTokenPriceQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OsmosisPoolId) > 0 {
		i -= len(m.OsmosisPoolId)
		copy(dAtA[i:], m.OsmosisPoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OsmosisPoolId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveTokenPriceQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveTokenPriceQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveTokenPriceQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterTokenPriceQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BaseDenomDecimals != 0 {
		n += 1 + sovTx(uint64(m.BaseDenomDecimals))
	}
	if m.QuoteDenomDecimals != 0 {
		n += 1 + sovTx(uint64(m.QuoteDenomDecimals))
	}
	l = len(m.OsmosisBaseDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OsmosisQuoteDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OsmosisPoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterTokenPriceQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveTokenPriceQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OsmosisPoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveTokenPriceQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterTokenPriceQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTokenPriceQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTokenPriceQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenomDecimals", wireType)
			}
			m.BaseDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseDenomDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenomDecimals", wireType)
			}
			m.QuoteDenomDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteDenomDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisBaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisBaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisQuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisQuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisPoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisPoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterTokenPriceQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTokenPriceQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTokenPriceQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTokenPriceQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTokenPriceQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTokenPriceQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisPoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisPoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveTokenPriceQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveTokenPriceQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveTokenPriceQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
