// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakedym/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Host Zone
type QueryHostZoneRequest struct {
}

func (m *QueryHostZoneRequest) Reset()         { *m = QueryHostZoneRequest{} }
func (m *QueryHostZoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostZoneRequest) ProtoMessage()    {}
func (*QueryHostZoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{0}
}
func (m *QueryHostZoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostZoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostZoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostZoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostZoneRequest.Merge(m, src)
}
func (m *QueryHostZoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostZoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostZoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostZoneRequest proto.InternalMessageInfo

type QueryHostZoneResponse struct {
	HostZone *HostZone `protobuf:"bytes,1,opt,name=host_zone,json=hostZone,proto3" json:"host_zone,omitempty"`
}

func (m *QueryHostZoneResponse) Reset()         { *m = QueryHostZoneResponse{} }
func (m *QueryHostZoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHostZoneResponse) ProtoMessage()    {}
func (*QueryHostZoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{1}
}
func (m *QueryHostZoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostZoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostZoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostZoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostZoneResponse.Merge(m, src)
}
func (m *QueryHostZoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostZoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostZoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostZoneResponse proto.InternalMessageInfo

func (m *QueryHostZoneResponse) GetHostZone() *HostZone {
	if m != nil {
		return m.HostZone
	}
	return nil
}

// All Delegation Records
type QueryDelegationRecordsRequest struct {
	IncludeArchived bool `protobuf:"varint,1,opt,name=include_archived,json=includeArchived,proto3" json:"include_archived,omitempty"`
}

func (m *QueryDelegationRecordsRequest) Reset()         { *m = QueryDelegationRecordsRequest{} }
func (m *QueryDelegationRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationRecordsRequest) ProtoMessage()    {}
func (*QueryDelegationRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{2}
}
func (m *QueryDelegationRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationRecordsRequest.Merge(m, src)
}
func (m *QueryDelegationRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationRecordsRequest proto.InternalMessageInfo

func (m *QueryDelegationRecordsRequest) GetIncludeArchived() bool {
	if m != nil {
		return m.IncludeArchived
	}
	return false
}

type QueryDelegationRecordsResponse struct {
	DelegationRecords []DelegationRecord `protobuf:"bytes,1,rep,name=delegation_records,json=delegationRecords,proto3" json:"delegation_records"`
}

func (m *QueryDelegationRecordsResponse) Reset()         { *m = QueryDelegationRecordsResponse{} }
func (m *QueryDelegationRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationRecordsResponse) ProtoMessage()    {}
func (*QueryDelegationRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{3}
}
func (m *QueryDelegationRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationRecordsResponse.Merge(m, src)
}
func (m *QueryDelegationRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationRecordsResponse proto.InternalMessageInfo

func (m *QueryDelegationRecordsResponse) GetDelegationRecords() []DelegationRecord {
	if m != nil {
		return m.DelegationRecords
	}
	return nil
}

// All Unbonding Records
type QueryUnbondingRecordsRequest struct {
	IncludeArchived bool `protobuf:"varint,1,opt,name=include_archived,json=includeArchived,proto3" json:"include_archived,omitempty"`
}

func (m *QueryUnbondingRecordsRequest) Reset()         { *m = QueryUnbondingRecordsRequest{} }
func (m *QueryUnbondingRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingRecordsRequest) ProtoMessage()    {}
func (*QueryUnbondingRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{4}
}
func (m *QueryUnbondingRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingRecordsRequest.Merge(m, src)
}
func (m *QueryUnbondingRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingRecordsRequest proto.InternalMessageInfo

func (m *QueryUnbondingRecordsRequest) GetIncludeArchived() bool {
	if m != nil {
		return m.IncludeArchived
	}
	return false
}

type QueryUnbondingRecordsResponse struct {
	UnbondingRecords []UnbondingRecord `protobuf:"bytes,1,rep,name=unbonding_records,json=unbondingRecords,proto3" json:"unbonding_records"`
}

func (m *QueryUnbondingRecordsResponse) Reset()         { *m = QueryUnbondingRecordsResponse{} }
func (m *QueryUnbondingRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingRecordsResponse) ProtoMessage()    {}
func (*QueryUnbondingRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{5}
}
func (m *QueryUnbondingRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingRecordsResponse.Merge(m, src)
}
func (m *QueryUnbondingRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingRecordsResponse proto.InternalMessageInfo

func (m *QueryUnbondingRecordsResponse) GetUnbondingRecords() []UnbondingRecord {
	if m != nil {
		return m.UnbondingRecords
	}
	return nil
}

// Single Redemption Record
type QueryRedemptionRecordRequest struct {
	UnbondingRecordId uint64 `protobuf:"varint,1,opt,name=unbonding_record_id,json=unbondingRecordId,proto3" json:"unbonding_record_id,omitempty"`
	Address           string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRedemptionRecordRequest) Reset()         { *m = QueryRedemptionRecordRequest{} }
func (m *QueryRedemptionRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRecordRequest) ProtoMessage()    {}
func (*QueryRedemptionRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{6}
}
func (m *QueryRedemptionRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRecordRequest.Merge(m, src)
}
func (m *QueryRedemptionRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRecordRequest proto.InternalMessageInfo

func (m *QueryRedemptionRecordRequest) GetUnbondingRecordId() uint64 {
	if m != nil {
		return m.UnbondingRecordId
	}
	return 0
}

func (m *QueryRedemptionRecordRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryRedemptionRecordResponse struct {
	RedemptionRecordResponse *RedemptionRecordResponse `protobuf:"bytes,1,opt,name=redemption_record_response,json=redemptionRecordResponse,proto3" json:"redemption_record_response,omitempty"`
}

func (m *QueryRedemptionRecordResponse) Reset()         { *m = QueryRedemptionRecordResponse{} }
func (m *QueryRedemptionRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRecordResponse) ProtoMessage()    {}
func (*QueryRedemptionRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{7}
}
func (m *QueryRedemptionRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRecordResponse.Merge(m, src)
}
func (m *QueryRedemptionRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRecordResponse proto.InternalMessageInfo

func (m *QueryRedemptionRecordResponse) GetRedemptionRecordResponse() *RedemptionRecordResponse {
	if m != nil {
		return m.RedemptionRecordResponse
	}
	return nil
}

// All Redemption Records
type QueryRedemptionRecordsRequest struct {
	Address           string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	UnbondingRecordId uint64             `protobuf:"varint,2,opt,name=unbonding_record_id,json=unbondingRecordId,proto3" json:"unbonding_record_id,omitempty"`
	Pagination        *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRedemptionRecordsRequest) Reset()         { *m = QueryRedemptionRecordsRequest{} }
func (m *QueryRedemptionRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRecordsRequest) ProtoMessage()    {}
func (*QueryRedemptionRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{8}
}
func (m *QueryRedemptionRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRecordsRequest.Merge(m, src)
}
func (m *QueryRedemptionRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRecordsRequest proto.InternalMessageInfo

func (m *QueryRedemptionRecordsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryRedemptionRecordsRequest) GetUnbondingRecordId() uint64 {
	if m != nil {
		return m.UnbondingRecordId
	}
	return 0
}

func (m *QueryRedemptionRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRedemptionRecordsResponse struct {
	RedemptionRecordResponses []RedemptionRecordResponse `protobuf:"bytes,1,rep,name=redemption_record_responses,json=redemptionRecordResponses,proto3" json:"redemption_record_responses"`
	Pagination                *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRedemptionRecordsResponse) Reset()         { *m = QueryRedemptionRecordsResponse{} }
func (m *QueryRedemptionRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedemptionRecordsResponse) ProtoMessage()    {}
func (*QueryRedemptionRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{9}
}
func (m *QueryRedemptionRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedemptionRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedemptionRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedemptionRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedemptionRecordsResponse.Merge(m, src)
}
func (m *QueryRedemptionRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedemptionRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedemptionRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedemptionRecordsResponse proto.InternalMessageInfo

func (m *QueryRedemptionRecordsResponse) GetRedemptionRecordResponses() []RedemptionRecordResponse {
	if m != nil {
		return m.RedemptionRecordResponses
	}
	return nil
}

func (m *QueryRedemptionRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// All Slash Records
type QuerySlashRecordsRequest struct {
}

func (m *QuerySlashRecordsRequest) Reset()         { *m = QuerySlashRecordsRequest{} }
func (m *QuerySlashRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySlashRecordsRequest) ProtoMessage()    {}
func (*QuerySlashRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{10}
}
func (m *QuerySlashRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashRecordsRequest.Merge(m, src)
}
func (m *QuerySlashRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashRecordsRequest proto.InternalMessageInfo

type QuerySlashRecordsResponse struct {
	SlashRecords []SlashRecord `protobuf:"bytes,1,rep,name=slash_records,json=slashRecords,proto3" json:"slash_records"`
}

func (m *QuerySlashRecordsResponse) Reset()         { *m = QuerySlashRecordsResponse{} }
func (m *QuerySlashRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySlashRecordsResponse) ProtoMessage()    {}
func (*QuerySlashRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{11}
}
func (m *QuerySlashRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashRecordsResponse.Merge(m, src)
}
func (m *QuerySlashRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashRecordsResponse proto.InternalMessageInfo

func (m *QuerySlashRecordsResponse) GetSlashRecords() []SlashRecord {
	if m != nil {
		return m.SlashRecords
	}
	return nil
}

// Data structure for frontend to consume
type RedemptionRecordResponse struct {
	// Redemption record
	RedemptionRecord *RedemptionRecord `protobuf:"bytes,1,opt,name=redemption_record,json=redemptionRecord,proto3" json:"redemption_record,omitempty"`
	// The Unix timestamp (in seconds) at which the unbonding for the UR
	// associated with this RR completes
	UnbondingCompletionTimeSeconds uint64 `protobuf:"varint,2,opt,name=unbonding_completion_time_seconds,json=unbondingCompletionTimeSeconds,proto3" json:"unbonding_completion_time_seconds,omitempty"`
}

func (m *RedemptionRecordResponse) Reset()         { *m = RedemptionRecordResponse{} }
func (m *RedemptionRecordResponse) String() string { return proto.CompactTextString(m) }
func (*RedemptionRecordResponse) ProtoMessage()    {}
func (*RedemptionRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20841970448ef724, []int{12}
}
func (m *RedemptionRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedemptionRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedemptionRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedemptionRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedemptionRecordResponse.Merge(m, src)
}
func (m *RedemptionRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *RedemptionRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RedemptionRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RedemptionRecordResponse proto.InternalMessageInfo

func (m *RedemptionRecordResponse) GetRedemptionRecord() *RedemptionRecord {
	if m != nil {
		return m.RedemptionRecord
	}
	return nil
}

func (m *RedemptionRecordResponse) GetUnbondingCompletionTimeSeconds() uint64 {
	if m != nil {
		return m.UnbondingCompletionTimeSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryHostZoneRequest)(nil), "stride.stakedym.QueryHostZoneRequest")
	proto.RegisterType((*QueryHostZoneResponse)(nil), "stride.stakedym.QueryHostZoneResponse")
	proto.RegisterType((*QueryDelegationRecordsRequest)(nil), "stride.stakedym.QueryDelegationRecordsRequest")
	proto.RegisterType((*QueryDelegationRecordsResponse)(nil), "stride.stakedym.QueryDelegationRecordsResponse")
	proto.RegisterType((*QueryUnbondingRecordsRequest)(nil), "stride.stakedym.QueryUnbondingRecordsRequest")
	proto.RegisterType((*QueryUnbondingRecordsResponse)(nil), "stride.stakedym.QueryUnbondingRecordsResponse")
	proto.RegisterType((*QueryRedemptionRecordRequest)(nil), "stride.stakedym.QueryRedemptionRecordRequest")
	proto.RegisterType((*QueryRedemptionRecordResponse)(nil), "stride.stakedym.QueryRedemptionRecordResponse")
	proto.RegisterType((*QueryRedemptionRecordsRequest)(nil), "stride.stakedym.QueryRedemptionRecordsRequest")
	proto.RegisterType((*QueryRedemptionRecordsResponse)(nil), "stride.stakedym.QueryRedemptionRecordsResponse")
	proto.RegisterType((*QuerySlashRecordsRequest)(nil), "stride.stakedym.QuerySlashRecordsRequest")
	proto.RegisterType((*QuerySlashRecordsResponse)(nil), "stride.stakedym.QuerySlashRecordsResponse")
	proto.RegisterType((*RedemptionRecordResponse)(nil), "stride.stakedym.RedemptionRecordResponse")
}

func init() { proto.RegisterFile("stride/stakedym/query.proto", fileDescriptor_20841970448ef724) }

var fileDescriptor_20841970448ef724 = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xcd, 0xa4, 0x7d, 0xef, 0xa5, 0xd3, 0x3e, 0x35, 0x19, 0x0a, 0x72, 0xdd, 0x62, 0x52, 0x4b,
	0x94, 0xb4, 0xa2, 0x76, 0x1b, 0xa4, 0xb2, 0xa6, 0x20, 0x4a, 0x51, 0x55, 0x8a, 0x03, 0x5d, 0x74,
	0x13, 0x39, 0xf1, 0xc8, 0xb1, 0x48, 0x3c, 0xa9, 0xc7, 0xa9, 0x5a, 0xaa, 0x6e, 0xd8, 0x00, 0x3b,
	0x24, 0x56, 0xfc, 0x04, 0x16, 0x2c, 0x58, 0xf0, 0x1f, 0xca, 0xae, 0x12, 0x1b, 0xc4, 0x02, 0xa1,
	0x96, 0x1f, 0x82, 0x32, 0x1e, 0xe7, 0xc3, 0xf6, 0x24, 0x11, 0x3b, 0x67, 0xee, 0xf5, 0xb9, 0xe7,
	0x5c, 0xdf, 0x7b, 0x26, 0x70, 0x8e, 0xfa, 0x9e, 0x63, 0x61, 0x9d, 0xfa, 0xe6, 0x0b, 0x6c, 0x1d,
	0x37, 0xf4, 0x83, 0x16, 0xf6, 0x8e, 0xb5, 0xa6, 0x47, 0x7c, 0x82, 0xa6, 0x83, 0xa0, 0x16, 0x06,
	0x65, 0x25, 0x9a, 0x1d, 0x3e, 0x04, 0x2f, 0xc8, 0x33, 0x36, 0xb1, 0x09, 0x7b, 0xd4, 0xdb, 0x4f,
	0xfc, 0x74, 0xde, 0x26, 0xc4, 0xae, 0x63, 0xdd, 0x6c, 0x3a, 0xba, 0xe9, 0xba, 0xc4, 0x37, 0x7d,
	0x87, 0xb8, 0x94, 0x47, 0x97, 0xab, 0x84, 0x36, 0x08, 0xd5, 0x2b, 0x26, 0xc5, 0x41, 0x75, 0xfd,
	0x70, 0xad, 0x82, 0x7d, 0x73, 0x4d, 0x6f, 0x9a, 0xb6, 0xe3, 0xb2, 0xe4, 0x20, 0x57, 0xbd, 0x06,
	0x67, 0x9e, 0xb6, 0x33, 0x1e, 0x11, 0xea, 0xef, 0x13, 0x17, 0x1b, 0xf8, 0xa0, 0x85, 0xa9, 0xaf,
	0x3e, 0x81, 0x57, 0x23, 0xe7, 0xb4, 0x49, 0x5c, 0x8a, 0xd1, 0x3a, 0x9c, 0xa8, 0x11, 0xea, 0x97,
	0x5f, 0x12, 0x17, 0x4b, 0x20, 0x0f, 0x0a, 0x93, 0xc5, 0x59, 0x2d, 0xa2, 0x4a, 0xeb, 0xbc, 0x95,
	0xa9, 0xf1, 0x27, 0xf5, 0x31, 0xbc, 0xce, 0x00, 0x1f, 0xe0, 0x3a, 0xb6, 0x19, 0x03, 0x03, 0x57,
	0x89, 0x67, 0x51, 0x5e, 0x11, 0x2d, 0xc1, 0xac, 0xe3, 0x56, 0xeb, 0x2d, 0x0b, 0x97, 0x4d, 0xaf,
	0x5a, 0x73, 0x0e, 0xb1, 0xc5, 0xf0, 0x33, 0xc6, 0x34, 0x3f, 0xbf, 0xc7, 0x8f, 0xd5, 0x23, 0xa8,
	0x88, 0xb0, 0x38, 0xcb, 0x3d, 0x88, 0xac, 0x4e, 0xb0, 0xec, 0x05, 0x51, 0x09, 0xe4, 0xc7, 0x0a,
	0x93, 0xc5, 0x85, 0x18, 0xdd, 0x28, 0xce, 0xc6, 0xf8, 0xd9, 0xcf, 0x1b, 0x29, 0x23, 0x67, 0x45,
	0xf1, 0xd5, 0x2d, 0x38, 0xcf, 0x2a, 0x3f, 0x77, 0x2b, 0xc4, 0xb5, 0x1c, 0xd7, 0xfe, 0x7b, 0x11,
	0x3e, 0x6f, 0x48, 0x1c, 0x8a, 0x6b, 0x28, 0xc1, 0x5c, 0x2b, 0x8c, 0x45, 0x24, 0xe4, 0x63, 0x12,
	0x22, 0x28, 0x5c, 0x41, 0xb6, 0x15, 0x01, 0x57, 0x6b, 0x5c, 0x80, 0x81, 0x2d, 0xdc, 0x68, 0x76,
	0xa5, 0x85, 0x02, 0x34, 0x78, 0x25, 0x5a, 0xb4, 0xec, 0x04, 0x1a, 0xc6, 0x8d, 0x5c, 0x04, 0x6e,
	0xcb, 0x42, 0x12, 0xfc, 0xcf, 0xb4, 0x2c, 0x0f, 0x53, 0x2a, 0xa5, 0xf3, 0xa0, 0x30, 0x61, 0x84,
	0x3f, 0xd5, 0x37, 0x80, 0x0b, 0x8c, 0x97, 0xe2, 0x02, 0x6d, 0x28, 0x7b, 0x9d, 0x58, 0x58, 0xcc,
	0xe3, 0x51, 0x3e, 0x5b, 0x4b, 0x31, 0xa5, 0x22, 0x38, 0x43, 0xf2, 0x04, 0x11, 0xf5, 0xb3, 0x88,
	0x4a, 0xe7, 0xbb, 0xf5, 0xc8, 0x00, 0x7d, 0x32, 0x44, 0x0d, 0x49, 0x8b, 0x1a, 0xf2, 0x10, 0xc2,
	0xee, 0x92, 0x49, 0x63, 0x4c, 0xc4, 0xa2, 0x16, 0x6c, 0xa4, 0xd6, 0xde, 0x48, 0x2d, 0xf0, 0x03,
	0xbe, 0x91, 0xda, 0xae, 0x69, 0x87, 0x4b, 0x67, 0xf4, 0xbc, 0xa9, 0xfe, 0x00, 0x7c, 0xc8, 0x13,
	0x38, 0xf3, 0xfe, 0x11, 0x38, 0x27, 0xee, 0x5f, 0x38, 0x2a, 0xa3, 0x37, 0x90, 0xcf, 0xcc, 0xac,
	0xa8, 0x8d, 0x14, 0x6d, 0xf6, 0x69, 0x4b, 0x33, 0x6d, 0xb7, 0x86, 0x6a, 0xe3, 0x9f, 0xa7, 0x57,
	0x9c, 0x0c, 0x25, 0xa6, 0xad, 0x54, 0x37, 0x69, 0xad, 0xff, 0x53, 0xa8, 0x16, 0x9c, 0x4d, 0x88,
	0x71, 0xc9, 0x9b, 0xf0, 0x7f, 0xda, 0x3e, 0x8f, 0xec, 0xc3, 0x7c, 0x4c, 0x64, 0xcf, 0xdb, 0x5c,
	0xd7, 0x14, 0xed, 0x01, 0x54, 0xbf, 0x00, 0x28, 0x09, 0x07, 0x73, 0x07, 0xe6, 0x62, 0x8d, 0xe5,
	0xf3, 0xb8, 0x30, 0xbc, 0x9d, 0xd9, 0x68, 0x03, 0xd1, 0x16, 0x5c, 0xe8, 0xce, 0x50, 0x95, 0x34,
	0x9a, 0x75, 0xcc, 0x90, 0x7d, 0xa7, 0x81, 0xcb, 0x14, 0x57, 0x89, 0x6b, 0x51, 0x3e, 0x51, 0x4a,
	0x27, 0xf1, 0x7e, 0x27, 0xef, 0x99, 0xd3, 0xc0, 0xa5, 0x20, 0xab, 0xf8, 0x3a, 0x03, 0xff, 0x61,
	0xed, 0x41, 0x6f, 0x01, 0xcc, 0x84, 0x3e, 0x8b, 0x6e, 0xc6, 0x68, 0x25, 0xb9, 0xba, 0xbc, 0x38,
	0x2c, 0x8d, 0x2f, 0x8c, 0xf6, 0xea, 0xdb, 0xef, 0xf7, 0xe9, 0x02, 0x5a, 0xd4, 0x4b, 0x2c, 0x7f,
	0x65, 0xdb, 0xac, 0x50, 0x3d, 0x7a, 0x55, 0x75, 0xee, 0x01, 0xf4, 0x09, 0xc0, 0x5c, 0xcc, 0x8c,
	0x91, 0x96, 0x5c, 0x4d, 0x74, 0x03, 0xc8, 0xfa, 0xc8, 0xf9, 0x9c, 0xe6, 0x5d, 0x46, 0x73, 0x0d,
	0xe9, 0x03, 0x69, 0xc6, 0x2f, 0x02, 0xf4, 0x11, 0xc0, 0x6c, 0xd4, 0x77, 0xd1, 0x4a, 0x72, 0x79,
	0x81, 0xd5, 0xcb, 0xda, 0xa8, 0xe9, 0x9c, 0xec, 0x3a, 0x23, 0xbb, 0x8a, 0xb4, 0x81, 0x64, 0x63,
	0x8e, 0x8f, 0xbe, 0x02, 0x98, 0x8d, 0xce, 0x98, 0x88, 0xab, 0xc0, 0xd5, 0x45, 0x5c, 0x45, 0x0b,
	0xa0, 0xee, 0x31, 0xae, 0xbb, 0x68, 0x67, 0x20, 0xd7, 0xd8, 0x8e, 0xe8, 0x27, 0x09, 0x56, 0x79,
	0xaa, 0x9f, 0x70, 0x2f, 0x3d, 0x65, 0x73, 0x12, 0xf3, 0x33, 0x34, 0x22, 0xbb, 0x61, 0x73, 0x22,
	0x34, 0xca, 0x11, 0xe7, 0x24, 0x26, 0x87, 0xa2, 0x0f, 0x00, 0x4e, 0xf5, 0xfa, 0x10, 0x5a, 0x4a,
	0x2e, 0x9d, 0xe0, 0x63, 0xf2, 0xf2, 0x28, 0xa9, 0x9c, 0x60, 0x91, 0x11, 0xbc, 0x8d, 0x96, 0x07,
	0x12, 0xec, 0x73, 0xbe, 0x8d, 0xed, 0xb3, 0x0b, 0x05, 0x9c, 0x5f, 0x28, 0xe0, 0xd7, 0x85, 0x02,
	0xde, 0x5d, 0x2a, 0xa9, 0xf3, 0x4b, 0x25, 0xf5, 0xfd, 0x52, 0x49, 0xed, 0x17, 0x6d, 0xc7, 0xaf,
	0xb5, 0x2a, 0x5a, 0x95, 0x34, 0x92, 0xf0, 0x0e, 0x8b, 0xab, 0xfa, 0x51, 0x17, 0xd5, 0x3f, 0x6e,
	0x62, 0x5a, 0xf9, 0x97, 0xfd, 0x1d, 0xbc, 0xf3, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xb9, 0x2a,
	0xc7, 0xbe, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries the host zone struct
	HostZone(ctx context.Context, in *QueryHostZoneRequest, opts ...grpc.CallOption) (*QueryHostZoneResponse, error)
	// Queries the delegation records with an optional to include archived records
	// Ex:
	// - /delegation_records
	// - /delegation_records?include_archived=true
	DelegationRecords(ctx context.Context, in *QueryDelegationRecordsRequest, opts ...grpc.CallOption) (*QueryDelegationRecordsResponse, error)
	// Queries the unbonding records with an optional to include archived records
	// Ex:
	// - /unbonding_records
	// - /unbonding_records?include_archived=true
	UnbondingRecords(ctx context.Context, in *QueryUnbondingRecordsRequest, opts ...grpc.CallOption) (*QueryUnbondingRecordsResponse, error)
	// Queries a single user redemption record
	RedemptionRecord(ctx context.Context, in *QueryRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryRedemptionRecordResponse, error)
	// Queries all redemption records with optional filters
	// Ex:
	// - /redemption_records
	// - /redemption_records?address=strideXXX
	// - /redemption_records?unbonding_record_id=100
	RedemptionRecords(ctx context.Context, in *QueryRedemptionRecordsRequest, opts ...grpc.CallOption) (*QueryRedemptionRecordsResponse, error)
	// Queries slash records
	SlashRecords(ctx context.Context, in *QuerySlashRecordsRequest, opts ...grpc.CallOption) (*QuerySlashRecordsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) HostZone(ctx context.Context, in *QueryHostZoneRequest, opts ...grpc.CallOption) (*QueryHostZoneResponse, error) {
	out := new(QueryHostZoneResponse)
	err := c.cc.Invoke(ctx, "/stride.stakedym.Query/HostZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationRecords(ctx context.Context, in *QueryDelegationRecordsRequest, opts ...grpc.CallOption) (*QueryDelegationRecordsResponse, error) {
	out := new(QueryDelegationRecordsResponse)
	err := c.cc.Invoke(ctx, "/stride.stakedym.Query/DelegationRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondingRecords(ctx context.Context, in *QueryUnbondingRecordsRequest, opts ...grpc.CallOption) (*QueryUnbondingRecordsResponse, error) {
	out := new(QueryUnbondingRecordsResponse)
	err := c.cc.Invoke(ctx, "/stride.stakedym.Query/UnbondingRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedemptionRecord(ctx context.Context, in *QueryRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryRedemptionRecordResponse, error) {
	out := new(QueryRedemptionRecordResponse)
	err := c.cc.Invoke(ctx, "/stride.stakedym.Query/RedemptionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedemptionRecords(ctx context.Context, in *QueryRedemptionRecordsRequest, opts ...grpc.CallOption) (*QueryRedemptionRecordsResponse, error) {
	out := new(QueryRedemptionRecordsResponse)
	err := c.cc.Invoke(ctx, "/stride.stakedym.Query/RedemptionRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashRecords(ctx context.Context, in *QuerySlashRecordsRequest, opts ...grpc.CallOption) (*QuerySlashRecordsResponse, error) {
	out := new(QuerySlashRecordsResponse)
	err := c.cc.Invoke(ctx, "/stride.stakedym.Query/SlashRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries the host zone struct
	HostZone(context.Context, *QueryHostZoneRequest) (*QueryHostZoneResponse, error)
	// Queries the delegation records with an optional to include archived records
	// Ex:
	// - /delegation_records
	// - /delegation_records?include_archived=true
	DelegationRecords(context.Context, *QueryDelegationRecordsRequest) (*QueryDelegationRecordsResponse, error)
	// Queries the unbonding records with an optional to include archived records
	// Ex:
	// - /unbonding_records
	// - /unbonding_records?include_archived=true
	UnbondingRecords(context.Context, *QueryUnbondingRecordsRequest) (*QueryUnbondingRecordsResponse, error)
	// Queries a single user redemption record
	RedemptionRecord(context.Context, *QueryRedemptionRecordRequest) (*QueryRedemptionRecordResponse, error)
	// Queries all redemption records with optional filters
	// Ex:
	// - /redemption_records
	// - /redemption_records?address=strideXXX
	// - /redemption_records?unbonding_record_id=100
	RedemptionRecords(context.Context, *QueryRedemptionRecordsRequest) (*QueryRedemptionRecordsResponse, error)
	// Queries slash records
	SlashRecords(context.Context, *QuerySlashRecordsRequest) (*QuerySlashRecordsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) HostZone(ctx context.Context, req *QueryHostZoneRequest) (*QueryHostZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostZone not implemented")
}
func (*UnimplementedQueryServer) DelegationRecords(ctx context.Context, req *QueryDelegationRecordsRequest) (*QueryDelegationRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationRecords not implemented")
}
func (*UnimplementedQueryServer) UnbondingRecords(ctx context.Context, req *QueryUnbondingRecordsRequest) (*QueryUnbondingRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingRecords not implemented")
}
func (*UnimplementedQueryServer) RedemptionRecord(ctx context.Context, req *QueryRedemptionRecordRequest) (*QueryRedemptionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedemptionRecord not implemented")
}
func (*UnimplementedQueryServer) RedemptionRecords(ctx context.Context, req *QueryRedemptionRecordsRequest) (*QueryRedemptionRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedemptionRecords not implemented")
}
func (*UnimplementedQueryServer) SlashRecords(ctx context.Context, req *QuerySlashRecordsRequest) (*QuerySlashRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashRecords not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_HostZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakedym.Query/HostZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostZone(ctx, req.(*QueryHostZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakedym.Query/DelegationRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationRecords(ctx, req.(*QueryDelegationRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondingRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnbondingRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondingRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakedym.Query/UnbondingRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondingRecords(ctx, req.(*QueryUnbondingRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedemptionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedemptionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakedym.Query/RedemptionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedemptionRecord(ctx, req.(*QueryRedemptionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedemptionRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedemptionRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedemptionRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakedym.Query/RedemptionRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedemptionRecords(ctx, req.(*QueryRedemptionRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.stakedym.Query/SlashRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashRecords(ctx, req.(*QuerySlashRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.stakedym.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostZone",
			Handler:    _Query_HostZone_Handler,
		},
		{
			MethodName: "DelegationRecords",
			Handler:    _Query_DelegationRecords_Handler,
		},
		{
			MethodName: "UnbondingRecords",
			Handler:    _Query_UnbondingRecords_Handler,
		},
		{
			MethodName: "RedemptionRecord",
			Handler:    _Query_RedemptionRecord_Handler,
		},
		{
			MethodName: "RedemptionRecords",
			Handler:    _Query_RedemptionRecords_Handler,
		},
		{
			MethodName: "SlashRecords",
			Handler:    _Query_SlashRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/stakedym/query.proto",
}

func (m *QueryHostZoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostZoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostZoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHostZoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostZoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostZoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostZone != nil {
		{
			size, err := m.HostZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeArchived {
		i--
		if m.IncludeArchived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegationRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationRecords) > 0 {
		for iNdEx := len(m.DelegationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeArchived {
		i--
		if m.IncludeArchived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingRecords) > 0 {
		for iNdEx := len(m.UnbondingRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.UnbondingRecordId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnbondingRecordId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedemptionRecordResponse != nil {
		{
			size, err := m.RedemptionRecordResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UnbondingRecordId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnbondingRecordId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedemptionRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedemptionRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedemptionRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RedemptionRecordResponses) > 0 {
		for iNdEx := len(m.RedemptionRecordResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedemptionRecordResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySlashRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySlashRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlashRecords) > 0 {
		for iNdEx := len(m.SlashRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SlashRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RedemptionRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedemptionRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedemptionRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingCompletionTimeSeconds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnbondingCompletionTimeSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.RedemptionRecord != nil {
		{
			size, err := m.RedemptionRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryHostZoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHostZoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostZone != nil {
		l = m.HostZone.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegationRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeArchived {
		n += 2
	}
	return n
}

func (m *QueryDelegationRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationRecords) > 0 {
		for _, e := range m.DelegationRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUnbondingRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeArchived {
		n += 2
	}
	return n
}

func (m *QueryUnbondingRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingRecords) > 0 {
		for _, e := range m.UnbondingRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRedemptionRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnbondingRecordId != 0 {
		n += 1 + sovQuery(uint64(m.UnbondingRecordId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedemptionRecordResponse != nil {
		l = m.RedemptionRecordResponse.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UnbondingRecordId != 0 {
		n += 1 + sovQuery(uint64(m.UnbondingRecordId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedemptionRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedemptionRecordResponses) > 0 {
		for _, e := range m.RedemptionRecordResponses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySlashRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySlashRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SlashRecords) > 0 {
		for _, e := range m.SlashRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RedemptionRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedemptionRecord != nil {
		l = m.RedemptionRecord.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UnbondingCompletionTimeSeconds != 0 {
		n += 1 + sovQuery(uint64(m.UnbondingCompletionTimeSeconds))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryHostZoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostZoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostZoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostZoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostZoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostZoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostZone == nil {
				m.HostZone = &HostZone{}
			}
			if err := m.HostZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeArchived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeArchived = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationRecords = append(m.DelegationRecords, DelegationRecord{})
			if err := m.DelegationRecords[len(m.DelegationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeArchived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeArchived = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingRecords = append(m.UnbondingRecords, UnbondingRecord{})
			if err := m.UnbondingRecords[len(m.UnbondingRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingRecordId", wireType)
			}
			m.UnbondingRecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingRecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRecordResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedemptionRecordResponse == nil {
				m.RedemptionRecordResponse = &RedemptionRecordResponse{}
			}
			if err := m.RedemptionRecordResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingRecordId", wireType)
			}
			m.UnbondingRecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingRecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedemptionRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedemptionRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedemptionRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRecordResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedemptionRecordResponses = append(m.RedemptionRecordResponses, RedemptionRecordResponse{})
			if err := m.RedemptionRecordResponses[len(m.RedemptionRecordResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashRecords = append(m.SlashRecords, SlashRecord{})
			if err := m.SlashRecords[len(m.SlashRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedemptionRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedemptionRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedemptionRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedemptionRecord == nil {
				m.RedemptionRecord = &RedemptionRecord{}
			}
			if err := m.RedemptionRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingCompletionTimeSeconds", wireType)
			}
			m.UnbondingCompletionTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingCompletionTimeSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
