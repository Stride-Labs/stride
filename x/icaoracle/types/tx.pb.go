// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icaoracle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Adds a new oracle
type MsgAddOracle struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *MsgAddOracle) Reset()         { *m = MsgAddOracle{} }
func (m *MsgAddOracle) String() string { return proto.CompactTextString(m) }
func (*MsgAddOracle) ProtoMessage()    {}
func (*MsgAddOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{0}
}
func (m *MsgAddOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOracle.Merge(m, src)
}
func (m *MsgAddOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOracle proto.InternalMessageInfo

func (m *MsgAddOracle) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddOracle) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type MsgAddOracleResponse struct {
}

func (m *MsgAddOracleResponse) Reset()         { *m = MsgAddOracleResponse{} }
func (m *MsgAddOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddOracleResponse) ProtoMessage()    {}
func (*MsgAddOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{1}
}
func (m *MsgAddOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOracleResponse.Merge(m, src)
}
func (m *MsgAddOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOracleResponse proto.InternalMessageInfo

// Instantiates the oracle's CW contract
type MsgInstantiateOracle struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OracleChainId  string `protobuf:"bytes,2,opt,name=oracle_chain_id,json=oracleChainId,proto3" json:"oracle_chain_id,omitempty"`
	ContractCodeId uint64 `protobuf:"varint,3,opt,name=contract_code_id,json=contractCodeId,proto3" json:"contract_code_id,omitempty"`
}

func (m *MsgInstantiateOracle) Reset()         { *m = MsgInstantiateOracle{} }
func (m *MsgInstantiateOracle) String() string { return proto.CompactTextString(m) }
func (*MsgInstantiateOracle) ProtoMessage()    {}
func (*MsgInstantiateOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{2}
}
func (m *MsgInstantiateOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstantiateOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstantiateOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstantiateOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstantiateOracle.Merge(m, src)
}
func (m *MsgInstantiateOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstantiateOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstantiateOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstantiateOracle proto.InternalMessageInfo

func (m *MsgInstantiateOracle) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInstantiateOracle) GetOracleChainId() string {
	if m != nil {
		return m.OracleChainId
	}
	return ""
}

func (m *MsgInstantiateOracle) GetContractCodeId() uint64 {
	if m != nil {
		return m.ContractCodeId
	}
	return 0
}

type MsgInstantiateOracleResponse struct {
}

func (m *MsgInstantiateOracleResponse) Reset()         { *m = MsgInstantiateOracleResponse{} }
func (m *MsgInstantiateOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInstantiateOracleResponse) ProtoMessage()    {}
func (*MsgInstantiateOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{3}
}
func (m *MsgInstantiateOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstantiateOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstantiateOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstantiateOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstantiateOracleResponse.Merge(m, src)
}
func (m *MsgInstantiateOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstantiateOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstantiateOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstantiateOracleResponse proto.InternalMessageInfo

// Restore's a closed ICA channel for a given oracle
type MsgRestoreOracleICA struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OracleChainId string `protobuf:"bytes,2,opt,name=oracle_chain_id,json=oracleChainId,proto3" json:"oracle_chain_id,omitempty"`
}

func (m *MsgRestoreOracleICA) Reset()         { *m = MsgRestoreOracleICA{} }
func (m *MsgRestoreOracleICA) String() string { return proto.CompactTextString(m) }
func (*MsgRestoreOracleICA) ProtoMessage()    {}
func (*MsgRestoreOracleICA) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{4}
}
func (m *MsgRestoreOracleICA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRestoreOracleICA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRestoreOracleICA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRestoreOracleICA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRestoreOracleICA.Merge(m, src)
}
func (m *MsgRestoreOracleICA) XXX_Size() int {
	return m.Size()
}
func (m *MsgRestoreOracleICA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRestoreOracleICA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRestoreOracleICA proto.InternalMessageInfo

func (m *MsgRestoreOracleICA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRestoreOracleICA) GetOracleChainId() string {
	if m != nil {
		return m.OracleChainId
	}
	return ""
}

type MsgRestoreOracleICAResponse struct {
}

func (m *MsgRestoreOracleICAResponse) Reset()         { *m = MsgRestoreOracleICAResponse{} }
func (m *MsgRestoreOracleICAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRestoreOracleICAResponse) ProtoMessage()    {}
func (*MsgRestoreOracleICAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{5}
}
func (m *MsgRestoreOracleICAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRestoreOracleICAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRestoreOracleICAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRestoreOracleICAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRestoreOracleICAResponse.Merge(m, src)
}
func (m *MsgRestoreOracleICAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRestoreOracleICAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRestoreOracleICAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRestoreOracleICAResponse proto.InternalMessageInfo

// Toggle's whether an oracle is active and should receive metric updates
type MsgToggleOracle struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority     string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	OracleChainId string `protobuf:"bytes,2,opt,name=oracle_chain_id,json=oracleChainId,proto3" json:"oracle_chain_id,omitempty"`
	Active        bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *MsgToggleOracle) Reset()         { *m = MsgToggleOracle{} }
func (m *MsgToggleOracle) String() string { return proto.CompactTextString(m) }
func (*MsgToggleOracle) ProtoMessage()    {}
func (*MsgToggleOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{6}
}
func (m *MsgToggleOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleOracle.Merge(m, src)
}
func (m *MsgToggleOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleOracle proto.InternalMessageInfo

func (m *MsgToggleOracle) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgToggleOracle) GetOracleChainId() string {
	if m != nil {
		return m.OracleChainId
	}
	return ""
}

func (m *MsgToggleOracle) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type MsgToggleOracleResponse struct {
}

func (m *MsgToggleOracleResponse) Reset()         { *m = MsgToggleOracleResponse{} }
func (m *MsgToggleOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleOracleResponse) ProtoMessage()    {}
func (*MsgToggleOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{7}
}
func (m *MsgToggleOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleOracleResponse.Merge(m, src)
}
func (m *MsgToggleOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleOracleResponse proto.InternalMessageInfo

// Removes an oracle completely
type MsgRemoveOracle struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority     string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	OracleChainId string `protobuf:"bytes,2,opt,name=oracle_chain_id,json=oracleChainId,proto3" json:"oracle_chain_id,omitempty"`
}

func (m *MsgRemoveOracle) Reset()         { *m = MsgRemoveOracle{} }
func (m *MsgRemoveOracle) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveOracle) ProtoMessage()    {}
func (*MsgRemoveOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{8}
}
func (m *MsgRemoveOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveOracle.Merge(m, src)
}
func (m *MsgRemoveOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveOracle proto.InternalMessageInfo

func (m *MsgRemoveOracle) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRemoveOracle) GetOracleChainId() string {
	if m != nil {
		return m.OracleChainId
	}
	return ""
}

type MsgRemoveOracleResponse struct {
}

func (m *MsgRemoveOracleResponse) Reset()         { *m = MsgRemoveOracleResponse{} }
func (m *MsgRemoveOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveOracleResponse) ProtoMessage()    {}
func (*MsgRemoveOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e58a377bb8520d3, []int{9}
}
func (m *MsgRemoveOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveOracleResponse.Merge(m, src)
}
func (m *MsgRemoveOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveOracleResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddOracle)(nil), "stride.icaoracle.MsgAddOracle")
	proto.RegisterType((*MsgAddOracleResponse)(nil), "stride.icaoracle.MsgAddOracleResponse")
	proto.RegisterType((*MsgInstantiateOracle)(nil), "stride.icaoracle.MsgInstantiateOracle")
	proto.RegisterType((*MsgInstantiateOracleResponse)(nil), "stride.icaoracle.MsgInstantiateOracleResponse")
	proto.RegisterType((*MsgRestoreOracleICA)(nil), "stride.icaoracle.MsgRestoreOracleICA")
	proto.RegisterType((*MsgRestoreOracleICAResponse)(nil), "stride.icaoracle.MsgRestoreOracleICAResponse")
	proto.RegisterType((*MsgToggleOracle)(nil), "stride.icaoracle.MsgToggleOracle")
	proto.RegisterType((*MsgToggleOracleResponse)(nil), "stride.icaoracle.MsgToggleOracleResponse")
	proto.RegisterType((*MsgRemoveOracle)(nil), "stride.icaoracle.MsgRemoveOracle")
	proto.RegisterType((*MsgRemoveOracleResponse)(nil), "stride.icaoracle.MsgRemoveOracleResponse")
}

func init() { proto.RegisterFile("stride/icaoracle/tx.proto", fileDescriptor_6e58a377bb8520d3) }

var fileDescriptor_6e58a377bb8520d3 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0x3d, 0x6f, 0xd3, 0x4e,
	0x1c, 0xc7, 0xe3, 0x7f, 0xfe, 0x2a, 0xe4, 0x94, 0xd2, 0xd4, 0x54, 0x6d, 0x62, 0xc0, 0xb4, 0x46,
	0x84, 0x50, 0x29, 0x36, 0x6d, 0xc4, 0x83, 0xb2, 0xa5, 0x99, 0x22, 0x11, 0x21, 0x39, 0x4c, 0x08,
	0x29, 0xba, 0xdc, 0x9d, 0x9c, 0x13, 0x8d, 0x2f, 0xf2, 0x5d, 0xa3, 0x76, 0x65, 0x64, 0x62, 0xe5,
	0x1d, 0x20, 0xa6, 0x0e, 0xbc, 0x00, 0x46, 0xc6, 0x8a, 0x01, 0x31, 0xa2, 0x64, 0xe8, 0xc4, 0x7b,
	0x40, 0x7e, 0x76, 0x1c, 0x97, 0x06, 0x21, 0x58, 0x12, 0xdd, 0xf7, 0xf7, 0xbd, 0xdf, 0x7d, 0x3f,
	0xba, 0x07, 0x83, 0x0a, 0x17, 0x0e, 0xc5, 0xc4, 0xa0, 0x08, 0x32, 0x07, 0xa2, 0x43, 0x62, 0x88,
	0x63, 0x7d, 0xec, 0x30, 0xc1, 0xe4, 0x92, 0x5f, 0xd2, 0xa3, 0x92, 0x52, 0x41, 0x8c, 0x8f, 0x18,
	0xef, 0x7b, 0x75, 0xc3, 0x1f, 0xf8, 0x66, 0x65, 0xcb, 0x1f, 0x19, 0x23, 0x6e, 0x19, 0x93, 0x3d,
	0xf7, 0x2f, 0x28, 0xac, 0xc3, 0x11, 0xb5, 0x99, 0xe1, 0xfd, 0xfa, 0x92, 0xf6, 0x4e, 0x02, 0xc5,
	0x2e, 0xb7, 0x5a, 0x18, 0x3f, 0xf3, 0xfa, 0xca, 0xfb, 0xe0, 0x0a, 0x72, 0x08, 0x14, 0xcc, 0x29,
	0x4b, 0xdb, 0x52, 0xad, 0x70, 0x50, 0xfe, 0xf2, 0xb1, 0xbe, 0x11, 0xf4, 0x6f, 0x61, 0xec, 0x10,
	0xce, 0x7b, 0xc2, 0xa1, 0xb6, 0x65, 0x86, 0x46, 0xf9, 0x0e, 0x58, 0x45, 0xcc, 0xb6, 0x09, 0x12,
	0x94, 0xd9, 0x7d, 0x8a, 0xcb, 0xff, 0xb9, 0x33, 0xcd, 0x62, 0x2c, 0x76, 0x70, 0xf3, 0xc1, 0xeb,
	0xf3, 0xd3, 0xdd, 0x70, 0xca, 0x9b, 0xf3, 0xd3, 0xdd, 0xdb, 0x01, 0xee, 0x71, 0x02, 0x38, 0x19,
	0x45, 0xdb, 0x04, 0x1b, 0xc9, 0xb1, 0x49, 0xf8, 0x98, 0xd9, 0x9c, 0x68, 0x5f, 0x25, 0xaf, 0xd0,
	0xb1, 0xb9, 0x80, 0xb6, 0xa0, 0x50, 0x90, 0x3f, 0xc8, 0x5e, 0x05, 0x6b, 0xfe, 0xda, 0x7d, 0x34,
	0x84, 0x34, 0x91, 0x7e, 0xd5, 0x97, 0xdb, 0xae, 0xda, 0xc1, 0x72, 0x0d, 0x94, 0x10, 0xb3, 0x85,
	0x03, 0x91, 0xe8, 0x23, 0x86, 0x89, 0x6b, 0xcc, 0x6f, 0x4b, 0xb5, 0xff, 0xcd, 0x6b, 0xa1, 0xde,
	0x66, 0x98, 0x74, 0x70, 0xf3, 0x49, 0x1a, 0xf4, 0x5e, 0x36, 0xe8, 0x42, 0x7e, 0x4d, 0x05, 0x37,
	0xb3, 0xf4, 0x08, 0xfc, 0x83, 0x04, 0xae, 0x77, 0xb9, 0x65, 0x12, 0x2e, 0x98, 0x13, 0x14, 0x3b,
	0xed, 0xd6, 0xdf, 0xe4, 0x6e, 0x3e, 0x4e, 0xd3, 0x54, 0xb3, 0x69, 0xd2, 0xa1, 0xb4, 0x5b, 0xe0,
	0x46, 0x86, 0x1c, 0xb1, 0x7c, 0x92, 0xc0, 0x5a, 0x97, 0x5b, 0xcf, 0x99, 0x65, 0x1d, 0x86, 0xfb,
	0xf7, 0x08, 0x14, 0xe0, 0x91, 0x18, 0x32, 0x87, 0x8a, 0x93, 0x4b, 0x49, 0x62, 0xeb, 0xd2, 0x7b,
	0xb8, 0x09, 0x56, 0x20, 0x12, 0x74, 0x42, 0xbc, 0x9d, 0xbb, 0x6a, 0x06, 0xa3, 0xe6, 0x43, 0x97,
	0x31, 0xee, 0xe7, 0x52, 0x6a, 0xd9, 0x94, 0xc9, 0xb8, 0x5a, 0x05, 0x6c, 0xa5, 0xa4, 0x88, 0xee,
	0xbd, 0x4f, 0x67, 0x92, 0x11, 0x9b, 0xfc, 0x23, 0xba, 0xdf, 0xa0, 0x48, 0xc6, 0x0a, 0x28, 0x92,
	0x52, 0x48, 0xb1, 0xff, 0x23, 0x0f, 0xf2, 0x5d, 0x6e, 0xc9, 0x3d, 0x50, 0x88, 0x1f, 0x08, 0x55,
	0x4f, 0xbf, 0x45, 0x7a, 0xf2, 0x96, 0x2a, 0xd5, 0x5f, 0xd7, 0xc3, 0xe6, 0xf2, 0x2b, 0xb0, 0xbe,
	0x78, 0x83, 0xb3, 0x27, 0x2f, 0xf8, 0x14, 0x7d, 0x39, 0x5f, 0xb4, 0xd8, 0x10, 0x94, 0x16, 0x6e,
	0xcd, 0xdd, 0xcc, 0x1e, 0x69, 0x9b, 0x52, 0x5f, 0xca, 0x16, 0xad, 0xf4, 0x12, 0x14, 0xe7, 0xce,
	0xf4, 0x4e, 0xe6, 0xf4, 0xa4, 0x45, 0xb9, 0x7f, 0xa9, 0x25, 0xd9, 0x7d, 0xee, 0x4c, 0xed, 0x5c,
	0x10, 0x2e, 0xb6, 0x5c, 0xd0, 0x3d, 0x6b, 0xbf, 0x0f, 0xba, 0x9f, 0xa7, 0xaa, 0x74, 0x36, 0x55,
	0xa5, 0xef, 0x53, 0x55, 0x7a, 0x3b, 0x53, 0x73, 0x67, 0x33, 0x35, 0xf7, 0x6d, 0xa6, 0xe6, 0x5e,
	0x34, 0x2c, 0x2a, 0x86, 0x47, 0x03, 0x1d, 0xb1, 0x91, 0xd1, 0xf3, 0xda, 0xd5, 0x9f, 0xc2, 0x01,
	0x37, 0x82, 0xf3, 0x35, 0xd9, 0x6b, 0xcc, 0x9d, 0x31, 0x71, 0x32, 0x26, 0x7c, 0xb0, 0xe2, 0x7d,
	0x62, 0x1a, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x68, 0xf5, 0x66, 0xd8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Adds a new oracle given a provided connection
	AddOracle(ctx context.Context, in *MsgAddOracle, opts ...grpc.CallOption) (*MsgAddOracleResponse, error)
	// Instantiates an Oracle CW contract
	InstantiateOracle(ctx context.Context, in *MsgInstantiateOracle, opts ...grpc.CallOption) (*MsgInstantiateOracleResponse, error)
	// Restores the oracle ICA channel after a closure
	RestoreOracleICA(ctx context.Context, in *MsgRestoreOracleICA, opts ...grpc.CallOption) (*MsgRestoreOracleICAResponse, error)
	// Toggle's whether an oracle is active and should receive metric updates
	ToggleOracle(ctx context.Context, in *MsgToggleOracle, opts ...grpc.CallOption) (*MsgToggleOracleResponse, error)
	// Removes an oracle completely
	RemoveOracle(ctx context.Context, in *MsgRemoveOracle, opts ...grpc.CallOption) (*MsgRemoveOracleResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddOracle(ctx context.Context, in *MsgAddOracle, opts ...grpc.CallOption) (*MsgAddOracleResponse, error) {
	out := new(MsgAddOracleResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Msg/AddOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InstantiateOracle(ctx context.Context, in *MsgInstantiateOracle, opts ...grpc.CallOption) (*MsgInstantiateOracleResponse, error) {
	out := new(MsgInstantiateOracleResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Msg/InstantiateOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RestoreOracleICA(ctx context.Context, in *MsgRestoreOracleICA, opts ...grpc.CallOption) (*MsgRestoreOracleICAResponse, error) {
	out := new(MsgRestoreOracleICAResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Msg/RestoreOracleICA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleOracle(ctx context.Context, in *MsgToggleOracle, opts ...grpc.CallOption) (*MsgToggleOracleResponse, error) {
	out := new(MsgToggleOracleResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Msg/ToggleOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveOracle(ctx context.Context, in *MsgRemoveOracle, opts ...grpc.CallOption) (*MsgRemoveOracleResponse, error) {
	out := new(MsgRemoveOracleResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Msg/RemoveOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Adds a new oracle given a provided connection
	AddOracle(context.Context, *MsgAddOracle) (*MsgAddOracleResponse, error)
	// Instantiates an Oracle CW contract
	InstantiateOracle(context.Context, *MsgInstantiateOracle) (*MsgInstantiateOracleResponse, error)
	// Restores the oracle ICA channel after a closure
	RestoreOracleICA(context.Context, *MsgRestoreOracleICA) (*MsgRestoreOracleICAResponse, error)
	// Toggle's whether an oracle is active and should receive metric updates
	ToggleOracle(context.Context, *MsgToggleOracle) (*MsgToggleOracleResponse, error)
	// Removes an oracle completely
	RemoveOracle(context.Context, *MsgRemoveOracle) (*MsgRemoveOracleResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddOracle(ctx context.Context, req *MsgAddOracle) (*MsgAddOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOracle not implemented")
}
func (*UnimplementedMsgServer) InstantiateOracle(ctx context.Context, req *MsgInstantiateOracle) (*MsgInstantiateOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantiateOracle not implemented")
}
func (*UnimplementedMsgServer) RestoreOracleICA(ctx context.Context, req *MsgRestoreOracleICA) (*MsgRestoreOracleICAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreOracleICA not implemented")
}
func (*UnimplementedMsgServer) ToggleOracle(ctx context.Context, req *MsgToggleOracle) (*MsgToggleOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleOracle not implemented")
}
func (*UnimplementedMsgServer) RemoveOracle(ctx context.Context, req *MsgRemoveOracle) (*MsgRemoveOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOracle not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Msg/AddOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddOracle(ctx, req.(*MsgAddOracle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InstantiateOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInstantiateOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InstantiateOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Msg/InstantiateOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InstantiateOracle(ctx, req.(*MsgInstantiateOracle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RestoreOracleICA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRestoreOracleICA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RestoreOracleICA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Msg/RestoreOracleICA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RestoreOracleICA(ctx, req.(*MsgRestoreOracleICA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Msg/ToggleOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleOracle(ctx, req.(*MsgToggleOracle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Msg/RemoveOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveOracle(ctx, req.(*MsgRemoveOracle))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.icaoracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOracle",
			Handler:    _Msg_AddOracle_Handler,
		},
		{
			MethodName: "InstantiateOracle",
			Handler:    _Msg_InstantiateOracle_Handler,
		},
		{
			MethodName: "RestoreOracleICA",
			Handler:    _Msg_RestoreOracleICA_Handler,
		},
		{
			MethodName: "ToggleOracle",
			Handler:    _Msg_ToggleOracle_Handler,
		},
		{
			MethodName: "RemoveOracle",
			Handler:    _Msg_RemoveOracle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/icaoracle/tx.proto",
}

func (m *MsgAddOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInstantiateOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstantiateOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstantiateOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractCodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractCodeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OracleChainId) > 0 {
		i -= len(m.OracleChainId)
		copy(dAtA[i:], m.OracleChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInstantiateOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstantiateOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstantiateOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRestoreOracleICA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRestoreOracleICA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRestoreOracleICA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleChainId) > 0 {
		i -= len(m.OracleChainId)
		copy(dAtA[i:], m.OracleChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRestoreOracleICAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRestoreOracleICAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRestoreOracleICAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OracleChainId) > 0 {
		i -= len(m.OracleChainId)
		copy(dAtA[i:], m.OracleChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleChainId) > 0 {
		i -= len(m.OracleChainId)
		copy(dAtA[i:], m.OracleChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInstantiateOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractCodeId != 0 {
		n += 1 + sovTx(uint64(m.ContractCodeId))
	}
	return n
}

func (m *MsgInstantiateOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRestoreOracleICA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRestoreOracleICAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *MsgToggleOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInstantiateOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstantiateOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstantiateOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCodeId", wireType)
			}
			m.ContractCodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractCodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInstantiateOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstantiateOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstantiateOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRestoreOracleICA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRestoreOracleICA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRestoreOracleICA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRestoreOracleICAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRestoreOracleICAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRestoreOracleICAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
