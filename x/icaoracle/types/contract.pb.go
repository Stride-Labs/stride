// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icaoracle/contract.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InstanitateOracleContract is the contract-specific instantiate message
type MsgInstantiateOracleContract struct {
	AdminAddress      string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	TransferChannelId string `protobuf:"bytes,2,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
}

func (m *MsgInstantiateOracleContract) Reset()         { *m = MsgInstantiateOracleContract{} }
func (m *MsgInstantiateOracleContract) String() string { return proto.CompactTextString(m) }
func (*MsgInstantiateOracleContract) ProtoMessage()    {}
func (*MsgInstantiateOracleContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf036e49b48ee03, []int{0}
}
func (m *MsgInstantiateOracleContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstantiateOracleContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstantiateOracleContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstantiateOracleContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstantiateOracleContract.Merge(m, src)
}
func (m *MsgInstantiateOracleContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstantiateOracleContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstantiateOracleContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstantiateOracleContract proto.InternalMessageInfo

func (m *MsgInstantiateOracleContract) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgInstantiateOracleContract) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

// ExecuteContractPostMetric is the contract-specific metric update message
type MsgExecuteContractPostMetric struct {
	PostMetric *MsgPostMetric `protobuf:"bytes,1,opt,name=post_metric,json=postMetric,proto3" json:"post_metric,omitempty"`
}

func (m *MsgExecuteContractPostMetric) Reset()         { *m = MsgExecuteContractPostMetric{} }
func (m *MsgExecuteContractPostMetric) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteContractPostMetric) ProtoMessage()    {}
func (*MsgExecuteContractPostMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf036e49b48ee03, []int{1}
}
func (m *MsgExecuteContractPostMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteContractPostMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteContractPostMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteContractPostMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteContractPostMetric.Merge(m, src)
}
func (m *MsgExecuteContractPostMetric) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteContractPostMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteContractPostMetric.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteContractPostMetric proto.InternalMessageInfo

func (m *MsgExecuteContractPostMetric) GetPostMetric() *MsgPostMetric {
	if m != nil {
		return m.PostMetric
	}
	return nil
}

// Body of PostMetric contract message
type MsgPostMetric struct {
	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	MetricType  string `protobuf:"bytes,3,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	UpdateTime  int64  `protobuf:"varint,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	BlockHeight int64  `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Attributes  string `protobuf:"bytes,6,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *MsgPostMetric) Reset()         { *m = MsgPostMetric{} }
func (m *MsgPostMetric) String() string { return proto.CompactTextString(m) }
func (*MsgPostMetric) ProtoMessage()    {}
func (*MsgPostMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf036e49b48ee03, []int{2}
}
func (m *MsgPostMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostMetric.Merge(m, src)
}
func (m *MsgPostMetric) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostMetric.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostMetric proto.InternalMessageInfo

func (m *MsgPostMetric) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgPostMetric) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MsgPostMetric) GetMetricType() string {
	if m != nil {
		return m.MetricType
	}
	return ""
}

func (m *MsgPostMetric) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *MsgPostMetric) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgPostMetric) GetAttributes() string {
	if m != nil {
		return m.Attributes
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgInstantiateOracleContract)(nil), "stride.icaoracle.MsgInstantiateOracleContract")
	proto.RegisterType((*MsgExecuteContractPostMetric)(nil), "stride.icaoracle.MsgExecuteContractPostMetric")
	proto.RegisterType((*MsgPostMetric)(nil), "stride.icaoracle.MsgPostMetric")
}

func init() { proto.RegisterFile("stride/icaoracle/contract.proto", fileDescriptor_8bf036e49b48ee03) }

var fileDescriptor_8bf036e49b48ee03 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0xa9, 0x08, 0x89, 0x53, 0x48, 0x70, 0x74, 0xd1, 0x85, 0x29, 0x88, 0x1b, 0x36, 0xb6,
	0x51, 0xe2, 0x5e, 0x25, 0x26, 0x92, 0xd8, 0x68, 0x90, 0x95, 0x9b, 0x3a, 0x9d, 0x1e, 0xdb, 0x09,
	0x6d, 0xa7, 0x99, 0x39, 0x25, 0xf0, 0x16, 0x3e, 0x90, 0x0f, 0xe0, 0x92, 0xa5, 0x4b, 0x03, 0x2f,
	0x72, 0xc3, 0x4c, 0x2f, 0xdc, 0x7b, 0x77, 0xe7, 0x7c, 0xff, 0x7f, 0xf2, 0x9f, 0x99, 0x43, 0xc6,
	0x1a, 0x95, 0x48, 0x21, 0x14, 0x9c, 0x49, 0xc5, 0x78, 0x01, 0x21, 0x97, 0x15, 0x2a, 0xc6, 0x31,
	0xa8, 0x95, 0x44, 0x49, 0x47, 0xd6, 0x10, 0x5c, 0x0c, 0x53, 0x4d, 0x5e, 0x44, 0x3a, 0x5b, 0x56,
	0x1a, 0x59, 0x85, 0x82, 0x21, 0x7c, 0x35, 0x7c, 0xd1, 0xce, 0xd1, 0x57, 0x64, 0xc8, 0xd2, 0x52,
	0x54, 0x31, 0x4b, 0x53, 0x05, 0x5a, 0x7b, 0xce, 0xc4, 0x99, 0x3d, 0x59, 0x0d, 0x0c, 0xfc, 0x60,
	0x19, 0x0d, 0xc8, 0x33, 0x54, 0xac, 0xd2, 0xbf, 0x40, 0xc5, 0x3c, 0x67, 0x55, 0x05, 0x45, 0x2c,
	0x52, 0xef, 0x91, 0xb1, 0x3e, 0xbd, 0x95, 0x16, 0x56, 0x59, 0xa6, 0xd3, 0x9f, 0x26, 0xf4, 0xd3,
	0x0e, 0x78, 0x83, 0x97, 0xa8, 0x6f, 0x52, 0x63, 0x04, 0xa8, 0x04, 0xa7, 0xef, 0x89, 0x5b, 0x4b,
	0x8d, 0x71, 0x69, 0x5a, 0x13, 0xe9, 0xbe, 0x1d, 0x07, 0x0f, 0x97, 0x0f, 0x22, 0x9d, 0x5d, 0xa7,
	0x56, 0xa4, 0xbe, 0xd4, 0xd3, 0x3f, 0x0e, 0x19, 0xde, 0x53, 0xe9, 0x88, 0x74, 0x37, 0xb0, 0x6f,
	0xd7, 0x3f, 0x97, 0xf4, 0x39, 0xe9, 0x6d, 0x59, 0xd1, 0x40, 0xbb, 0xa7, 0x6d, 0xe8, 0x98, 0xb8,
	0x36, 0x36, 0xc6, 0x7d, 0x0d, 0x5e, 0xd7, 0x68, 0xc4, 0xa2, 0xf5, 0xbe, 0x36, 0x86, 0xa6, 0x4e,
	0x19, 0x42, 0x8c, 0xa2, 0x04, 0xef, 0xf1, 0xc4, 0x99, 0x75, 0x57, 0xc4, 0xa2, 0xb5, 0x28, 0x81,
	0xbe, 0x24, 0x83, 0xa4, 0x90, 0x7c, 0x13, 0xe7, 0x20, 0xb2, 0x1c, 0xbd, 0x9e, 0x71, 0xb8, 0x86,
	0x7d, 0x36, 0x88, 0xfa, 0x84, 0x30, 0x44, 0x25, 0x92, 0x06, 0x41, 0x7b, 0x7d, 0x9b, 0x71, 0x25,
	0x1f, 0xa3, 0xbf, 0x47, 0xdf, 0x39, 0x1c, 0x7d, 0xe7, 0xff, 0xd1, 0x77, 0x7e, 0x9f, 0xfc, 0xce,
	0xe1, 0xe4, 0x77, 0xfe, 0x9d, 0xfc, 0xce, 0x8f, 0x79, 0x26, 0x30, 0x6f, 0x92, 0x80, 0xcb, 0x32,
	0xfc, 0x6e, 0xfe, 0xe3, 0xf5, 0x17, 0x96, 0xe8, 0xb0, 0xbd, 0xfc, 0xf6, 0xcd, 0xbb, 0x70, 0x77,
	0xe7, 0xfe, 0xe7, 0x37, 0xe8, 0xa4, 0x6f, 0xae, 0x3f, 0xbf, 0x09, 0x00, 0x00, 0xff, 0xff, 0x96,
	0xb2, 0xe9, 0xb8, 0x20, 0x02, 0x00, 0x00,
}

func (m *MsgInstantiateOracleContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstantiateOracleContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstantiateOracleContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintContract(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintContract(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteContractPostMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteContractPostMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteContractPostMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PostMetric != nil {
		{
			size, err := m.PostMetric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		i -= len(m.Attributes)
		copy(dAtA[i:], m.Attributes)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Attributes)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.UpdateTime != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MetricType) > 0 {
		i -= len(m.MetricType)
		copy(dAtA[i:], m.MetricType)
		i = encodeVarintContract(dAtA, i, uint64(len(m.MetricType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInstantiateOracleContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *MsgExecuteContractPostMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PostMetric != nil {
		l = m.PostMetric.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *MsgPostMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.MetricType)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovContract(uint64(m.UpdateTime))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovContract(uint64(m.BlockHeight))
	}
	l = len(m.Attributes)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInstantiateOracleContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstantiateOracleContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstantiateOracleContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteContractPostMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteContractPostMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteContractPostMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostMetric == nil {
				m.PostMetric = &MsgPostMetric{}
			}
			if err := m.PostMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
