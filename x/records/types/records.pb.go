// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/records/records.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DepositRecord_Status int32

const (
	// in transfer queue to be sent to the delegation ICA
	DepositRecord_TRANSFER_QUEUE DepositRecord_Status = 0
	// transfer in progress (IBC packet sent, ack not received)
	DepositRecord_TRANSFER_IN_PROGRESS DepositRecord_Status = 2
	// in staking queue on delegation ICA
	DepositRecord_DELEGATION_QUEUE DepositRecord_Status = 1
	// staking in progress (ICA packet sent, ack not received)
	DepositRecord_DELEGATION_IN_PROGRESS DepositRecord_Status = 3
)

var DepositRecord_Status_name = map[int32]string{
	0: "TRANSFER_QUEUE",
	2: "TRANSFER_IN_PROGRESS",
	1: "DELEGATION_QUEUE",
	3: "DELEGATION_IN_PROGRESS",
}

var DepositRecord_Status_value = map[string]int32{
	"TRANSFER_QUEUE":         0,
	"TRANSFER_IN_PROGRESS":   2,
	"DELEGATION_QUEUE":       1,
	"DELEGATION_IN_PROGRESS": 3,
}

func (x DepositRecord_Status) String() string {
	return proto.EnumName(DepositRecord_Status_name, int32(x))
}

func (DepositRecord_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{1, 0}
}

type DepositRecord_Source int32

const (
	DepositRecord_STRIDE         DepositRecord_Source = 0
	DepositRecord_WITHDRAWAL_ICA DepositRecord_Source = 1
)

var DepositRecord_Source_name = map[int32]string{
	0: "STRIDE",
	1: "WITHDRAWAL_ICA",
}

var DepositRecord_Source_value = map[string]int32{
	"STRIDE":         0,
	"WITHDRAWAL_ICA": 1,
}

func (x DepositRecord_Source) String() string {
	return proto.EnumName(DepositRecord_Source_name, int32(x))
}

func (DepositRecord_Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{1, 1}
}

type HostZoneUnbonding_Status int32

const (
	// tokens bonded on delegate account
	HostZoneUnbonding_UNBONDING_QUEUE       HostZoneUnbonding_Status = 0
	HostZoneUnbonding_UNBONDING_IN_PROGRESS HostZoneUnbonding_Status = 3
	// unbonding completed on delegate account
	HostZoneUnbonding_EXIT_TRANSFER_QUEUE       HostZoneUnbonding_Status = 1
	HostZoneUnbonding_EXIT_TRANSFER_IN_PROGRESS HostZoneUnbonding_Status = 4
	// transfer success
	HostZoneUnbonding_CLAIMABLE HostZoneUnbonding_Status = 2
)

var HostZoneUnbonding_Status_name = map[int32]string{
	0: "UNBONDING_QUEUE",
	3: "UNBONDING_IN_PROGRESS",
	1: "EXIT_TRANSFER_QUEUE",
	4: "EXIT_TRANSFER_IN_PROGRESS",
	2: "CLAIMABLE",
}

var HostZoneUnbonding_Status_value = map[string]int32{
	"UNBONDING_QUEUE":           0,
	"UNBONDING_IN_PROGRESS":     3,
	"EXIT_TRANSFER_QUEUE":       1,
	"EXIT_TRANSFER_IN_PROGRESS": 4,
	"CLAIMABLE":                 2,
}

func (x HostZoneUnbonding_Status) String() string {
	return proto.EnumName(HostZoneUnbonding_Status_name, int32(x))
}

func (HostZoneUnbonding_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{2, 0}
}

type LSMTokenDeposit_Status int32

const (
	LSMTokenDeposit_DEPOSIT_PENDING            LSMTokenDeposit_Status = 0
	LSMTokenDeposit_TRANSFER_QUEUE             LSMTokenDeposit_Status = 1
	LSMTokenDeposit_TRANSFER_IN_PROGRESS       LSMTokenDeposit_Status = 2
	LSMTokenDeposit_TRANSFER_FAILED            LSMTokenDeposit_Status = 3
	LSMTokenDeposit_DETOKENIZATION_QUEUE       LSMTokenDeposit_Status = 4
	LSMTokenDeposit_DETOKENIZATION_IN_PROGRESS LSMTokenDeposit_Status = 5
	LSMTokenDeposit_DETOKENIZATION_FAILED      LSMTokenDeposit_Status = 6
)

var LSMTokenDeposit_Status_name = map[int32]string{
	0: "DEPOSIT_PENDING",
	1: "TRANSFER_QUEUE",
	2: "TRANSFER_IN_PROGRESS",
	3: "TRANSFER_FAILED",
	4: "DETOKENIZATION_QUEUE",
	5: "DETOKENIZATION_IN_PROGRESS",
	6: "DETOKENIZATION_FAILED",
}

var LSMTokenDeposit_Status_value = map[string]int32{
	"DEPOSIT_PENDING":            0,
	"TRANSFER_QUEUE":             1,
	"TRANSFER_IN_PROGRESS":       2,
	"TRANSFER_FAILED":            3,
	"DETOKENIZATION_QUEUE":       4,
	"DETOKENIZATION_IN_PROGRESS": 5,
	"DETOKENIZATION_FAILED":      6,
}

func (x LSMTokenDeposit_Status) String() string {
	return proto.EnumName(LSMTokenDeposit_Status_name, int32(x))
}

func (LSMTokenDeposit_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{4, 0}
}

type UserRedemptionRecord struct {
	Id             string                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender         string                                 `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver       string                                 `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Denom          string                                 `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	HostZoneId     string                                 `protobuf:"bytes,6,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
	EpochNumber    uint64                                 `protobuf:"varint,7,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	ClaimIsPending bool                                   `protobuf:"varint,8,opt,name=claim_is_pending,json=claimIsPending,proto3" json:"claim_is_pending,omitempty"`
}

func (m *UserRedemptionRecord) Reset()         { *m = UserRedemptionRecord{} }
func (m *UserRedemptionRecord) String() string { return proto.CompactTextString(m) }
func (*UserRedemptionRecord) ProtoMessage()    {}
func (*UserRedemptionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{0}
}
func (m *UserRedemptionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRedemptionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRedemptionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRedemptionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRedemptionRecord.Merge(m, src)
}
func (m *UserRedemptionRecord) XXX_Size() int {
	return m.Size()
}
func (m *UserRedemptionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRedemptionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UserRedemptionRecord proto.InternalMessageInfo

func (m *UserRedemptionRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserRedemptionRecord) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *UserRedemptionRecord) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *UserRedemptionRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UserRedemptionRecord) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func (m *UserRedemptionRecord) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *UserRedemptionRecord) GetClaimIsPending() bool {
	if m != nil {
		return m.ClaimIsPending
	}
	return false
}

type DepositRecord struct {
	Id                 uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Denom              string                                 `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	HostZoneId         string                                 `protobuf:"bytes,4,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
	Status             DepositRecord_Status                   `protobuf:"varint,6,opt,name=status,proto3,enum=stride.records.DepositRecord_Status" json:"status,omitempty"`
	DepositEpochNumber uint64                                 `protobuf:"varint,7,opt,name=deposit_epoch_number,json=depositEpochNumber,proto3" json:"deposit_epoch_number,omitempty"`
	Source             DepositRecord_Source                   `protobuf:"varint,8,opt,name=source,proto3,enum=stride.records.DepositRecord_Source" json:"source,omitempty"`
}

func (m *DepositRecord) Reset()         { *m = DepositRecord{} }
func (m *DepositRecord) String() string { return proto.CompactTextString(m) }
func (*DepositRecord) ProtoMessage()    {}
func (*DepositRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{1}
}
func (m *DepositRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRecord.Merge(m, src)
}
func (m *DepositRecord) XXX_Size() int {
	return m.Size()
}
func (m *DepositRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRecord proto.InternalMessageInfo

func (m *DepositRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DepositRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DepositRecord) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func (m *DepositRecord) GetStatus() DepositRecord_Status {
	if m != nil {
		return m.Status
	}
	return DepositRecord_TRANSFER_QUEUE
}

func (m *DepositRecord) GetDepositEpochNumber() uint64 {
	if m != nil {
		return m.DepositEpochNumber
	}
	return 0
}

func (m *DepositRecord) GetSource() DepositRecord_Source {
	if m != nil {
		return m.Source
	}
	return DepositRecord_STRIDE
}

type HostZoneUnbonding struct {
	StTokenAmount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=st_token_amount,json=stTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"st_token_amount"`
	NativeTokenAmount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=native_token_amount,json=nativeTokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"native_token_amount"`
	Denom                 string                                 `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	HostZoneId            string                                 `protobuf:"bytes,4,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
	UnbondingTime         uint64                                 `protobuf:"varint,5,opt,name=unbonding_time,json=unbondingTime,proto3" json:"unbonding_time,omitempty"`
	Status                HostZoneUnbonding_Status               `protobuf:"varint,6,opt,name=status,proto3,enum=stride.records.HostZoneUnbonding_Status" json:"status,omitempty"`
	UserRedemptionRecords []string                               `protobuf:"bytes,7,rep,name=user_redemption_records,json=userRedemptionRecords,proto3" json:"user_redemption_records,omitempty"`
}

func (m *HostZoneUnbonding) Reset()         { *m = HostZoneUnbonding{} }
func (m *HostZoneUnbonding) String() string { return proto.CompactTextString(m) }
func (*HostZoneUnbonding) ProtoMessage()    {}
func (*HostZoneUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{2}
}
func (m *HostZoneUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostZoneUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostZoneUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostZoneUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostZoneUnbonding.Merge(m, src)
}
func (m *HostZoneUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *HostZoneUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_HostZoneUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_HostZoneUnbonding proto.InternalMessageInfo

func (m *HostZoneUnbonding) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *HostZoneUnbonding) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func (m *HostZoneUnbonding) GetUnbondingTime() uint64 {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *HostZoneUnbonding) GetStatus() HostZoneUnbonding_Status {
	if m != nil {
		return m.Status
	}
	return HostZoneUnbonding_UNBONDING_QUEUE
}

func (m *HostZoneUnbonding) GetUserRedemptionRecords() []string {
	if m != nil {
		return m.UserRedemptionRecords
	}
	return nil
}

type EpochUnbondingRecord struct {
	EpochNumber        uint64               `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	HostZoneUnbondings []*HostZoneUnbonding `protobuf:"bytes,3,rep,name=host_zone_unbondings,json=hostZoneUnbondings,proto3" json:"host_zone_unbondings,omitempty"`
}

func (m *EpochUnbondingRecord) Reset()         { *m = EpochUnbondingRecord{} }
func (m *EpochUnbondingRecord) String() string { return proto.CompactTextString(m) }
func (*EpochUnbondingRecord) ProtoMessage()    {}
func (*EpochUnbondingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{3}
}
func (m *EpochUnbondingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochUnbondingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochUnbondingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochUnbondingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochUnbondingRecord.Merge(m, src)
}
func (m *EpochUnbondingRecord) XXX_Size() int {
	return m.Size()
}
func (m *EpochUnbondingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochUnbondingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EpochUnbondingRecord proto.InternalMessageInfo

func (m *EpochUnbondingRecord) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochUnbondingRecord) GetHostZoneUnbondings() []*HostZoneUnbonding {
	if m != nil {
		return m.HostZoneUnbondings
	}
	return nil
}

type LSMTokenDeposit struct {
	DepositId        string                                 `protobuf:"bytes,1,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	ChainId          string                                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Denom            string                                 `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	IbcDenom         string                                 `protobuf:"bytes,4,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
	StakerAddress    string                                 `protobuf:"bytes,5,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	ValidatorAddress string                                 `protobuf:"bytes,6,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	StToken          types.Coin                             `protobuf:"bytes,8,opt,name=st_token,json=stToken,proto3" json:"st_token"`
	Status           LSMTokenDeposit_Status                 `protobuf:"varint,9,opt,name=status,proto3,enum=stride.records.LSMTokenDeposit_Status" json:"status,omitempty"`
}

func (m *LSMTokenDeposit) Reset()         { *m = LSMTokenDeposit{} }
func (m *LSMTokenDeposit) String() string { return proto.CompactTextString(m) }
func (*LSMTokenDeposit) ProtoMessage()    {}
func (*LSMTokenDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_295ee594cc85d8ca, []int{4}
}
func (m *LSMTokenDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LSMTokenDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LSMTokenDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LSMTokenDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LSMTokenDeposit.Merge(m, src)
}
func (m *LSMTokenDeposit) XXX_Size() int {
	return m.Size()
}
func (m *LSMTokenDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_LSMTokenDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_LSMTokenDeposit proto.InternalMessageInfo

func (m *LSMTokenDeposit) GetDepositId() string {
	if m != nil {
		return m.DepositId
	}
	return ""
}

func (m *LSMTokenDeposit) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *LSMTokenDeposit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LSMTokenDeposit) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *LSMTokenDeposit) GetStakerAddress() string {
	if m != nil {
		return m.StakerAddress
	}
	return ""
}

func (m *LSMTokenDeposit) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *LSMTokenDeposit) GetStToken() types.Coin {
	if m != nil {
		return m.StToken
	}
	return types.Coin{}
}

func (m *LSMTokenDeposit) GetStatus() LSMTokenDeposit_Status {
	if m != nil {
		return m.Status
	}
	return LSMTokenDeposit_DEPOSIT_PENDING
}

func init() {
	proto.RegisterEnum("stride.records.DepositRecord_Status", DepositRecord_Status_name, DepositRecord_Status_value)
	proto.RegisterEnum("stride.records.DepositRecord_Source", DepositRecord_Source_name, DepositRecord_Source_value)
	proto.RegisterEnum("stride.records.HostZoneUnbonding_Status", HostZoneUnbonding_Status_name, HostZoneUnbonding_Status_value)
	proto.RegisterEnum("stride.records.LSMTokenDeposit_Status", LSMTokenDeposit_Status_name, LSMTokenDeposit_Status_value)
	proto.RegisterType((*UserRedemptionRecord)(nil), "stride.records.UserRedemptionRecord")
	proto.RegisterType((*DepositRecord)(nil), "stride.records.DepositRecord")
	proto.RegisterType((*HostZoneUnbonding)(nil), "stride.records.HostZoneUnbonding")
	proto.RegisterType((*EpochUnbondingRecord)(nil), "stride.records.EpochUnbondingRecord")
	proto.RegisterType((*LSMTokenDeposit)(nil), "stride.records.LSMTokenDeposit")
}

func init() { proto.RegisterFile("stride/records/records.proto", fileDescriptor_295ee594cc85d8ca) }

var fileDescriptor_295ee594cc85d8ca = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xc1, 0x8e, 0xda, 0x46,
	0x18, 0x5e, 0x83, 0xd7, 0xc0, 0x9f, 0xc0, 0x7a, 0x67, 0x49, 0xe2, 0xa5, 0x0d, 0x21, 0xa8, 0x89,
	0x90, 0xaa, 0x98, 0xee, 0x56, 0xed, 0xa1, 0xaa, 0xaa, 0x9a, 0xc5, 0xbb, 0x71, 0x42, 0x60, 0x6b,
	0xa0, 0xa9, 0xf6, 0x50, 0xcb, 0xd8, 0xa3, 0x65, 0xb4, 0xc1, 0x83, 0x3c, 0x06, 0xb5, 0xbd, 0xf4,
	0x15, 0x7a, 0xe8, 0x2b, 0x54, 0x7d, 0x82, 0xbe, 0x43, 0x4e, 0x55, 0x8e, 0x55, 0x0f, 0x51, 0xb5,
	0x7b, 0xe8, 0x6b, 0x54, 0x1e, 0x1b, 0x03, 0x26, 0x69, 0xa4, 0x6d, 0x4f, 0x30, 0xdf, 0x37, 0xf3,
	0x8f, 0xe7, 0x9b, 0xef, 0xff, 0x6c, 0x78, 0x9f, 0x05, 0x3e, 0x71, 0x71, 0xd3, 0xc7, 0x0e, 0xf5,
	0x5d, 0xb6, 0xf8, 0x55, 0xa7, 0x3e, 0x0d, 0x28, 0x2a, 0x45, 0xac, 0x1a, 0xa3, 0x95, 0xaa, 0x43,
	0xd9, 0x84, 0xb2, 0xe6, 0xc8, 0x66, 0xb8, 0x39, 0x3f, 0x18, 0xe1, 0xc0, 0x3e, 0x68, 0x3a, 0x94,
	0x78, 0xd1, 0xfc, 0x4a, 0xf9, 0x9c, 0x9e, 0x53, 0xfe, 0xb7, 0x19, 0xfe, 0x8b, 0xd0, 0xfa, 0xaf,
	0x19, 0x28, 0x0f, 0x19, 0xf6, 0x4d, 0xec, 0xe2, 0xc9, 0x34, 0x20, 0xd4, 0x33, 0x79, 0x3d, 0x54,
	0x82, 0x0c, 0x71, 0x15, 0xa1, 0x26, 0x34, 0x0a, 0x66, 0x86, 0xb8, 0xe8, 0x36, 0x48, 0x0c, 0x7b,
	0x2e, 0xf6, 0x95, 0x0c, 0xc7, 0xe2, 0x11, 0xaa, 0x40, 0xde, 0xc7, 0x0e, 0x26, 0x73, 0xec, 0x2b,
	0x59, 0xce, 0x24, 0x63, 0x74, 0x0c, 0x92, 0x3d, 0xa1, 0x33, 0x2f, 0x50, 0xc4, 0x90, 0x69, 0xa9,
	0x2f, 0x5f, 0xdf, 0xdb, 0xfa, 0xf3, 0xf5, 0xbd, 0x87, 0xe7, 0x24, 0x18, 0xcf, 0x46, 0xaa, 0x43,
	0x27, 0xcd, 0xf8, 0xa9, 0xa3, 0x9f, 0x47, 0xcc, 0xbd, 0x68, 0x06, 0xdf, 0x4f, 0x31, 0x53, 0x0d,
	0x2f, 0x30, 0xe3, 0xd5, 0xa8, 0x0c, 0xdb, 0x2e, 0xf6, 0xe8, 0x44, 0xd9, 0xe6, 0x1b, 0x44, 0x03,
	0x54, 0x83, 0x9b, 0x63, 0xca, 0x02, 0xeb, 0x07, 0xea, 0x61, 0x8b, 0xb8, 0x8a, 0xc4, 0x49, 0x08,
	0xb1, 0x33, 0xea, 0x61, 0xc3, 0x45, 0xf7, 0xe1, 0x26, 0x9e, 0x52, 0x67, 0x6c, 0x79, 0xb3, 0xc9,
	0x08, 0xfb, 0x4a, 0xae, 0x26, 0x34, 0x44, 0xf3, 0x06, 0xc7, 0xba, 0x1c, 0x42, 0x0d, 0x90, 0x9d,
	0x17, 0x36, 0x99, 0x58, 0x84, 0x59, 0x53, 0xec, 0xb9, 0xc4, 0x3b, 0x57, 0xf2, 0x35, 0xa1, 0x91,
	0x37, 0x4b, 0x1c, 0x37, 0xd8, 0x69, 0x84, 0xd6, 0xff, 0xce, 0x42, 0xb1, 0x8d, 0xa7, 0x94, 0x91,
	0x60, 0x43, 0x22, 0x91, 0x4b, 0xb4, 0x3c, 0x6e, 0xe6, 0xff, 0x39, 0x6e, 0xf6, 0xdf, 0x8e, 0x2b,
	0x6e, 0x1c, 0xf7, 0x73, 0x90, 0x58, 0x60, 0x07, 0x33, 0xc6, 0xa5, 0x28, 0x1d, 0x7e, 0xa0, 0xae,
	0x5b, 0x44, 0x5d, 0x7b, 0x7c, 0xb5, 0xcf, 0xe7, 0x9a, 0xf1, 0x1a, 0xf4, 0x11, 0x94, 0xdd, 0x88,
	0xb7, 0xde, 0x20, 0x1a, 0x8a, 0x39, 0x7d, 0x45, 0xbb, 0x70, 0x3f, 0x3a, 0xf3, 0x1d, 0xcc, 0x15,
	0x7b, 0xf7, 0x7e, 0x7c, 0xae, 0x19, 0xaf, 0xa9, 0x8f, 0x41, 0x8a, 0x9e, 0x00, 0x21, 0x28, 0x0d,
	0x4c, 0xad, 0xdb, 0x3f, 0xd6, 0x4d, 0xeb, 0xab, 0xa1, 0x3e, 0xd4, 0xe5, 0x2d, 0xa4, 0x40, 0x39,
	0xc1, 0x8c, 0xae, 0x75, 0x6a, 0xf6, 0x4e, 0x4c, 0xbd, 0xdf, 0x97, 0x33, 0xa8, 0x0c, 0x72, 0x5b,
	0xef, 0xe8, 0x27, 0xda, 0xc0, 0xe8, 0x75, 0xe3, 0xf9, 0x02, 0xaa, 0xc0, 0xed, 0x15, 0x74, 0x75,
	0x45, 0xb6, 0xde, 0x00, 0x29, 0xda, 0x1b, 0x01, 0x48, 0xfd, 0x81, 0x69, 0xb4, 0xc3, 0x1d, 0x10,
	0x94, 0x9e, 0x1b, 0x83, 0xc7, 0x6d, 0x53, 0x7b, 0xae, 0x75, 0x2c, 0xe3, 0x48, 0x93, 0x85, 0x27,
	0x62, 0x7e, 0x5b, 0x96, 0xea, 0xbf, 0x88, 0xb0, 0xfb, 0x38, 0x96, 0x75, 0xe8, 0x8d, 0x28, 0xbf,
	0x7f, 0xf4, 0x35, 0xec, 0xb0, 0xc0, 0x0a, 0xe8, 0x05, 0xf6, 0xac, 0xf8, 0x9a, 0x85, 0x6b, 0x5d,
	0x73, 0x91, 0x05, 0x83, 0xb0, 0x8a, 0x16, 0xdd, 0xf6, 0xb7, 0xb0, 0xe7, 0xd9, 0x01, 0x99, 0xe3,
	0xf5, 0xda, 0xd7, 0xb3, 0xd0, 0x6e, 0x54, 0x6a, 0xb5, 0xfe, 0x75, 0xdd, 0xf4, 0x00, 0x4a, 0xb3,
	0xc5, 0xe1, 0xad, 0x80, 0x4c, 0x30, 0xef, 0x3e, 0xd1, 0x2c, 0x26, 0xe8, 0x80, 0x4c, 0x30, 0xfa,
	0x32, 0x65, 0xba, 0x46, 0xda, 0x04, 0x1b, 0x4a, 0xa6, 0x8d, 0xf7, 0x29, 0xdc, 0x99, 0x31, 0xec,
	0x5b, 0x7e, 0x12, 0x41, 0x56, 0xbc, 0x56, 0xc9, 0xd5, 0xb2, 0x8d, 0x82, 0x79, 0x6b, 0xf6, 0x86,
	0x80, 0x62, 0xf5, 0x1f, 0x13, 0x03, 0xed, 0xc1, 0xce, 0xb0, 0xdb, 0xea, 0x75, 0xdb, 0x46, 0xf7,
	0x24, 0x71, 0xd0, 0x3e, 0xdc, 0x5a, 0x82, 0x6b, 0x86, 0x40, 0x77, 0x60, 0x4f, 0xff, 0xc6, 0x18,
	0x58, 0x29, 0xd7, 0x09, 0xe8, 0x2e, 0xec, 0xaf, 0x13, 0xab, 0xeb, 0x44, 0x54, 0x84, 0xc2, 0x51,
	0x47, 0x33, 0x9e, 0x69, 0xad, 0x8e, 0x2e, 0x67, 0xea, 0x3f, 0x0b, 0x50, 0xe6, 0xfd, 0x90, 0x1c,
	0x2d, 0x0e, 0x86, 0x74, 0xee, 0x08, 0x9b, 0xb9, 0xd3, 0x87, 0xf2, 0x52, 0xff, 0x44, 0x51, 0xa6,
	0x64, 0x6b, 0xd9, 0xc6, 0x8d, 0xc3, 0xfb, 0xef, 0x14, 0xd1, 0x44, 0xe3, 0x34, 0xc4, 0x9e, 0x88,
	0xf9, 0x8c, 0x9c, 0xad, 0xff, 0x2e, 0xc2, 0x4e, 0xa7, 0xff, 0x8c, 0x7b, 0x20, 0xee, 0x40, 0x74,
	0x17, 0x60, 0xd1, 0xdc, 0x49, 0xaa, 0x17, 0x62, 0xc4, 0x70, 0xd1, 0x3e, 0xe4, 0x9d, 0xb1, 0x4d,
	0xbc, 0x90, 0x8c, 0xe2, 0x3d, 0xc7, 0xc7, 0x86, 0xfb, 0x16, 0xfb, 0xbc, 0x07, 0x05, 0x32, 0x72,
	0xac, 0x88, 0x89, 0xbc, 0x93, 0x27, 0x23, 0xa7, 0xcd, 0xc9, 0x07, 0x50, 0x62, 0x81, 0x7d, 0x81,
	0x7d, 0xcb, 0x76, 0x5d, 0x1f, 0x33, 0x16, 0xe7, 0x76, 0x31, 0x42, 0xb5, 0x08, 0x44, 0x1f, 0xc2,
	0xee, 0xdc, 0x7e, 0x41, 0x5c, 0x3b, 0xa0, 0xcb, 0x99, 0x51, 0x88, 0xcb, 0x09, 0xb1, 0x98, 0xbc,
	0xcc, 0xd6, 0xdc, 0x7f, 0xca, 0xd6, 0xcf, 0x20, 0xbf, 0xe8, 0x62, 0x9e, 0x5a, 0x37, 0x0e, 0xf7,
	0xd5, 0x68, 0x81, 0x1a, 0xbe, 0x38, 0xd5, 0xf8, 0xc5, 0xa9, 0x1e, 0x51, 0xe2, 0xb5, 0xc4, 0x70,
	0x13, 0x33, 0x17, 0xf7, 0x2b, 0xfa, 0x22, 0xb1, 0x7a, 0x81, 0x5b, 0xfd, 0x61, 0xfa, 0x96, 0x52,
	0xaa, 0xa7, 0x8c, 0x5e, 0xff, 0x4d, 0x58, 0x75, 0x6c, 0x5b, 0x3f, 0xed, 0xf5, 0x8d, 0x81, 0x75,
	0xaa, 0x73, 0x8b, 0x46, 0x89, 0xb4, 0xe1, 0xc8, 0xb7, 0xe7, 0xe0, 0x1e, 0xec, 0x24, 0xcc, 0xb1,
	0x66, 0x74, 0xf4, 0xb6, 0x9c, 0x0d, 0xa7, 0xb7, 0xf5, 0x41, 0xef, 0xa9, 0xde, 0x35, 0xce, 0x56,
	0x03, 0x52, 0x44, 0x55, 0xa8, 0xa4, 0x98, 0xd5, 0x72, 0xdb, 0x61, 0xbb, 0xa4, 0xf8, 0xb8, 0xa8,
	0xd4, 0x7a, 0xfa, 0xf2, 0xb2, 0x2a, 0xbc, 0xba, 0xac, 0x0a, 0x7f, 0x5d, 0x56, 0x85, 0x9f, 0xae,
	0xaa, 0x5b, 0xaf, 0xae, 0xaa, 0x5b, 0x7f, 0x5c, 0x55, 0xb7, 0xce, 0x0e, 0x56, 0xd4, 0xef, 0x73,
	0x2d, 0x1e, 0x75, 0xec, 0x11, 0x6b, 0xc6, 0x1f, 0x2e, 0xf3, 0x83, 0x4f, 0x9a, 0xdf, 0x25, 0x9f,
	0x2f, 0xfc, 0x32, 0x46, 0x12, 0xff, 0xee, 0xf8, 0xf8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98,
	0x36, 0xf6, 0x45, 0xdd, 0x08, 0x00, 0x00,
}

func (m *UserRedemptionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRedemptionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRedemptionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimIsPending {
		i--
		if m.ClaimIsPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.EpochNumber != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x38
	}
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecords(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x40
	}
	if m.DepositEpochNumber != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.DepositEpochNumber))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecords(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HostZoneUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostZoneUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostZoneUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserRedemptionRecords) > 0 {
		for iNdEx := len(m.UserRedemptionRecords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserRedemptionRecords[iNdEx])
			copy(dAtA[i:], m.UserRedemptionRecords[iNdEx])
			i = encodeVarintRecords(dAtA, i, uint64(len(m.UserRedemptionRecords[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Status != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.UnbondingTime != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.UnbondingTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.NativeTokenAmount.Size()
		i -= size
		if _, err := m.NativeTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecords(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.StTokenAmount.Size()
		i -= size
		if _, err := m.StTokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecords(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EpochUnbondingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochUnbondingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochUnbondingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostZoneUnbondings) > 0 {
		for iNdEx := len(m.HostZoneUnbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostZoneUnbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecords(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EpochNumber != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LSMTokenDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LSMTokenDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LSMTokenDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintRecords(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.StToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecords(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRecords(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StakerAddress) > 0 {
		i -= len(m.StakerAddress)
		copy(dAtA[i:], m.StakerAddress)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.StakerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositId) > 0 {
		i -= len(m.DepositId)
		copy(dAtA[i:], m.DepositId)
		i = encodeVarintRecords(dAtA, i, uint64(len(m.DepositId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecords(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecords(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserRedemptionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovRecords(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovRecords(uint64(m.EpochNumber))
	}
	if m.ClaimIsPending {
		n += 2
	}
	return n
}

func (m *DepositRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRecords(uint64(m.Id))
	}
	l = m.Amount.Size()
	n += 1 + l + sovRecords(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRecords(uint64(m.Status))
	}
	if m.DepositEpochNumber != 0 {
		n += 1 + sovRecords(uint64(m.DepositEpochNumber))
	}
	if m.Source != 0 {
		n += 1 + sovRecords(uint64(m.Source))
	}
	return n
}

func (m *HostZoneUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StTokenAmount.Size()
	n += 1 + l + sovRecords(uint64(l))
	l = m.NativeTokenAmount.Size()
	n += 1 + l + sovRecords(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	if m.UnbondingTime != 0 {
		n += 1 + sovRecords(uint64(m.UnbondingTime))
	}
	if m.Status != 0 {
		n += 1 + sovRecords(uint64(m.Status))
	}
	if len(m.UserRedemptionRecords) > 0 {
		for _, s := range m.UserRedemptionRecords {
			l = len(s)
			n += 1 + l + sovRecords(uint64(l))
		}
	}
	return n
}

func (m *EpochUnbondingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovRecords(uint64(m.EpochNumber))
	}
	if len(m.HostZoneUnbondings) > 0 {
		for _, e := range m.HostZoneUnbondings {
			l = e.Size()
			n += 1 + l + sovRecords(uint64(l))
		}
	}
	return n
}

func (m *LSMTokenDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositId)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.StakerAddress)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovRecords(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovRecords(uint64(l))
	l = m.StToken.Size()
	n += 1 + l + sovRecords(uint64(l))
	if m.Status != 0 {
		n += 1 + sovRecords(uint64(m.Status))
	}
	return n
}

func sovRecords(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecords(x uint64) (n int) {
	return sovRecords(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserRedemptionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRedemptionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRedemptionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimIsPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimIsPending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DepositRecord_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositEpochNumber", wireType)
			}
			m.DepositEpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositEpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= DepositRecord_Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostZoneUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostZoneUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostZoneUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			m.UnbondingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= HostZoneUnbonding_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRedemptionRecords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRedemptionRecords = append(m.UserRedemptionRecords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochUnbondingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochUnbondingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochUnbondingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneUnbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneUnbondings = append(m.HostZoneUnbondings, &HostZoneUnbonding{})
			if err := m.HostZoneUnbondings[len(m.HostZoneUnbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LSMTokenDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecords
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LSMTokenDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LSMTokenDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecords
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecords
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LSMTokenDeposit_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecords(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecords
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecords(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecords
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecords
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecords
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecords
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecords
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecords        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecords          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecords = fmt.Errorf("proto: unexpected end of group")
)
