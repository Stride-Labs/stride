// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: records/epoch_unbonding_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochUnbondingRecord struct {
	Id                 uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EpochNumber        int64                                    `protobuf:"varint,2,opt,name=epochNumber,proto3" json:"epochNumber,omitempty"`
	HostZoneUnbondings []*EpochUnbondingRecordHostZoneUnbonding `protobuf:"bytes,3,rep,name=hostZoneUnbondings,proto3" json:"hostZoneUnbondings,omitempty"`
}

func (m *EpochUnbondingRecord) Reset()         { *m = EpochUnbondingRecord{} }
func (m *EpochUnbondingRecord) String() string { return proto.CompactTextString(m) }
func (*EpochUnbondingRecord) ProtoMessage()    {}
func (*EpochUnbondingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a996f951cb23d8, []int{0}
}
func (m *EpochUnbondingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochUnbondingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochUnbondingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochUnbondingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochUnbondingRecord.Merge(m, src)
}
func (m *EpochUnbondingRecord) XXX_Size() int {
	return m.Size()
}
func (m *EpochUnbondingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochUnbondingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EpochUnbondingRecord proto.InternalMessageInfo

func (m *EpochUnbondingRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EpochUnbondingRecord) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochUnbondingRecord) GetHostZoneUnbondings() []*EpochUnbondingRecordHostZoneUnbonding {
	if m != nil {
		return m.HostZoneUnbondings
	}
	return nil
}

type EpochUnbondingRecordHostZoneUnbonding struct {
	Amount     uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	HostZoneId string `protobuf:"bytes,3,opt,name=hostZoneId,proto3" json:"hostZoneId,omitempty"`
}

func (m *EpochUnbondingRecordHostZoneUnbonding) Reset()         { *m = EpochUnbondingRecordHostZoneUnbonding{} }
func (m *EpochUnbondingRecordHostZoneUnbonding) String() string { return proto.CompactTextString(m) }
func (*EpochUnbondingRecordHostZoneUnbonding) ProtoMessage()    {}
func (*EpochUnbondingRecordHostZoneUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_96a996f951cb23d8, []int{0, 0}
}
func (m *EpochUnbondingRecordHostZoneUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochUnbondingRecordHostZoneUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochUnbondingRecordHostZoneUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochUnbondingRecordHostZoneUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochUnbondingRecordHostZoneUnbonding.Merge(m, src)
}
func (m *EpochUnbondingRecordHostZoneUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *EpochUnbondingRecordHostZoneUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochUnbondingRecordHostZoneUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_EpochUnbondingRecordHostZoneUnbonding proto.InternalMessageInfo

func (m *EpochUnbondingRecordHostZoneUnbonding) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EpochUnbondingRecordHostZoneUnbonding) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EpochUnbondingRecordHostZoneUnbonding) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func init() {
	proto.RegisterType((*EpochUnbondingRecord)(nil), "StrideLabs.stride.records.EpochUnbondingRecord")
	proto.RegisterType((*EpochUnbondingRecordHostZoneUnbonding)(nil), "StrideLabs.stride.records.EpochUnbondingRecord.hostZoneUnbonding")
}

func init() {
	proto.RegisterFile("records/epoch_unbonding_record.proto", fileDescriptor_96a996f951cb23d8)
}

var fileDescriptor_96a996f951cb23d8 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x4a, 0x4d, 0xce,
	0x2f, 0x4a, 0x29, 0xd6, 0x4f, 0x2d, 0xc8, 0x4f, 0xce, 0x88, 0x2f, 0xcd, 0x4b, 0xca, 0xcf, 0x4b,
	0xc9, 0xcc, 0x4b, 0x8f, 0x87, 0x88, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x49, 0x06, 0x97,
	0x14, 0x65, 0xa6, 0xa4, 0xfa, 0x24, 0x26, 0x15, 0xeb, 0x15, 0x83, 0x99, 0x7a, 0x50, 0x7d, 0x4a,
	0xf3, 0x98, 0xb8, 0x44, 0x5c, 0x41, 0x7a, 0x43, 0x61, 0x5a, 0x83, 0xc0, 0x32, 0x42, 0x7c, 0x5c,
	0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x4c, 0x99, 0x29, 0x42, 0x0a, 0x5c,
	0xdc, 0x60, 0x3b, 0xfc, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83,
	0x90, 0x85, 0x84, 0x0a, 0xb9, 0x84, 0x32, 0xf2, 0x8b, 0x4b, 0xa2, 0xf2, 0xf3, 0x52, 0xe1, 0x86,
	0x15, 0x4b, 0x30, 0x2b, 0x30, 0x6b, 0x70, 0x1b, 0x39, 0xea, 0xe1, 0x74, 0x82, 0x1e, 0x36, 0xeb,
	0xf5, 0x30, 0x4c, 0x0a, 0xc2, 0x62, 0xb8, 0x54, 0x22, 0x97, 0x20, 0x86, 0xa8, 0x90, 0x18, 0x17,
	0x5b, 0x62, 0x6e, 0x7e, 0x69, 0x5e, 0x09, 0xd4, 0xf5, 0x50, 0x9e, 0x90, 0x08, 0x17, 0x6b, 0x4a,
	0x6a, 0x5e, 0x7e, 0x2e, 0xd8, 0xed, 0x9c, 0x41, 0x10, 0x8e, 0x90, 0x1c, 0x17, 0x17, 0xcc, 0x08,
	0xcf, 0x14, 0x09, 0x66, 0xb0, 0x14, 0x92, 0x88, 0x93, 0xfb, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37,
	0x1e, 0xcb, 0x31, 0x44, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea,
	0x43, 0x7c, 0xa7, 0x0b, 0xf2, 0x9e, 0x3e, 0xc4, 0x7b, 0xfa, 0x15, 0xfa, 0xb0, 0xb8, 0x29, 0xa9,
	0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0xc7, 0x85, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x03, 0xa6,
	0xa9, 0x78, 0xb3, 0x01, 0x00, 0x00,
}

func (m *EpochUnbondingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochUnbondingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochUnbondingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostZoneUnbondings) > 0 {
		for iNdEx := len(m.HostZoneUnbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostZoneUnbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochUnbondingRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEpochUnbondingRecord(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEpochUnbondingRecord(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochUnbondingRecordHostZoneUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochUnbondingRecordHostZoneUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochUnbondingRecordHostZoneUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintEpochUnbondingRecord(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEpochUnbondingRecord(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintEpochUnbondingRecord(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochUnbondingRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochUnbondingRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochUnbondingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEpochUnbondingRecord(uint64(m.Id))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovEpochUnbondingRecord(uint64(m.EpochNumber))
	}
	if len(m.HostZoneUnbondings) > 0 {
		for _, e := range m.HostZoneUnbondings {
			l = e.Size()
			n += 1 + l + sovEpochUnbondingRecord(uint64(l))
		}
	}
	return n
}

func (m *EpochUnbondingRecordHostZoneUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovEpochUnbondingRecord(uint64(m.Amount))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEpochUnbondingRecord(uint64(l))
	}
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovEpochUnbondingRecord(uint64(l))
	}
	return n
}

func sovEpochUnbondingRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochUnbondingRecord(x uint64) (n int) {
	return sovEpochUnbondingRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochUnbondingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochUnbondingRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochUnbondingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochUnbondingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneUnbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneUnbondings = append(m.HostZoneUnbondings, &EpochUnbondingRecordHostZoneUnbonding{})
			if err := m.HostZoneUnbondings[len(m.HostZoneUnbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochUnbondingRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochUnbondingRecordHostZoneUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochUnbondingRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: hostZoneUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: hostZoneUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochUnbondingRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochUnbondingRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochUnbondingRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochUnbondingRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochUnbondingRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochUnbondingRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochUnbondingRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochUnbondingRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochUnbondingRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochUnbondingRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochUnbondingRecord = fmt.Errorf("proto: unexpected end of group")
)
