// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: claim/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSetAirdropAllocations struct {
	Allocator         string                                   `protobuf:"bytes,1,opt,name=allocator,proto3" json:"allocator,omitempty"`
	AirdropIdentifier string                                   `protobuf:"bytes,2,opt,name=airdrop_identifier,json=airdropIdentifier,proto3" json:"airdrop_identifier,omitempty" yaml:"airdrop_identifier"`
	Users             []string                                 `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	Weights           []github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,rep,name=weights,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weights" yaml:"weights"`
}

func (m *MsgSetAirdropAllocations) Reset()         { *m = MsgSetAirdropAllocations{} }
func (m *MsgSetAirdropAllocations) String() string { return proto.CompactTextString(m) }
func (*MsgSetAirdropAllocations) ProtoMessage()    {}
func (*MsgSetAirdropAllocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{0}
}
func (m *MsgSetAirdropAllocations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAirdropAllocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAirdropAllocations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAirdropAllocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAirdropAllocations.Merge(m, src)
}
func (m *MsgSetAirdropAllocations) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAirdropAllocations) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAirdropAllocations.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAirdropAllocations proto.InternalMessageInfo

func (m *MsgSetAirdropAllocations) GetAllocator() string {
	if m != nil {
		return m.Allocator
	}
	return ""
}

func (m *MsgSetAirdropAllocations) GetAirdropIdentifier() string {
	if m != nil {
		return m.AirdropIdentifier
	}
	return ""
}

func (m *MsgSetAirdropAllocations) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type MsgSetAirdropAllocationsResponse struct {
}

func (m *MsgSetAirdropAllocationsResponse) Reset()         { *m = MsgSetAirdropAllocationsResponse{} }
func (m *MsgSetAirdropAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetAirdropAllocationsResponse) ProtoMessage()    {}
func (*MsgSetAirdropAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{1}
}
func (m *MsgSetAirdropAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAirdropAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAirdropAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAirdropAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAirdropAllocationsResponse.Merge(m, src)
}
func (m *MsgSetAirdropAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAirdropAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAirdropAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAirdropAllocationsResponse proto.InternalMessageInfo

type MsgClaimFreeAmount struct {
	User              string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	AirdropIdentifier string `protobuf:"bytes,2,opt,name=airdrop_identifier,json=airdropIdentifier,proto3" json:"airdrop_identifier,omitempty" yaml:"airdrop_identifier"`
}

func (m *MsgClaimFreeAmount) Reset()         { *m = MsgClaimFreeAmount{} }
func (m *MsgClaimFreeAmount) String() string { return proto.CompactTextString(m) }
func (*MsgClaimFreeAmount) ProtoMessage()    {}
func (*MsgClaimFreeAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{2}
}
func (m *MsgClaimFreeAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimFreeAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimFreeAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimFreeAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimFreeAmount.Merge(m, src)
}
func (m *MsgClaimFreeAmount) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimFreeAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimFreeAmount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimFreeAmount proto.InternalMessageInfo

func (m *MsgClaimFreeAmount) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgClaimFreeAmount) GetAirdropIdentifier() string {
	if m != nil {
		return m.AirdropIdentifier
	}
	return ""
}

type MsgClaimFreeAmountResponse struct {
	ClaimedAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=claimed_amount,json=claimedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"claimed_amount"`
}

func (m *MsgClaimFreeAmountResponse) Reset()         { *m = MsgClaimFreeAmountResponse{} }
func (m *MsgClaimFreeAmountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimFreeAmountResponse) ProtoMessage()    {}
func (*MsgClaimFreeAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{3}
}
func (m *MsgClaimFreeAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimFreeAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimFreeAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimFreeAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimFreeAmountResponse.Merge(m, src)
}
func (m *MsgClaimFreeAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimFreeAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimFreeAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimFreeAmountResponse proto.InternalMessageInfo

func (m *MsgClaimFreeAmountResponse) GetClaimedAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ClaimedAmount
	}
	return nil
}

type MsgCreateAirdrop struct {
	Distributor string `protobuf:"bytes,1,opt,name=distributor,proto3" json:"distributor,omitempty"`
	Identifier  string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	StartTime   uint64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration    uint64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Denom       string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgCreateAirdrop) Reset()         { *m = MsgCreateAirdrop{} }
func (m *MsgCreateAirdrop) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdrop) ProtoMessage()    {}
func (*MsgCreateAirdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{4}
}
func (m *MsgCreateAirdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdrop.Merge(m, src)
}
func (m *MsgCreateAirdrop) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdrop.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdrop proto.InternalMessageInfo

func (m *MsgCreateAirdrop) GetDistributor() string {
	if m != nil {
		return m.Distributor
	}
	return ""
}

func (m *MsgCreateAirdrop) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *MsgCreateAirdrop) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MsgCreateAirdrop) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgCreateAirdrop) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgCreateAirdropResponse struct {
}

func (m *MsgCreateAirdropResponse) Reset()         { *m = MsgCreateAirdropResponse{} }
func (m *MsgCreateAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdropResponse) ProtoMessage()    {}
func (*MsgCreateAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{5}
}
func (m *MsgCreateAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdropResponse.Merge(m, src)
}
func (m *MsgCreateAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdropResponse proto.InternalMessageInfo

type MsgDeleteAirdrop struct {
	Distributor string `protobuf:"bytes,1,opt,name=distributor,proto3" json:"distributor,omitempty"`
	Identifier  string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *MsgDeleteAirdrop) Reset()         { *m = MsgDeleteAirdrop{} }
func (m *MsgDeleteAirdrop) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAirdrop) ProtoMessage()    {}
func (*MsgDeleteAirdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{6}
}
func (m *MsgDeleteAirdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAirdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAirdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAirdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAirdrop.Merge(m, src)
}
func (m *MsgDeleteAirdrop) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAirdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAirdrop.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAirdrop proto.InternalMessageInfo

func (m *MsgDeleteAirdrop) GetDistributor() string {
	if m != nil {
		return m.Distributor
	}
	return ""
}

func (m *MsgDeleteAirdrop) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type MsgDeleteAirdropResponse struct {
}

func (m *MsgDeleteAirdropResponse) Reset()         { *m = MsgDeleteAirdropResponse{} }
func (m *MsgDeleteAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAirdropResponse) ProtoMessage()    {}
func (*MsgDeleteAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2477aa15a389ceb5, []int{7}
}
func (m *MsgDeleteAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAirdropResponse.Merge(m, src)
}
func (m *MsgDeleteAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAirdropResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetAirdropAllocations)(nil), "Stridelabs.stride.claim.v1beta1.MsgSetAirdropAllocations")
	proto.RegisterType((*MsgSetAirdropAllocationsResponse)(nil), "Stridelabs.stride.claim.v1beta1.MsgSetAirdropAllocationsResponse")
	proto.RegisterType((*MsgClaimFreeAmount)(nil), "Stridelabs.stride.claim.v1beta1.MsgClaimFreeAmount")
	proto.RegisterType((*MsgClaimFreeAmountResponse)(nil), "Stridelabs.stride.claim.v1beta1.MsgClaimFreeAmountResponse")
	proto.RegisterType((*MsgCreateAirdrop)(nil), "Stridelabs.stride.claim.v1beta1.MsgCreateAirdrop")
	proto.RegisterType((*MsgCreateAirdropResponse)(nil), "Stridelabs.stride.claim.v1beta1.MsgCreateAirdropResponse")
	proto.RegisterType((*MsgDeleteAirdrop)(nil), "Stridelabs.stride.claim.v1beta1.MsgDeleteAirdrop")
	proto.RegisterType((*MsgDeleteAirdropResponse)(nil), "Stridelabs.stride.claim.v1beta1.MsgDeleteAirdropResponse")
}

func init() { proto.RegisterFile("claim/v1beta1/tx.proto", fileDescriptor_2477aa15a389ceb5) }

var fileDescriptor_2477aa15a389ceb5 = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x49, 0x0a, 0xe4, 0xaa, 0x16, 0x38, 0x15, 0xe4, 0x5a, 0xd4, 0x8e, 0x3c, 0xa0, 0x48,
	0xa8, 0x36, 0x6d, 0xa7, 0xc2, 0x42, 0xd2, 0x82, 0x84, 0xd4, 0x2e, 0x6e, 0xa7, 0x2e, 0xd5, 0xd9,
	0x3e, 0xdc, 0x13, 0xb6, 0x2f, 0xba, 0xbb, 0x94, 0x76, 0x60, 0xe2, 0x0f, 0x74, 0xe1, 0x07, 0x30,
	0xb0, 0xf0, 0x4b, 0x3a, 0x76, 0x44, 0x0c, 0x01, 0x25, 0xff, 0xa0, 0x13, 0x23, 0xba, 0x3b, 0xc7,
	0x4d, 0xd2, 0x56, 0x84, 0xaa, 0x53, 0xee, 0xde, 0xbd, 0xef, 0x7b, 0xef, 0xbe, 0xfb, 0x5e, 0x0c,
	0x9e, 0x44, 0x29, 0x22, 0x99, 0x7f, 0xb8, 0x12, 0x62, 0x81, 0x56, 0x7c, 0x71, 0xe4, 0x75, 0x18,
	0x15, 0x14, 0x3a, 0x3b, 0x82, 0x91, 0x18, 0xa7, 0x28, 0xe4, 0x1e, 0x57, 0x4b, 0x4f, 0x65, 0x7a,
	0x45, 0xa6, 0xb5, 0x90, 0xd0, 0x84, 0xaa, 0x5c, 0x5f, 0xae, 0x34, 0xcc, 0xb2, 0x23, 0xca, 0x33,
	0xca, 0xfd, 0x10, 0x71, 0x5c, 0x92, 0x46, 0x94, 0xe4, 0xfa, 0xdc, 0xfd, 0x63, 0x00, 0x73, 0x9b,
	0x27, 0x3b, 0x58, 0xb4, 0x08, 0x8b, 0x19, 0xed, 0xb4, 0xd2, 0x94, 0x46, 0x48, 0x10, 0x9a, 0x73,
	0xf8, 0x14, 0xd4, 0x91, 0xde, 0x52, 0x66, 0x1a, 0x0d, 0xa3, 0x59, 0x0f, 0x2e, 0x02, 0x70, 0x0b,
	0x40, 0xa4, 0x31, 0xfb, 0x24, 0xc6, 0xb9, 0x20, 0xef, 0x09, 0x66, 0xe6, 0x1d, 0x99, 0xd6, 0x5e,
	0x3a, 0xef, 0x39, 0x8b, 0xc7, 0x28, 0x4b, 0x5f, 0xba, 0x97, 0x73, 0xdc, 0xe0, 0x51, 0x11, 0x7c,
	0x57, 0xc6, 0xe0, 0x02, 0x98, 0xe9, 0x72, 0xcc, 0xb8, 0x59, 0x6d, 0x54, 0x9b, 0xf5, 0x40, 0x6f,
	0xe0, 0x1e, 0xb8, 0xf7, 0x11, 0x93, 0xe4, 0x40, 0x70, 0xb3, 0x26, 0xe3, 0xed, 0xd7, 0xa7, 0x3d,
	0xa7, 0xf2, 0xb3, 0xe7, 0x3c, 0x4b, 0x88, 0x38, 0xe8, 0x86, 0x5e, 0x44, 0x33, 0xbf, 0xb8, 0xa2,
	0xfe, 0x59, 0xe6, 0xf1, 0x07, 0x5f, 0x1c, 0x77, 0x30, 0xf7, 0x36, 0x71, 0x74, 0xde, 0x73, 0xe6,
	0x75, 0x1b, 0x05, 0x8d, 0x1b, 0x0c, 0x09, 0x5d, 0x17, 0x34, 0xae, 0xbb, 0x79, 0x80, 0x79, 0x87,
	0xe6, 0x1c, 0xbb, 0x87, 0x00, 0x6e, 0xf3, 0x64, 0x43, 0x0a, 0xfd, 0x96, 0x61, 0xdc, 0xca, 0x68,
	0x37, 0x17, 0x10, 0x82, 0x9a, 0x6c, 0xaf, 0x90, 0x44, 0xad, 0x6f, 0x57, 0x0d, 0xf7, 0xc4, 0x00,
	0xd6, 0xe5, 0xc2, 0xc3, 0xb6, 0x20, 0x03, 0xf3, 0xea, 0xf1, 0x71, 0xbc, 0x8f, 0xd4, 0x89, 0x52,
	0x6d, 0x76, 0x75, 0xd1, 0xd3, 0x22, 0x78, 0xf2, 0xb9, 0x87, 0xce, 0xf0, 0x36, 0x28, 0xc9, 0xdb,
	0x2f, 0xa4, 0x70, 0xdf, 0x7f, 0x39, 0xcd, 0x29, 0x84, 0x93, 0x00, 0x1e, 0xcc, 0x15, 0x25, 0x74,
	0x6d, 0xf7, 0x9b, 0x01, 0x1e, 0xca, 0x96, 0x18, 0x46, 0x02, 0x17, 0x92, 0xc1, 0x06, 0x98, 0x8d,
	0x89, 0xb4, 0x63, 0xd8, 0xbd, 0xf0, 0xc8, 0x68, 0x08, 0xda, 0x00, 0x4c, 0xea, 0x11, 0x8c, 0x44,
	0xe0, 0x12, 0x00, 0x5c, 0x20, 0x26, 0xf6, 0x05, 0xc9, 0xb0, 0x59, 0x6d, 0x18, 0xcd, 0x5a, 0x50,
	0x57, 0x91, 0x5d, 0x92, 0x61, 0x68, 0x81, 0xfb, 0x71, 0x97, 0xa9, 0x57, 0x31, 0x6b, 0xea, 0xb0,
	0xdc, 0x4b, 0xcb, 0xc4, 0x38, 0xa7, 0x99, 0x39, 0xa3, 0x58, 0xf5, 0xc6, 0xb5, 0x94, 0xa1, 0xc7,
	0xda, 0x2c, 0x9f, 0x73, 0x57, 0x5d, 0x61, 0x13, 0xa7, 0xf8, 0x16, 0xaf, 0x50, 0x54, 0x1c, 0x63,
	0x1d, 0x56, 0x5c, 0xfd, 0x5a, 0x03, 0xd5, 0x6d, 0x9e, 0xc0, 0x2f, 0x06, 0x78, 0x7c, 0xf5, 0x90,
	0xad, 0x7b, 0xff, 0x98, 0x6c, 0xef, 0x3a, 0x97, 0x5a, 0xad, 0x1b, 0x43, 0x4b, 0x27, 0x7d, 0x36,
	0xc0, 0x83, 0x49, 0x7b, 0xaf, 0x4d, 0x43, 0x3b, 0x01, 0xb2, 0x5e, 0xdd, 0x00, 0x54, 0x76, 0xf1,
	0x09, 0xcc, 0x8d, 0xfb, 0x6a, 0x65, 0x2a, 0xb6, 0x51, 0x88, 0xb5, 0xfe, 0xdf, 0x90, 0xd1, 0xf2,
	0xe3, 0x9e, 0x98, 0xaa, 0xfc, 0x18, 0x64, 0xba, 0xf2, 0x57, 0x7a, 0xa4, 0xfd, 0xe6, 0xb4, 0x6f,
	0x1b, 0x67, 0x7d, 0xdb, 0xf8, 0xdd, 0xb7, 0x8d, 0x93, 0x81, 0x5d, 0x39, 0x1b, 0xd8, 0x95, 0x1f,
	0x03, 0xbb, 0xb2, 0xf7, 0x7c, 0x64, 0x58, 0x35, 0xfd, 0xf2, 0x16, 0x0a, 0xb9, 0xaf, 0xf9, 0xfd,
	0x23, 0x5f, 0x7f, 0x2c, 0xd4, 0xd4, 0x86, 0x77, 0xd5, 0x3f, 0xfa, 0xda, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x26, 0xb8, 0x69, 0x2c, 0x42, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SetAirdropAllocations(ctx context.Context, in *MsgSetAirdropAllocations, opts ...grpc.CallOption) (*MsgSetAirdropAllocationsResponse, error)
	ClaimFreeAmount(ctx context.Context, in *MsgClaimFreeAmount, opts ...grpc.CallOption) (*MsgClaimFreeAmountResponse, error)
	CreateAirdrop(ctx context.Context, in *MsgCreateAirdrop, opts ...grpc.CallOption) (*MsgCreateAirdropResponse, error)
	DeleteAirdrop(ctx context.Context, in *MsgDeleteAirdrop, opts ...grpc.CallOption) (*MsgDeleteAirdropResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetAirdropAllocations(ctx context.Context, in *MsgSetAirdropAllocations, opts ...grpc.CallOption) (*MsgSetAirdropAllocationsResponse, error) {
	out := new(MsgSetAirdropAllocationsResponse)
	err := c.cc.Invoke(ctx, "/Stridelabs.stride.claim.v1beta1.Msg/SetAirdropAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimFreeAmount(ctx context.Context, in *MsgClaimFreeAmount, opts ...grpc.CallOption) (*MsgClaimFreeAmountResponse, error) {
	out := new(MsgClaimFreeAmountResponse)
	err := c.cc.Invoke(ctx, "/Stridelabs.stride.claim.v1beta1.Msg/ClaimFreeAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAirdrop(ctx context.Context, in *MsgCreateAirdrop, opts ...grpc.CallOption) (*MsgCreateAirdropResponse, error) {
	out := new(MsgCreateAirdropResponse)
	err := c.cc.Invoke(ctx, "/Stridelabs.stride.claim.v1beta1.Msg/CreateAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAirdrop(ctx context.Context, in *MsgDeleteAirdrop, opts ...grpc.CallOption) (*MsgDeleteAirdropResponse, error) {
	out := new(MsgDeleteAirdropResponse)
	err := c.cc.Invoke(ctx, "/Stridelabs.stride.claim.v1beta1.Msg/DeleteAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SetAirdropAllocations(context.Context, *MsgSetAirdropAllocations) (*MsgSetAirdropAllocationsResponse, error)
	ClaimFreeAmount(context.Context, *MsgClaimFreeAmount) (*MsgClaimFreeAmountResponse, error)
	CreateAirdrop(context.Context, *MsgCreateAirdrop) (*MsgCreateAirdropResponse, error)
	DeleteAirdrop(context.Context, *MsgDeleteAirdrop) (*MsgDeleteAirdropResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetAirdropAllocations(ctx context.Context, req *MsgSetAirdropAllocations) (*MsgSetAirdropAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAirdropAllocations not implemented")
}
func (*UnimplementedMsgServer) ClaimFreeAmount(ctx context.Context, req *MsgClaimFreeAmount) (*MsgClaimFreeAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimFreeAmount not implemented")
}
func (*UnimplementedMsgServer) CreateAirdrop(ctx context.Context, req *MsgCreateAirdrop) (*MsgCreateAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirdrop not implemented")
}
func (*UnimplementedMsgServer) DeleteAirdrop(ctx context.Context, req *MsgDeleteAirdrop) (*MsgDeleteAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirdrop not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetAirdropAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAirdropAllocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAirdropAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stridelabs.stride.claim.v1beta1.Msg/SetAirdropAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAirdropAllocations(ctx, req.(*MsgSetAirdropAllocations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimFreeAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimFreeAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimFreeAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stridelabs.stride.claim.v1beta1.Msg/ClaimFreeAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimFreeAmount(ctx, req.(*MsgClaimFreeAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAirdrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stridelabs.stride.claim.v1beta1.Msg/CreateAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAirdrop(ctx, req.(*MsgCreateAirdrop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAirdrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stridelabs.stride.claim.v1beta1.Msg/DeleteAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAirdrop(ctx, req.(*MsgDeleteAirdrop))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Stridelabs.stride.claim.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAirdropAllocations",
			Handler:    _Msg_SetAirdropAllocations_Handler,
		},
		{
			MethodName: "ClaimFreeAmount",
			Handler:    _Msg_ClaimFreeAmount_Handler,
		},
		{
			MethodName: "CreateAirdrop",
			Handler:    _Msg_CreateAirdrop_Handler,
		},
		{
			MethodName: "DeleteAirdrop",
			Handler:    _Msg_DeleteAirdrop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "claim/v1beta1/tx.proto",
}

func (m *MsgSetAirdropAllocations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAirdropAllocations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAirdropAllocations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Weights[iNdEx].Size()
				i -= size
				if _, err := m.Weights[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Users[iNdEx])
			copy(dAtA[i:], m.Users[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Users[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AirdropIdentifier) > 0 {
		i -= len(m.AirdropIdentifier)
		copy(dAtA[i:], m.AirdropIdentifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Allocator) > 0 {
		i -= len(m.Allocator)
		copy(dAtA[i:], m.Allocator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Allocator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetAirdropAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAirdropAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAirdropAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimFreeAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimFreeAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimFreeAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AirdropIdentifier) > 0 {
		i -= len(m.AirdropIdentifier)
		copy(dAtA[i:], m.AirdropIdentifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTx(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimFreeAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimFreeAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimFreeAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedAmount) > 0 {
		for iNdEx := len(m.ClaimedAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimedAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Distributor) > 0 {
		i -= len(m.Distributor)
		copy(dAtA[i:], m.Distributor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Distributor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAirdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAirdrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAirdrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Distributor) > 0 {
		i -= len(m.Distributor)
		copy(dAtA[i:], m.Distributor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Distributor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetAirdropAllocations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Allocator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropIdentifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Weights) > 0 {
		for _, e := range m.Weights {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetAirdropAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimFreeAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropIdentifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimFreeAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimedAmount) > 0 {
		for _, e := range m.ClaimedAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateAirdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Distributor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovTx(uint64(m.StartTime))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteAirdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Distributor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetAirdropAllocations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAirdropAllocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAirdropAllocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Weights = append(m.Weights, v)
			if err := m.Weights[len(m.Weights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAirdropAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAirdropAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAirdropAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimFreeAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimFreeAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimFreeAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimFreeAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimFreeAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimFreeAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedAmount = append(m.ClaimedAmount, types.Coin{})
			if err := m.ClaimedAmount[len(m.ClaimedAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAirdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAirdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAirdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
