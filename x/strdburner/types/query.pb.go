// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/strdburner/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryStrdBurnerAddressRequest is the request type for the Query/strdburner
// RPC method
type QueryStrdBurnerAddressRequest struct {
}

func (m *QueryStrdBurnerAddressRequest) Reset()         { *m = QueryStrdBurnerAddressRequest{} }
func (m *QueryStrdBurnerAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStrdBurnerAddressRequest) ProtoMessage()    {}
func (*QueryStrdBurnerAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c45869caa19016, []int{0}
}
func (m *QueryStrdBurnerAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrdBurnerAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrdBurnerAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrdBurnerAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrdBurnerAddressRequest.Merge(m, src)
}
func (m *QueryStrdBurnerAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrdBurnerAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrdBurnerAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrdBurnerAddressRequest proto.InternalMessageInfo

// QueryStrdBurnerAddressResponse is the response type for the Query/strdburner
// RPC method
type QueryStrdBurnerAddressResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryStrdBurnerAddressResponse) Reset()         { *m = QueryStrdBurnerAddressResponse{} }
func (m *QueryStrdBurnerAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStrdBurnerAddressResponse) ProtoMessage()    {}
func (*QueryStrdBurnerAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c45869caa19016, []int{1}
}
func (m *QueryStrdBurnerAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrdBurnerAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrdBurnerAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrdBurnerAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrdBurnerAddressResponse.Merge(m, src)
}
func (m *QueryStrdBurnerAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrdBurnerAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrdBurnerAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrdBurnerAddressResponse proto.InternalMessageInfo

func (m *QueryStrdBurnerAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryTotalStrdBurnedRequest is the request type for the Query/strdburner
// RPC method
type QueryTotalStrdBurnedRequest struct {
}

func (m *QueryTotalStrdBurnedRequest) Reset()         { *m = QueryTotalStrdBurnedRequest{} }
func (m *QueryTotalStrdBurnedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStrdBurnedRequest) ProtoMessage()    {}
func (*QueryTotalStrdBurnedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c45869caa19016, []int{2}
}
func (m *QueryTotalStrdBurnedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStrdBurnedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStrdBurnedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStrdBurnedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStrdBurnedRequest.Merge(m, src)
}
func (m *QueryTotalStrdBurnedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStrdBurnedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStrdBurnedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStrdBurnedRequest proto.InternalMessageInfo

// QueryTotalStrdBurnedResponse is the response type for the Query/strdburner
// RPC method
type QueryTotalStrdBurnedResponse struct {
	TotalBurned     cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_burned,json=totalBurned,proto3,customtype=cosmossdk.io/math.Int" json:"total_burned"`
	ProtocolBurned  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=protocol_burned,json=protocolBurned,proto3,customtype=cosmossdk.io/math.Int" json:"protocol_burned"`
	TotalUserBurned cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_user_burned,json=totalUserBurned,proto3,customtype=cosmossdk.io/math.Int" json:"total_user_burned"`
}

func (m *QueryTotalStrdBurnedResponse) Reset()         { *m = QueryTotalStrdBurnedResponse{} }
func (m *QueryTotalStrdBurnedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStrdBurnedResponse) ProtoMessage()    {}
func (*QueryTotalStrdBurnedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c45869caa19016, []int{3}
}
func (m *QueryTotalStrdBurnedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStrdBurnedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStrdBurnedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStrdBurnedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStrdBurnedResponse.Merge(m, src)
}
func (m *QueryTotalStrdBurnedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStrdBurnedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStrdBurnedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStrdBurnedResponse proto.InternalMessageInfo

// QueryStrdBurnedByAddressRequest is the request type for the Query/strdburner
// RPC method
type QueryStrdBurnedByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryStrdBurnedByAddressRequest) Reset()         { *m = QueryStrdBurnedByAddressRequest{} }
func (m *QueryStrdBurnedByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStrdBurnedByAddressRequest) ProtoMessage()    {}
func (*QueryStrdBurnedByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c45869caa19016, []int{4}
}
func (m *QueryStrdBurnedByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrdBurnedByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrdBurnedByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrdBurnedByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrdBurnedByAddressRequest.Merge(m, src)
}
func (m *QueryStrdBurnedByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrdBurnedByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrdBurnedByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrdBurnedByAddressRequest proto.InternalMessageInfo

func (m *QueryStrdBurnedByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryStrdBurnedByAddressResponse is the response type for the
// Query/strdburner RPC method
type QueryStrdBurnedByAddressResponse struct {
	BurnedAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=burned_amount,json=burnedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"burned_amount"`
}

func (m *QueryStrdBurnedByAddressResponse) Reset()         { *m = QueryStrdBurnedByAddressResponse{} }
func (m *QueryStrdBurnedByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStrdBurnedByAddressResponse) ProtoMessage()    {}
func (*QueryStrdBurnedByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76c45869caa19016, []int{5}
}
func (m *QueryStrdBurnedByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrdBurnedByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrdBurnedByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrdBurnedByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrdBurnedByAddressResponse.Merge(m, src)
}
func (m *QueryStrdBurnedByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrdBurnedByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrdBurnedByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrdBurnedByAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryStrdBurnerAddressRequest)(nil), "stride.strdburner.QueryStrdBurnerAddressRequest")
	proto.RegisterType((*QueryStrdBurnerAddressResponse)(nil), "stride.strdburner.QueryStrdBurnerAddressResponse")
	proto.RegisterType((*QueryTotalStrdBurnedRequest)(nil), "stride.strdburner.QueryTotalStrdBurnedRequest")
	proto.RegisterType((*QueryTotalStrdBurnedResponse)(nil), "stride.strdburner.QueryTotalStrdBurnedResponse")
	proto.RegisterType((*QueryStrdBurnedByAddressRequest)(nil), "stride.strdburner.QueryStrdBurnedByAddressRequest")
	proto.RegisterType((*QueryStrdBurnedByAddressResponse)(nil), "stride.strdburner.QueryStrdBurnedByAddressResponse")
}

func init() { proto.RegisterFile("stride/strdburner/query.proto", fileDescriptor_76c45869caa19016) }

var fileDescriptor_76c45869caa19016 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcf, 0x6a, 0x13, 0x41,
	0x18, 0xcf, 0xb4, 0xa8, 0x38, 0x56, 0x43, 0xc6, 0x0a, 0x71, 0x4d, 0x76, 0xeb, 0x8a, 0x28, 0x48,
	0x77, 0x34, 0xf5, 0x20, 0x78, 0xb1, 0x7b, 0x10, 0x0a, 0x22, 0x98, 0xd4, 0x8b, 0x97, 0xb0, 0xc9,
	0x8c, 0xdb, 0xc5, 0x66, 0xbf, 0x74, 0x66, 0x56, 0x0c, 0xe2, 0xc5, 0x27, 0x10, 0x3c, 0xea, 0x1b,
	0x78, 0xf5, 0x21, 0x7a, 0x2c, 0x7a, 0x11, 0x0f, 0x45, 0x12, 0x9f, 0x40, 0x5f, 0x40, 0x32, 0x33,
	0xdb, 0x9a, 0x66, 0xa3, 0xc9, 0x2d, 0x99, 0xef, 0xfb, 0xfd, 0xd9, 0xdf, 0xfc, 0x06, 0xd7, 0xa5,
	0x12, 0x09, 0xe3, 0x54, 0x2a, 0xc1, 0x3a, 0x99, 0x48, 0xb9, 0xa0, 0x7b, 0x19, 0x17, 0x83, 0xa0,
	0x2f, 0x40, 0x01, 0xa9, 0x98, 0x71, 0x70, 0x3c, 0x76, 0x2e, 0x77, 0x41, 0xf6, 0x40, 0xb6, 0xf5,
	0x02, 0x35, 0x7f, 0xcc, 0xb6, 0xb3, 0x1a, 0x43, 0x0c, 0xe6, 0x7c, 0xfc, 0xcb, 0x9e, 0xd6, 0x62,
	0x80, 0x78, 0x97, 0xd3, 0xa8, 0x9f, 0xd0, 0x28, 0x4d, 0x41, 0x45, 0x2a, 0x81, 0xd4, 0x62, 0x7c,
	0x0f, 0xd7, 0x9f, 0x8c, 0x05, 0x5b, 0x4a, 0xb0, 0x50, 0x2b, 0x6c, 0x32, 0x26, 0xb8, 0x94, 0x4d,
	0xbe, 0x97, 0x71, 0xa9, 0xfc, 0x6d, 0xec, 0xce, 0x5a, 0x90, 0x7d, 0x48, 0x25, 0x27, 0x0d, 0x7c,
	0x26, 0x32, 0x47, 0x55, 0xb4, 0x86, 0x6e, 0x9e, 0x0d, 0xab, 0x5f, 0x3e, 0xaf, 0xaf, 0x5a, 0x67,
	0x76, 0xb9, 0xa5, 0x44, 0x92, 0xc6, 0xcd, 0x7c, 0xd1, 0xaf, 0xe3, 0x2b, 0x9a, 0x75, 0x1b, 0x54,
	0xb4, 0x7b, 0x44, 0xcd, 0x72, 0xd1, 0xdf, 0x08, 0xd7, 0x8a, 0xe7, 0x56, 0xf3, 0x01, 0x5e, 0x51,
	0xe3, 0x51, 0x5b, 0xa7, 0xc2, 0xac, 0x70, 0x7d, 0xff, 0xd0, 0x2b, 0x7d, 0x3f, 0xf4, 0x2e, 0x19,
	0x71, 0xc9, 0x5e, 0x04, 0x09, 0xd0, 0x5e, 0xa4, 0x76, 0x82, 0xad, 0x54, 0x35, 0xcf, 0x69, 0x88,
	0x61, 0x22, 0x0f, 0x71, 0x59, 0x27, 0xd0, 0x85, 0x23, 0x92, 0xa5, 0x79, 0x48, 0x2e, 0xe4, 0x28,
	0xcb, 0xb3, 0x85, 0x2b, 0xc6, 0x49, 0x26, 0xb9, 0xc8, 0x99, 0x96, 0xe7, 0x61, 0x2a, 0x6b, 0xdc,
	0x53, 0xc9, 0x85, 0xa1, 0xf2, 0xef, 0x63, 0x6f, 0x32, 0x6a, 0x16, 0x0e, 0x26, 0x6f, 0x83, 0x54,
	0x4f, 0x64, 0x7d, 0x9c, 0xe8, 0x73, 0xbc, 0x36, 0x1b, 0x6c, 0x53, 0x0b, 0xf1, 0x79, 0x63, 0xb0,
	0x1d, 0xf5, 0x20, 0x4b, 0xd5, 0x7c, 0xb1, 0xad, 0x18, 0xcc, 0xa6, 0x86, 0x34, 0x7e, 0x2d, 0xe3,
	0x53, 0x5a, 0x88, 0x7c, 0x44, 0xb8, 0x32, 0xd5, 0x0a, 0x72, 0x3b, 0x98, 0xea, 0x6c, 0xf0, 0xcf,
	0x86, 0x39, 0x77, 0x16, 0x40, 0x98, 0x0f, 0xf1, 0xfd, 0xb7, 0x5f, 0x7f, 0xbe, 0x5f, 0xaa, 0x11,
	0x87, 0x4e, 0xbf, 0x1f, 0x1b, 0x08, 0xf9, 0x80, 0x70, 0xf9, 0x44, 0x7d, 0x48, 0x30, 0x4b, 0xaa,
	0xb8, 0x87, 0x0e, 0x9d, 0x7b, 0xdf, 0x1a, 0xbb, 0xa1, 0x8d, 0x5d, 0x25, 0x5e, 0x81, 0xb1, 0xbf,
	0x0b, 0x4b, 0x3e, 0x21, 0x7c, 0xb1, 0xe0, 0xaa, 0x48, 0xe3, 0xbf, 0x61, 0x4c, 0x95, 0xc2, 0xd9,
	0x58, 0x08, 0x63, 0x9d, 0xde, 0xd2, 0x4e, 0xaf, 0x93, 0x6b, 0x05, 0x4e, 0x8d, 0x47, 0xfa, 0xda,
	0x46, 0xf9, 0x26, 0x7c, 0xbc, 0x3f, 0x74, 0xd1, 0xc1, 0xd0, 0x45, 0x3f, 0x86, 0x2e, 0x7a, 0x37,
	0x72, 0x4b, 0x07, 0x23, 0xb7, 0xf4, 0x6d, 0xe4, 0x96, 0x9e, 0xdd, 0x8d, 0x13, 0xb5, 0x93, 0x75,
	0x82, 0x2e, 0xf4, 0x68, 0x4b, 0x13, 0xad, 0x3f, 0x8a, 0x3a, 0x32, 0x27, 0x7d, 0xd9, 0xb8, 0x47,
	0x5f, 0x4d, 0x84, 0x30, 0xe8, 0x73, 0xd9, 0x39, 0xad, 0x1f, 0xd1, 0xc6, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x1f, 0xcb, 0xd4, 0xcd, 0xff, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// StrdBurnerAddress queries the address of the strdburner module
	StrdBurnerAddress(ctx context.Context, in *QueryStrdBurnerAddressRequest, opts ...grpc.CallOption) (*QueryStrdBurnerAddressResponse, error)
	// StrdBurnerAddress queries the address of the strdburner module
	TotalStrdBurned(ctx context.Context, in *QueryTotalStrdBurnedRequest, opts ...grpc.CallOption) (*QueryTotalStrdBurnedResponse, error)
	// StrdBurnerAddress queries amount burned from a given address
	StrdBurnedByAddress(ctx context.Context, in *QueryStrdBurnedByAddressRequest, opts ...grpc.CallOption) (*QueryStrdBurnedByAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) StrdBurnerAddress(ctx context.Context, in *QueryStrdBurnerAddressRequest, opts ...grpc.CallOption) (*QueryStrdBurnerAddressResponse, error) {
	out := new(QueryStrdBurnerAddressResponse)
	err := c.cc.Invoke(ctx, "/stride.strdburner.Query/StrdBurnerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalStrdBurned(ctx context.Context, in *QueryTotalStrdBurnedRequest, opts ...grpc.CallOption) (*QueryTotalStrdBurnedResponse, error) {
	out := new(QueryTotalStrdBurnedResponse)
	err := c.cc.Invoke(ctx, "/stride.strdburner.Query/TotalStrdBurned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StrdBurnedByAddress(ctx context.Context, in *QueryStrdBurnedByAddressRequest, opts ...grpc.CallOption) (*QueryStrdBurnedByAddressResponse, error) {
	out := new(QueryStrdBurnedByAddressResponse)
	err := c.cc.Invoke(ctx, "/stride.strdburner.Query/StrdBurnedByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// StrdBurnerAddress queries the address of the strdburner module
	StrdBurnerAddress(context.Context, *QueryStrdBurnerAddressRequest) (*QueryStrdBurnerAddressResponse, error)
	// StrdBurnerAddress queries the address of the strdburner module
	TotalStrdBurned(context.Context, *QueryTotalStrdBurnedRequest) (*QueryTotalStrdBurnedResponse, error)
	// StrdBurnerAddress queries amount burned from a given address
	StrdBurnedByAddress(context.Context, *QueryStrdBurnedByAddressRequest) (*QueryStrdBurnedByAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) StrdBurnerAddress(ctx context.Context, req *QueryStrdBurnerAddressRequest) (*QueryStrdBurnerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrdBurnerAddress not implemented")
}
func (*UnimplementedQueryServer) TotalStrdBurned(ctx context.Context, req *QueryTotalStrdBurnedRequest) (*QueryTotalStrdBurnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalStrdBurned not implemented")
}
func (*UnimplementedQueryServer) StrdBurnedByAddress(ctx context.Context, req *QueryStrdBurnedByAddressRequest) (*QueryStrdBurnedByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrdBurnedByAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_StrdBurnerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrdBurnerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StrdBurnerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.strdburner.Query/StrdBurnerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StrdBurnerAddress(ctx, req.(*QueryStrdBurnerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalStrdBurned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalStrdBurnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalStrdBurned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.strdburner.Query/TotalStrdBurned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalStrdBurned(ctx, req.(*QueryTotalStrdBurnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StrdBurnedByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrdBurnedByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StrdBurnedByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.strdburner.Query/StrdBurnedByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StrdBurnedByAddress(ctx, req.(*QueryStrdBurnedByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.strdburner.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StrdBurnerAddress",
			Handler:    _Query_StrdBurnerAddress_Handler,
		},
		{
			MethodName: "TotalStrdBurned",
			Handler:    _Query_TotalStrdBurned_Handler,
		},
		{
			MethodName: "StrdBurnedByAddress",
			Handler:    _Query_StrdBurnedByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/strdburner/query.proto",
}

func (m *QueryStrdBurnerAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrdBurnerAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrdBurnerAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStrdBurnerAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrdBurnerAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrdBurnerAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalStrdBurnedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStrdBurnedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStrdBurnedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalStrdBurnedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStrdBurnedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStrdBurnedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalUserBurned.Size()
		i -= size
		if _, err := m.TotalUserBurned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ProtocolBurned.Size()
		i -= size
		if _, err := m.ProtocolBurned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalBurned.Size()
		i -= size
		if _, err := m.TotalBurned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStrdBurnedByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrdBurnedByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrdBurnedByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStrdBurnedByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrdBurnedByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrdBurnedByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BurnedAmount.Size()
		i -= size
		if _, err := m.BurnedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStrdBurnerAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStrdBurnerAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalStrdBurnedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalStrdBurnedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalBurned.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ProtocolBurned.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalUserBurned.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStrdBurnedByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStrdBurnedByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStrdBurnerAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrdBurnerAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrdBurnerAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStrdBurnerAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrdBurnerAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrdBurnerAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStrdBurnedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStrdBurnedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStrdBurnedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStrdBurnedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStrdBurnedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStrdBurnedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBurned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBurned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolBurned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolBurned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUserBurned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUserBurned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStrdBurnedByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrdBurnedByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrdBurnedByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStrdBurnedByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrdBurnedByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrdBurnedByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
