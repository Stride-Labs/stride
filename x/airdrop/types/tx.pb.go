// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/airdrop/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClaimDaily
type MsgClaimDaily struct {
	// Address of the claimer
	Claimer string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	// Airdrop ID
	AirdropId string `protobuf:"bytes,2,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
}

func (m *MsgClaimDaily) Reset()         { *m = MsgClaimDaily{} }
func (m *MsgClaimDaily) String() string { return proto.CompactTextString(m) }
func (*MsgClaimDaily) ProtoMessage()    {}
func (*MsgClaimDaily) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{0}
}
func (m *MsgClaimDaily) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimDaily) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimDaily.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimDaily) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimDaily.Merge(m, src)
}
func (m *MsgClaimDaily) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimDaily) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimDaily.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimDaily proto.InternalMessageInfo

func (m *MsgClaimDaily) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *MsgClaimDaily) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

type MsgClaimDailyResponse struct {
}

func (m *MsgClaimDailyResponse) Reset()         { *m = MsgClaimDailyResponse{} }
func (m *MsgClaimDailyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimDailyResponse) ProtoMessage()    {}
func (*MsgClaimDailyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{1}
}
func (m *MsgClaimDailyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimDailyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimDailyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimDailyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimDailyResponse.Merge(m, src)
}
func (m *MsgClaimDailyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimDailyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimDailyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimDailyResponse proto.InternalMessageInfo

// ClaimEarly
type MsgClaimEarly struct {
	// Address of the claimer
	Claimer string `protobuf:"bytes,1,opt,name=claimer,proto3" json:"claimer,omitempty"`
	// Airdrop ID
	AirdropId string `protobuf:"bytes,2,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
}

func (m *MsgClaimEarly) Reset()         { *m = MsgClaimEarly{} }
func (m *MsgClaimEarly) String() string { return proto.CompactTextString(m) }
func (*MsgClaimEarly) ProtoMessage()    {}
func (*MsgClaimEarly) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{2}
}
func (m *MsgClaimEarly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimEarly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimEarly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimEarly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimEarly.Merge(m, src)
}
func (m *MsgClaimEarly) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimEarly) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimEarly.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimEarly proto.InternalMessageInfo

func (m *MsgClaimEarly) GetClaimer() string {
	if m != nil {
		return m.Claimer
	}
	return ""
}

func (m *MsgClaimEarly) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

type MsgClaimEarlyResponse struct {
}

func (m *MsgClaimEarlyResponse) Reset()         { *m = MsgClaimEarlyResponse{} }
func (m *MsgClaimEarlyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimEarlyResponse) ProtoMessage()    {}
func (*MsgClaimEarlyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{3}
}
func (m *MsgClaimEarlyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimEarlyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimEarlyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimEarlyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimEarlyResponse.Merge(m, src)
}
func (m *MsgClaimEarlyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimEarlyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimEarlyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimEarlyResponse proto.InternalMessageInfo

// CreateAirdrop
type MsgCreateAirdrop struct {
	// Airdrop admin address
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Airdrop ID
	AirdropId string `protobuf:"bytes,2,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	// Denom used when distributing rewards
	RewardDenom string `protobuf:"bytes,3,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	// The first date that claiming begins and rewards are distributed
	DistributionStartDate *time.Time `protobuf:"bytes,4,opt,name=distribution_start_date,json=distributionStartDate,proto3,stdtime" json:"distribution_start_date,omitempty"`
	// The last date for rewards to be distributed. Immediately after this date
	// the rewards can no longer be claimed, but rewards have not been clawed back
	// yet
	DistributionEndDate *time.Time `protobuf:"bytes,5,opt,name=distribution_end_date,json=distributionEndDate,proto3,stdtime" json:"distribution_end_date,omitempty"`
	// Date with which the rewards are clawed back (occurs after the distribution
	// end date)
	ClawbackDate *time.Time `protobuf:"bytes,6,opt,name=clawback_date,json=clawbackDate,proto3,stdtime" json:"clawback_date,omitempty"`
	// Deadline for the user to make a decision on their claim type
	ClaimTypeDeadlineDate *time.Time `protobuf:"bytes,7,opt,name=claim_type_deadline_date,json=claimTypeDeadlineDate,proto3,stdtime" json:"claim_type_deadline_date,omitempty"`
	// Penalty for claiming rewards early - e.g. 0.5 means claiming early will
	// result in losing 50% of rewards
	EarlyClaimPenalty cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=early_claim_penalty,json=earlyClaimPenalty,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"early_claim_penalty"`
	// Account that holds the total reward balance and distributes to users
	DistributorAddress string `protobuf:"bytes,9,opt,name=distributor_address,json=distributorAddress,proto3" json:"distributor_address,omitempty"`
	// Admin account with permissions to add or update allocations
	AllocatorAddress string `protobuf:"bytes,10,opt,name=allocator_address,json=allocatorAddress,proto3" json:"allocator_address,omitempty"`
	// Admin account with permissions to link addresseses
	LinkerAddress string `protobuf:"bytes,11,opt,name=linker_address,json=linkerAddress,proto3" json:"linker_address,omitempty"`
}

func (m *MsgCreateAirdrop) Reset()         { *m = MsgCreateAirdrop{} }
func (m *MsgCreateAirdrop) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdrop) ProtoMessage()    {}
func (*MsgCreateAirdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{4}
}
func (m *MsgCreateAirdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdrop.Merge(m, src)
}
func (m *MsgCreateAirdrop) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdrop.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdrop proto.InternalMessageInfo

func (m *MsgCreateAirdrop) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgCreateAirdrop) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *MsgCreateAirdrop) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *MsgCreateAirdrop) GetDistributionStartDate() *time.Time {
	if m != nil {
		return m.DistributionStartDate
	}
	return nil
}

func (m *MsgCreateAirdrop) GetDistributionEndDate() *time.Time {
	if m != nil {
		return m.DistributionEndDate
	}
	return nil
}

func (m *MsgCreateAirdrop) GetClawbackDate() *time.Time {
	if m != nil {
		return m.ClawbackDate
	}
	return nil
}

func (m *MsgCreateAirdrop) GetClaimTypeDeadlineDate() *time.Time {
	if m != nil {
		return m.ClaimTypeDeadlineDate
	}
	return nil
}

func (m *MsgCreateAirdrop) GetDistributorAddress() string {
	if m != nil {
		return m.DistributorAddress
	}
	return ""
}

func (m *MsgCreateAirdrop) GetAllocatorAddress() string {
	if m != nil {
		return m.AllocatorAddress
	}
	return ""
}

func (m *MsgCreateAirdrop) GetLinkerAddress() string {
	if m != nil {
		return m.LinkerAddress
	}
	return ""
}

type MsgCreateAirdropResponse struct {
}

func (m *MsgCreateAirdropResponse) Reset()         { *m = MsgCreateAirdropResponse{} }
func (m *MsgCreateAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAirdropResponse) ProtoMessage()    {}
func (*MsgCreateAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{5}
}
func (m *MsgCreateAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAirdropResponse.Merge(m, src)
}
func (m *MsgCreateAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAirdropResponse proto.InternalMessageInfo

// UpdateAirdrop
type MsgUpdateAirdrop struct {
	// Airdrop admin address
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Airdrop ID
	AirdropId string `protobuf:"bytes,2,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	// Denom used when distributing rewards
	RewardDenom string `protobuf:"bytes,3,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	// The first date that claiming begins and rewards are distributed
	DistributionStartDate *time.Time `protobuf:"bytes,4,opt,name=distribution_start_date,json=distributionStartDate,proto3,stdtime" json:"distribution_start_date,omitempty"`
	// The last date for rewards to be distributed. Immediately after this date
	// the rewards can no longer be claimed, but rewards have not been clawed back
	// yet
	DistributionEndDate *time.Time `protobuf:"bytes,5,opt,name=distribution_end_date,json=distributionEndDate,proto3,stdtime" json:"distribution_end_date,omitempty"`
	// Date with which the rewards are clawed back (occurs after the distribution
	// end date)
	ClawbackDate *time.Time `protobuf:"bytes,6,opt,name=clawback_date,json=clawbackDate,proto3,stdtime" json:"clawback_date,omitempty"`
	// Deadline for the user to make a decision on their claim type
	ClaimTypeDeadlineDate *time.Time `protobuf:"bytes,7,opt,name=claim_type_deadline_date,json=claimTypeDeadlineDate,proto3,stdtime" json:"claim_type_deadline_date,omitempty"`
	// Penalty for claiming rewards early - e.g. 0.5 means claiming early will
	// result in losing 50% of rewards
	EarlyClaimPenalty cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=early_claim_penalty,json=earlyClaimPenalty,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"early_claim_penalty"`
	// Account that holds the total reward balance and distributes to users
	DistributorAddress string `protobuf:"bytes,9,opt,name=distributor_address,json=distributorAddress,proto3" json:"distributor_address,omitempty"`
	// Admin account with permissions to add or update allocations
	AllocatorAddress string `protobuf:"bytes,10,opt,name=allocator_address,json=allocatorAddress,proto3" json:"allocator_address,omitempty"`
	// Admin account with permissions to link addresseses
	LinkerAddress string `protobuf:"bytes,11,opt,name=linker_address,json=linkerAddress,proto3" json:"linker_address,omitempty"`
}

func (m *MsgUpdateAirdrop) Reset()         { *m = MsgUpdateAirdrop{} }
func (m *MsgUpdateAirdrop) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAirdrop) ProtoMessage()    {}
func (*MsgUpdateAirdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{6}
}
func (m *MsgUpdateAirdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAirdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAirdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAirdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAirdrop.Merge(m, src)
}
func (m *MsgUpdateAirdrop) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAirdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAirdrop.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAirdrop proto.InternalMessageInfo

func (m *MsgUpdateAirdrop) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateAirdrop) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *MsgUpdateAirdrop) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *MsgUpdateAirdrop) GetDistributionStartDate() *time.Time {
	if m != nil {
		return m.DistributionStartDate
	}
	return nil
}

func (m *MsgUpdateAirdrop) GetDistributionEndDate() *time.Time {
	if m != nil {
		return m.DistributionEndDate
	}
	return nil
}

func (m *MsgUpdateAirdrop) GetClawbackDate() *time.Time {
	if m != nil {
		return m.ClawbackDate
	}
	return nil
}

func (m *MsgUpdateAirdrop) GetClaimTypeDeadlineDate() *time.Time {
	if m != nil {
		return m.ClaimTypeDeadlineDate
	}
	return nil
}

func (m *MsgUpdateAirdrop) GetDistributorAddress() string {
	if m != nil {
		return m.DistributorAddress
	}
	return ""
}

func (m *MsgUpdateAirdrop) GetAllocatorAddress() string {
	if m != nil {
		return m.AllocatorAddress
	}
	return ""
}

func (m *MsgUpdateAirdrop) GetLinkerAddress() string {
	if m != nil {
		return m.LinkerAddress
	}
	return ""
}

type MsgUpdateAirdropResponse struct {
}

func (m *MsgUpdateAirdropResponse) Reset()         { *m = MsgUpdateAirdropResponse{} }
func (m *MsgUpdateAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAirdropResponse) ProtoMessage()    {}
func (*MsgUpdateAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{7}
}
func (m *MsgUpdateAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAirdropResponse.Merge(m, src)
}
func (m *MsgUpdateAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAirdropResponse proto.InternalMessageInfo

// Allocation specification when bootstrapping reward data
type RawAllocation struct {
	UserAddress string                  `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	Allocations []cosmossdk_io_math.Int `protobuf:"bytes,4,rep,name=allocations,proto3,customtype=cosmossdk.io/math.Int" json:"allocations"`
}

func (m *RawAllocation) Reset()         { *m = RawAllocation{} }
func (m *RawAllocation) String() string { return proto.CompactTextString(m) }
func (*RawAllocation) ProtoMessage()    {}
func (*RawAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{8}
}
func (m *RawAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawAllocation.Merge(m, src)
}
func (m *RawAllocation) XXX_Size() int {
	return m.Size()
}
func (m *RawAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_RawAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_RawAllocation proto.InternalMessageInfo

func (m *RawAllocation) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

// AddAllocations
type MsgAddAllocations struct {
	// Airdrop admin address
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Airdrop ID
	AirdropId string `protobuf:"bytes,2,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	// List of address/allocation pairs for each user
	Allocations []RawAllocation `protobuf:"bytes,3,rep,name=allocations,proto3" json:"allocations"`
}

func (m *MsgAddAllocations) Reset()         { *m = MsgAddAllocations{} }
func (m *MsgAddAllocations) String() string { return proto.CompactTextString(m) }
func (*MsgAddAllocations) ProtoMessage()    {}
func (*MsgAddAllocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{9}
}
func (m *MsgAddAllocations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAllocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAllocations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAllocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAllocations.Merge(m, src)
}
func (m *MsgAddAllocations) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAllocations) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAllocations.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAllocations proto.InternalMessageInfo

func (m *MsgAddAllocations) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgAddAllocations) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *MsgAddAllocations) GetAllocations() []RawAllocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

type MsgAddAllocationsResponse struct {
}

func (m *MsgAddAllocationsResponse) Reset()         { *m = MsgAddAllocationsResponse{} }
func (m *MsgAddAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAllocationsResponse) ProtoMessage()    {}
func (*MsgAddAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{10}
}
func (m *MsgAddAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAllocationsResponse.Merge(m, src)
}
func (m *MsgAddAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAllocationsResponse proto.InternalMessageInfo

// UpdateUserAllocation
type MsgUpdateUserAllocation struct {
	// Airdrop admin address
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Airdrop ID
	AirdropId string `protobuf:"bytes,2,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	// Address of the airdrop recipient
	UserAddress string `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// Allocations - as an array where each element represents the rewards for a
	// day
	Allocations []cosmossdk_io_math.Int `protobuf:"bytes,4,rep,name=allocations,proto3,customtype=cosmossdk.io/math.Int" json:"allocations"`
}

func (m *MsgUpdateUserAllocation) Reset()         { *m = MsgUpdateUserAllocation{} }
func (m *MsgUpdateUserAllocation) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateUserAllocation) ProtoMessage()    {}
func (*MsgUpdateUserAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{11}
}
func (m *MsgUpdateUserAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUserAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUserAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUserAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUserAllocation.Merge(m, src)
}
func (m *MsgUpdateUserAllocation) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUserAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUserAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUserAllocation proto.InternalMessageInfo

func (m *MsgUpdateUserAllocation) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateUserAllocation) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *MsgUpdateUserAllocation) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgUpdateUserAllocationResponse struct {
}

func (m *MsgUpdateUserAllocationResponse) Reset()         { *m = MsgUpdateUserAllocationResponse{} }
func (m *MsgUpdateUserAllocationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateUserAllocationResponse) ProtoMessage()    {}
func (*MsgUpdateUserAllocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{12}
}
func (m *MsgUpdateUserAllocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUserAllocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUserAllocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUserAllocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUserAllocationResponse.Merge(m, src)
}
func (m *MsgUpdateUserAllocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUserAllocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUserAllocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUserAllocationResponse proto.InternalMessageInfo

// LinkAddresses
type MsgLinkAddresses struct {
	// Airdrop admin address
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Airdrop ID
	AirdropId string `protobuf:"bytes,2,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	// Stride address - this address may or may not exist in allocations yet
	StrideAddress string `protobuf:"bytes,3,opt,name=stride_address,json=strideAddress,proto3" json:"stride_address,omitempty"`
	// Host address - this address must exist
	HostAddress string `protobuf:"bytes,4,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty"`
}

func (m *MsgLinkAddresses) Reset()         { *m = MsgLinkAddresses{} }
func (m *MsgLinkAddresses) String() string { return proto.CompactTextString(m) }
func (*MsgLinkAddresses) ProtoMessage()    {}
func (*MsgLinkAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{13}
}
func (m *MsgLinkAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLinkAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLinkAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLinkAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLinkAddresses.Merge(m, src)
}
func (m *MsgLinkAddresses) XXX_Size() int {
	return m.Size()
}
func (m *MsgLinkAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLinkAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLinkAddresses proto.InternalMessageInfo

func (m *MsgLinkAddresses) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgLinkAddresses) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *MsgLinkAddresses) GetStrideAddress() string {
	if m != nil {
		return m.StrideAddress
	}
	return ""
}

func (m *MsgLinkAddresses) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

type MsgLinkAddressesResponse struct {
}

func (m *MsgLinkAddressesResponse) Reset()         { *m = MsgLinkAddressesResponse{} }
func (m *MsgLinkAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLinkAddressesResponse) ProtoMessage()    {}
func (*MsgLinkAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a6837f542f43b8, []int{14}
}
func (m *MsgLinkAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLinkAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLinkAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLinkAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLinkAddressesResponse.Merge(m, src)
}
func (m *MsgLinkAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLinkAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLinkAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLinkAddressesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgClaimDaily)(nil), "stride.airdrop.MsgClaimDaily")
	proto.RegisterType((*MsgClaimDailyResponse)(nil), "stride.airdrop.MsgClaimDailyResponse")
	proto.RegisterType((*MsgClaimEarly)(nil), "stride.airdrop.MsgClaimEarly")
	proto.RegisterType((*MsgClaimEarlyResponse)(nil), "stride.airdrop.MsgClaimEarlyResponse")
	proto.RegisterType((*MsgCreateAirdrop)(nil), "stride.airdrop.MsgCreateAirdrop")
	proto.RegisterType((*MsgCreateAirdropResponse)(nil), "stride.airdrop.MsgCreateAirdropResponse")
	proto.RegisterType((*MsgUpdateAirdrop)(nil), "stride.airdrop.MsgUpdateAirdrop")
	proto.RegisterType((*MsgUpdateAirdropResponse)(nil), "stride.airdrop.MsgUpdateAirdropResponse")
	proto.RegisterType((*RawAllocation)(nil), "stride.airdrop.RawAllocation")
	proto.RegisterType((*MsgAddAllocations)(nil), "stride.airdrop.MsgAddAllocations")
	proto.RegisterType((*MsgAddAllocationsResponse)(nil), "stride.airdrop.MsgAddAllocationsResponse")
	proto.RegisterType((*MsgUpdateUserAllocation)(nil), "stride.airdrop.MsgUpdateUserAllocation")
	proto.RegisterType((*MsgUpdateUserAllocationResponse)(nil), "stride.airdrop.MsgUpdateUserAllocationResponse")
	proto.RegisterType((*MsgLinkAddresses)(nil), "stride.airdrop.MsgLinkAddresses")
	proto.RegisterType((*MsgLinkAddressesResponse)(nil), "stride.airdrop.MsgLinkAddressesResponse")
}

func init() { proto.RegisterFile("stride/airdrop/tx.proto", fileDescriptor_40a6837f542f43b8) }

var fileDescriptor_40a6837f542f43b8 = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x3f, 0x6f, 0xdb, 0x46,
	0x14, 0x37, 0x23, 0xd9, 0xa9, 0x4f, 0x96, 0x11, 0x33, 0x36, 0x44, 0x2b, 0xb0, 0x24, 0xab, 0x48,
	0xa3, 0x06, 0x08, 0x89, 0xa8, 0x9b, 0x33, 0x14, 0x56, 0xa5, 0xc1, 0xa8, 0x0d, 0x14, 0xb4, 0x03,
	0xf4, 0x0f, 0x50, 0xe2, 0xa4, 0xbb, 0xd2, 0x07, 0x93, 0x3c, 0x82, 0x77, 0x8e, 0xa3, 0xb5, 0x63,
	0xa6, 0x4c, 0xf9, 0x0a, 0x5d, 0x33, 0xf4, 0x43, 0x64, 0x0c, 0xda, 0xa5, 0xe8, 0x90, 0x16, 0xf6,
	0x90, 0xad, 0x9f, 0xa1, 0xe0, 0x1d, 0x49, 0xf1, 0x6c, 0xba, 0xd4, 0x60, 0xa0, 0x8b, 0x17, 0xdb,
	0x7c, 0xef, 0xf7, 0x7e, 0xf7, 0xee, 0xbd, 0xf7, 0xa3, 0x1f, 0x41, 0x83, 0xf1, 0x88, 0x20, 0x6c,
	0x41, 0x12, 0xa1, 0x88, 0x86, 0x16, 0x7f, 0x69, 0x86, 0x11, 0xe5, 0x54, 0x5f, 0x95, 0x0e, 0x33,
	0x71, 0x34, 0x1b, 0x13, 0xca, 0x7c, 0xca, 0x2c, 0x9f, 0xb9, 0xd6, 0x8b, 0xa7, 0xf1, 0x2f, 0x09,
	0x6c, 0xae, 0x41, 0x9f, 0x04, 0xd4, 0x12, 0x3f, 0x13, 0xd3, 0xa6, 0xc4, 0x3a, 0xe2, 0xc9, 0x92,
	0x0f, 0x89, 0x6b, 0xdd, 0xa5, 0x2e, 0x95, 0xf6, 0xf8, 0xaf, 0xc4, 0xda, 0x76, 0x29, 0x75, 0x3d,
	0x6c, 0x89, 0xa7, 0xf1, 0xe9, 0x4f, 0x16, 0x27, 0x3e, 0x66, 0x1c, 0xfa, 0xa1, 0x04, 0x74, 0x5f,
	0x69, 0xa0, 0x7e, 0xc0, 0xdc, 0xaf, 0x3c, 0x48, 0xfc, 0x21, 0x24, 0xde, 0x54, 0xef, 0x83, 0xbb,
	0x93, 0xf8, 0x09, 0x47, 0x86, 0xd6, 0xd1, 0x7a, 0xcb, 0x03, 0xe3, 0xb7, 0x5f, 0x9f, 0xac, 0x27,
	0x67, 0xed, 0x22, 0x14, 0x61, 0xc6, 0x0e, 0x79, 0x44, 0x02, 0xd7, 0x4e, 0x81, 0xfa, 0x16, 0x00,
	0xc9, 0x75, 0x1c, 0x82, 0x8c, 0x3b, 0x71, 0x98, 0xbd, 0x9c, 0x58, 0xf6, 0xd0, 0xce, 0x67, 0x3f,
	0x7f, 0x7c, 0xfb, 0x38, 0x05, 0xbf, 0xfa, 0xf8, 0xf6, 0xf1, 0x46, 0x5a, 0x15, 0xe5, 0xe8, 0x6e,
	0x03, 0x6c, 0x28, 0x06, 0x1b, 0xb3, 0x90, 0x06, 0x0c, 0x2b, 0x59, 0x8e, 0x60, 0xf4, 0x7f, 0x65,
	0x29, 0x8e, 0xce, 0x67, 0x29, 0x0c, 0x59, 0x96, 0xbf, 0x2c, 0x81, 0x7b, 0xb1, 0x27, 0xc2, 0x90,
	0xe3, 0x5d, 0x19, 0xab, 0x9b, 0x60, 0x11, 0x22, 0x9f, 0x04, 0xa5, 0x69, 0x4a, 0x58, 0x49, 0x92,
	0xfa, 0x36, 0x58, 0x89, 0xf0, 0x19, 0x8c, 0x90, 0x83, 0x70, 0x40, 0x7d, 0xa3, 0x22, 0x00, 0x35,
	0x69, 0x1b, 0xc6, 0x26, 0xfd, 0x5b, 0xd0, 0x40, 0x24, 0x1e, 0xb2, 0xf1, 0x29, 0x27, 0x34, 0x70,
	0x18, 0x87, 0x11, 0x77, 0x10, 0xe4, 0xd8, 0xa8, 0x76, 0xb4, 0x5e, 0xad, 0xdf, 0x34, 0xe5, 0x54,
	0x98, 0xe9, 0x54, 0x98, 0x47, 0xe9, 0x54, 0x0c, 0xaa, 0xaf, 0xff, 0x6a, 0x6b, 0xf6, 0x46, 0x9e,
	0xe0, 0x30, 0x8e, 0x1f, 0x42, 0x8e, 0xf5, 0x23, 0xa0, 0x38, 0x1c, 0x1c, 0x20, 0xc9, 0xbb, 0x38,
	0x27, 0xef, 0xfd, 0x7c, 0xf8, 0x28, 0x40, 0x82, 0x75, 0x04, 0xea, 0x13, 0x0f, 0x9e, 0x8d, 0xe1,
	0xe4, 0x44, 0xb2, 0x2d, 0xcd, 0xc9, 0xb6, 0x92, 0x86, 0x09, 0x9a, 0xef, 0x80, 0x21, 0x7a, 0xe7,
	0xf0, 0x69, 0x88, 0x1d, 0x84, 0x21, 0xf2, 0x48, 0x80, 0x25, 0xe3, 0xdd, 0x79, 0xef, 0x2d, 0x18,
	0x8e, 0xa6, 0x21, 0x1e, 0x26, 0xf1, 0x82, 0xfa, 0x10, 0xdc, 0xc7, 0x71, 0xa7, 0x1d, 0x79, 0x40,
	0x88, 0x03, 0xe8, 0xf1, 0xa9, 0xf1, 0x89, 0xe8, 0xe8, 0xa7, 0xef, 0x3e, 0xb4, 0x17, 0xfe, 0xfc,
	0xd0, 0x7e, 0x20, 0xbb, 0xca, 0xd0, 0x89, 0x49, 0xa8, 0xe5, 0x43, 0x7e, 0x6c, 0xee, 0x63, 0x17,
	0x4e, 0xa6, 0x43, 0x3c, 0xb1, 0xd7, 0x44, 0xbc, 0x98, 0x99, 0x6f, 0x64, 0xb4, 0xbe, 0x07, 0x66,
	0xd5, 0xa0, 0x91, 0x03, 0xe5, 0x30, 0x18, 0xcb, 0x25, 0x63, 0xa2, 0xe7, 0x82, 0x12, 0x8f, 0x3e,
	0x02, 0x6b, 0xd0, 0xf3, 0xe8, 0x04, 0xe6, 0x89, 0x40, 0x09, 0xd1, 0xbd, 0x2c, 0x24, 0xa5, 0xf9,
	0x12, 0xac, 0x7a, 0x24, 0x38, 0xc1, 0x33, 0x8e, 0x5a, 0x09, 0x47, 0x5d, 0xe2, 0x13, 0xe3, 0xce,
	0xa3, 0x58, 0x41, 0x72, 0x8e, 0x63, 0xfd, 0x18, 0x79, 0xfd, 0xe4, 0x45, 0xd1, 0x6d, 0x02, 0xe3,
	0xb2, 0xed, 0xb2, 0x8a, 0x9e, 0x87, 0xe8, 0x56, 0x45, 0xb7, 0x2a, 0xba, 0x55, 0x51, 0x5e, 0x45,
	0x8a, 0x28, 0x12, 0x15, 0x29, 0xb6, 0x4c, 0x45, 0x0c, 0xd4, 0x6d, 0x78, 0xb6, 0x2b, 0x93, 0x23,
	0x34, 0x88, 0x47, 0xfe, 0x94, 0xe5, 0x92, 0xd2, 0xe4, 0xc8, 0xc7, 0xb6, 0x59, 0xe6, 0x35, 0x98,
	0x05, 0x30, 0xa3, 0xda, 0xa9, 0xf4, 0x96, 0x07, 0x5b, 0x49, 0x63, 0x36, 0xae, 0x36, 0x66, 0x2f,
	0xe0, 0x76, 0x3e, 0xa2, 0xfb, 0xbb, 0x06, 0xd6, 0x0e, 0x98, 0xbb, 0x8b, 0xd0, 0xec, 0x60, 0x76,
	0xd3, 0xda, 0x1d, 0xa9, 0x59, 0x56, 0x3a, 0x95, 0x5e, 0xad, 0xbf, 0x65, 0xaa, 0x5b, 0x95, 0xa9,
	0x5c, 0x7e, 0x50, 0x8d, 0x2f, 0xa1, 0xe4, 0xba, 0xd3, 0x53, 0xab, 0xbc, 0x99, 0xab, 0xb2, 0x9a,
	0x7f, 0xf7, 0x01, 0xd8, 0xbc, 0x62, 0xcc, 0xea, 0xfc, 0xe6, 0x0e, 0x68, 0x64, 0x4d, 0x78, 0x1e,
	0x17, 0x73, 0x56, 0xf2, 0x1b, 0xbe, 0xf8, 0xb3, 0x4b, 0x1d, 0xac, 0x94, 0xb0, 0xde, 0x68, 0x6f,
	0x77, 0x4c, 0xb5, 0x5e, 0xed, 0x2b, 0x53, 0xa9, 0x5e, 0xbe, 0xbb, 0x0d, 0xda, 0xd7, 0xb8, 0xb2,
	0xda, 0xfd, 0xa3, 0x89, 0x37, 0xfd, 0x3e, 0x09, 0x4e, 0x92, 0x34, 0xf1, 0x8d, 0x4f, 0xcb, 0x43,
	0x90, 0xec, 0xdb, 0x6a, 0xd9, 0xec, 0xba, 0xb4, 0xa6, 0xe5, 0x79, 0x06, 0x56, 0x8e, 0x29, 0xe3,
	0x19, 0xa8, 0x5a, 0x56, 0xdb, 0x18, 0x3d, 0x87, 0x60, 0x95, 0xbb, 0x25, 0x82, 0x55, 0x6c, 0x69,
	0x31, 0xfa, 0x6f, 0x16, 0x41, 0xe5, 0x80, 0xb9, 0xba, 0x0d, 0x40, 0x6e, 0x19, 0xbf, 0x32, 0xd7,
	0xca, 0x7e, 0xdc, 0x7c, 0xf8, 0x9f, 0xee, 0x94, 0x3b, 0xe3, 0x94, 0xab, 0xf3, 0xb5, 0x9c, 0xc2,
	0x7d, 0x3d, 0xa7, 0xb2, 0xec, 0xea, 0x3f, 0x80, 0xba, 0xba, 0xe8, 0x76, 0x8a, 0xe2, 0xf2, 0x88,
	0x66, 0xaf, 0x0c, 0x91, 0x27, 0x57, 0xff, 0xff, 0x17, 0x91, 0x2b, 0x88, 0x42, 0xf2, 0xc2, 0x57,
	0xa3, 0xfe, 0x23, 0x58, 0xbd, 0xf4, 0x86, 0xda, 0x2e, 0x88, 0x55, 0x21, 0xcd, 0xcf, 0x4b, 0x21,
	0x19, 0x7f, 0x08, 0xd6, 0x0b, 0x5f, 0x07, 0x8f, 0xae, 0xcd, 0x50, 0x05, 0x36, 0xad, 0x39, 0x81,
	0xf9, 0x72, 0xa9, 0x22, 0x2a, 0x2a, 0x97, 0x82, 0x28, 0x2c, 0x57, 0xe1, 0x60, 0x0e, 0xbe, 0x7e,
	0x77, 0xde, 0xd2, 0xde, 0x9f, 0xb7, 0xb4, 0xbf, 0xcf, 0x5b, 0xda, 0xeb, 0x8b, 0xd6, 0xc2, 0xfb,
	0x8b, 0xd6, 0xc2, 0x1f, 0x17, 0xad, 0x85, 0xef, 0x9f, 0xba, 0x84, 0x1f, 0x9f, 0x8e, 0xcd, 0x09,
	0xf5, 0xad, 0x43, 0xc1, 0xf6, 0x64, 0x1f, 0x8e, 0x99, 0x95, 0x7c, 0xf9, 0xbe, 0xe8, 0xf7, 0xad,
	0x97, 0xb3, 0xef, 0xdf, 0x69, 0x88, 0xd9, 0x78, 0x49, 0x2c, 0x0d, 0x5f, 0xfc, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x90, 0xc3, 0x66, 0x7f, 0x1e, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// User transaction to claim all the pending daily airdrop rewards
	ClaimDaily(ctx context.Context, in *MsgClaimDaily, opts ...grpc.CallOption) (*MsgClaimDailyResponse, error)
	// User transaction to claim a portion of their total amount now, and forfeit
	// the remainder to be clawed back
	ClaimEarly(ctx context.Context, in *MsgClaimEarly, opts ...grpc.CallOption) (*MsgClaimEarlyResponse, error)
	// Admin transaction to create a new airdrop
	CreateAirdrop(ctx context.Context, in *MsgCreateAirdrop, opts ...grpc.CallOption) (*MsgCreateAirdropResponse, error)
	// Admin transaction to update an existing airdrop
	UpdateAirdrop(ctx context.Context, in *MsgUpdateAirdrop, opts ...grpc.CallOption) (*MsgUpdateAirdropResponse, error)
	// Admin transaction to add multiple user allocations for a given airdrop
	AddAllocations(ctx context.Context, in *MsgAddAllocations, opts ...grpc.CallOption) (*MsgAddAllocationsResponse, error)
	// Admin transaction to update a user's allocation to an airdrop
	UpdateUserAllocation(ctx context.Context, in *MsgUpdateUserAllocation, opts ...grpc.CallOption) (*MsgUpdateUserAllocationResponse, error)
	// Admin address to link a stride and non-stride address, merging their
	// allocations
	LinkAddresses(ctx context.Context, in *MsgLinkAddresses, opts ...grpc.CallOption) (*MsgLinkAddressesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ClaimDaily(ctx context.Context, in *MsgClaimDaily, opts ...grpc.CallOption) (*MsgClaimDailyResponse, error) {
	out := new(MsgClaimDailyResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Msg/ClaimDaily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimEarly(ctx context.Context, in *MsgClaimEarly, opts ...grpc.CallOption) (*MsgClaimEarlyResponse, error) {
	out := new(MsgClaimEarlyResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Msg/ClaimEarly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAirdrop(ctx context.Context, in *MsgCreateAirdrop, opts ...grpc.CallOption) (*MsgCreateAirdropResponse, error) {
	out := new(MsgCreateAirdropResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Msg/CreateAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAirdrop(ctx context.Context, in *MsgUpdateAirdrop, opts ...grpc.CallOption) (*MsgUpdateAirdropResponse, error) {
	out := new(MsgUpdateAirdropResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Msg/UpdateAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAllocations(ctx context.Context, in *MsgAddAllocations, opts ...grpc.CallOption) (*MsgAddAllocationsResponse, error) {
	out := new(MsgAddAllocationsResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Msg/AddAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUserAllocation(ctx context.Context, in *MsgUpdateUserAllocation, opts ...grpc.CallOption) (*MsgUpdateUserAllocationResponse, error) {
	out := new(MsgUpdateUserAllocationResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Msg/UpdateUserAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LinkAddresses(ctx context.Context, in *MsgLinkAddresses, opts ...grpc.CallOption) (*MsgLinkAddressesResponse, error) {
	out := new(MsgLinkAddressesResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Msg/LinkAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// User transaction to claim all the pending daily airdrop rewards
	ClaimDaily(context.Context, *MsgClaimDaily) (*MsgClaimDailyResponse, error)
	// User transaction to claim a portion of their total amount now, and forfeit
	// the remainder to be clawed back
	ClaimEarly(context.Context, *MsgClaimEarly) (*MsgClaimEarlyResponse, error)
	// Admin transaction to create a new airdrop
	CreateAirdrop(context.Context, *MsgCreateAirdrop) (*MsgCreateAirdropResponse, error)
	// Admin transaction to update an existing airdrop
	UpdateAirdrop(context.Context, *MsgUpdateAirdrop) (*MsgUpdateAirdropResponse, error)
	// Admin transaction to add multiple user allocations for a given airdrop
	AddAllocations(context.Context, *MsgAddAllocations) (*MsgAddAllocationsResponse, error)
	// Admin transaction to update a user's allocation to an airdrop
	UpdateUserAllocation(context.Context, *MsgUpdateUserAllocation) (*MsgUpdateUserAllocationResponse, error)
	// Admin address to link a stride and non-stride address, merging their
	// allocations
	LinkAddresses(context.Context, *MsgLinkAddresses) (*MsgLinkAddressesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ClaimDaily(ctx context.Context, req *MsgClaimDaily) (*MsgClaimDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimDaily not implemented")
}
func (*UnimplementedMsgServer) ClaimEarly(ctx context.Context, req *MsgClaimEarly) (*MsgClaimEarlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimEarly not implemented")
}
func (*UnimplementedMsgServer) CreateAirdrop(ctx context.Context, req *MsgCreateAirdrop) (*MsgCreateAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirdrop not implemented")
}
func (*UnimplementedMsgServer) UpdateAirdrop(ctx context.Context, req *MsgUpdateAirdrop) (*MsgUpdateAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirdrop not implemented")
}
func (*UnimplementedMsgServer) AddAllocations(ctx context.Context, req *MsgAddAllocations) (*MsgAddAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAllocations not implemented")
}
func (*UnimplementedMsgServer) UpdateUserAllocation(ctx context.Context, req *MsgUpdateUserAllocation) (*MsgUpdateUserAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAllocation not implemented")
}
func (*UnimplementedMsgServer) LinkAddresses(ctx context.Context, req *MsgLinkAddresses) (*MsgLinkAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAddresses not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ClaimDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimDaily)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Msg/ClaimDaily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimDaily(ctx, req.(*MsgClaimDaily))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimEarly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimEarly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimEarly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Msg/ClaimEarly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimEarly(ctx, req.(*MsgClaimEarly))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAirdrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Msg/CreateAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAirdrop(ctx, req.(*MsgCreateAirdrop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAirdrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Msg/UpdateAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAirdrop(ctx, req.(*MsgUpdateAirdrop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAllocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Msg/AddAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAllocations(ctx, req.(*MsgAddAllocations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUserAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUserAllocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUserAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Msg/UpdateUserAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUserAllocation(ctx, req.(*MsgUpdateUserAllocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LinkAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLinkAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LinkAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Msg/LinkAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LinkAddresses(ctx, req.(*MsgLinkAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.airdrop.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimDaily",
			Handler:    _Msg_ClaimDaily_Handler,
		},
		{
			MethodName: "ClaimEarly",
			Handler:    _Msg_ClaimEarly_Handler,
		},
		{
			MethodName: "CreateAirdrop",
			Handler:    _Msg_CreateAirdrop_Handler,
		},
		{
			MethodName: "UpdateAirdrop",
			Handler:    _Msg_UpdateAirdrop_Handler,
		},
		{
			MethodName: "AddAllocations",
			Handler:    _Msg_AddAllocations_Handler,
		},
		{
			MethodName: "UpdateUserAllocation",
			Handler:    _Msg_UpdateUserAllocation_Handler,
		},
		{
			MethodName: "LinkAddresses",
			Handler:    _Msg_LinkAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/airdrop/tx.proto",
}

func (m *MsgClaimDaily) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimDaily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimDaily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimDailyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimDailyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimDailyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimEarly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimEarly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimEarly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claimer) > 0 {
		i -= len(m.Claimer)
		copy(dAtA[i:], m.Claimer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Claimer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimEarlyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimEarlyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimEarlyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LinkerAddress) > 0 {
		i -= len(m.LinkerAddress)
		copy(dAtA[i:], m.LinkerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LinkerAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AllocatorAddress) > 0 {
		i -= len(m.AllocatorAddress)
		copy(dAtA[i:], m.AllocatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AllocatorAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DistributorAddress) > 0 {
		i -= len(m.DistributorAddress)
		copy(dAtA[i:], m.DistributorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DistributorAddress)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.EarlyClaimPenalty.Size()
		i -= size
		if _, err := m.EarlyClaimPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.ClaimTypeDeadlineDate != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClaimTypeDeadlineDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTx(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x3a
	}
	if m.ClawbackDate != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClawbackDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x32
	}
	if m.DistributionEndDate != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionEndDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTx(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x2a
	}
	if m.DistributionStartDate != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionStartDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintTx(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAirdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAirdrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAirdrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LinkerAddress) > 0 {
		i -= len(m.LinkerAddress)
		copy(dAtA[i:], m.LinkerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LinkerAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AllocatorAddress) > 0 {
		i -= len(m.AllocatorAddress)
		copy(dAtA[i:], m.AllocatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AllocatorAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DistributorAddress) > 0 {
		i -= len(m.DistributorAddress)
		copy(dAtA[i:], m.DistributorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DistributorAddress)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.EarlyClaimPenalty.Size()
		i -= size
		if _, err := m.EarlyClaimPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.ClaimTypeDeadlineDate != nil {
		n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClaimTypeDeadlineDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintTx(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x3a
	}
	if m.ClawbackDate != nil {
		n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClawbackDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintTx(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x32
	}
	if m.DistributionEndDate != nil {
		n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionEndDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintTx(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x2a
	}
	if m.DistributionStartDate != nil {
		n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionStartDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintTx(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RawAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Allocations[iNdEx].Size()
				i -= size
				if _, err := m.Allocations[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAllocations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAllocations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAllocations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUserAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUserAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUserAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Allocations[iNdEx].Size()
				i -= size
				if _, err := m.Allocations[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUserAllocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUserAllocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUserAllocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLinkAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLinkAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLinkAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StrideAddress) > 0 {
		i -= len(m.StrideAddress)
		copy(dAtA[i:], m.StrideAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StrideAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLinkAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLinkAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLinkAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgClaimDaily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimDailyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimEarly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Claimer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimEarlyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateAirdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DistributionStartDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DistributionEndDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClawbackDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClaimTypeDeadlineDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate)
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.EarlyClaimPenalty.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DistributorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AllocatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LinkerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAirdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DistributionStartDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DistributionEndDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClawbackDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClaimTypeDeadlineDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate)
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.EarlyClaimPenalty.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DistributorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AllocatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LinkerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RawAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddAllocations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateUserAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateUserAllocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLinkAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StrideAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLinkAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgClaimDaily) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimDaily: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimDaily: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimDailyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimDailyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimDailyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimEarly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimEarly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimEarly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimEarlyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimEarlyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimEarlyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionStartDate == nil {
				m.DistributionStartDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionStartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionEndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionEndDate == nil {
				m.DistributionEndDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionEndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClawbackDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClawbackDate == nil {
				m.ClawbackDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClawbackDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTypeDeadlineDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimTypeDeadlineDate == nil {
				m.ClaimTypeDeadlineDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClaimTypeDeadlineDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarlyClaimPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarlyClaimPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAirdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAirdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAirdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionStartDate == nil {
				m.DistributionStartDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionStartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionEndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionEndDate == nil {
				m.DistributionEndDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionEndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClawbackDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClawbackDate == nil {
				m.ClawbackDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClawbackDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTypeDeadlineDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimTypeDeadlineDate == nil {
				m.ClaimTypeDeadlineDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClaimTypeDeadlineDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarlyClaimPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarlyClaimPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Allocations = append(m.Allocations, v)
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAllocations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAllocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAllocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocations = append(m.Allocations, RawAllocation{})
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUserAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUserAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUserAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Allocations = append(m.Allocations, v)
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUserAllocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUserAllocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUserAllocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLinkAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLinkAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLinkAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrideAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrideAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLinkAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLinkAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLinkAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
