// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/airdrop/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Airdrop
type QueryAirdropRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAirdropRequest) Reset()         { *m = QueryAirdropRequest{} }
func (m *QueryAirdropRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAirdropRequest) ProtoMessage()    {}
func (*QueryAirdropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{0}
}
func (m *QueryAirdropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirdropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirdropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirdropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirdropRequest.Merge(m, src)
}
func (m *QueryAirdropRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirdropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirdropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirdropRequest proto.InternalMessageInfo

func (m *QueryAirdropRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryAirdropResponse struct {
	Airdrop *Airdrop `protobuf:"bytes,1,opt,name=airdrop,proto3" json:"airdrop,omitempty"`
}

func (m *QueryAirdropResponse) Reset()         { *m = QueryAirdropResponse{} }
func (m *QueryAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAirdropResponse) ProtoMessage()    {}
func (*QueryAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{1}
}
func (m *QueryAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirdropResponse.Merge(m, src)
}
func (m *QueryAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirdropResponse proto.InternalMessageInfo

func (m *QueryAirdropResponse) GetAirdrop() *Airdrop {
	if m != nil {
		return m.Airdrop
	}
	return nil
}

// Airdrops
type QueryAllAirdropsRequest struct {
}

func (m *QueryAllAirdropsRequest) Reset()         { *m = QueryAllAirdropsRequest{} }
func (m *QueryAllAirdropsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAirdropsRequest) ProtoMessage()    {}
func (*QueryAllAirdropsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{2}
}
func (m *QueryAllAirdropsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAirdropsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAirdropsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAirdropsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAirdropsRequest.Merge(m, src)
}
func (m *QueryAllAirdropsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAirdropsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAirdropsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAirdropsRequest proto.InternalMessageInfo

type QueryAllAirdropsResponse struct {
	Airdrops []Airdrop `protobuf:"bytes,1,rep,name=airdrops,proto3" json:"airdrops"`
}

func (m *QueryAllAirdropsResponse) Reset()         { *m = QueryAllAirdropsResponse{} }
func (m *QueryAllAirdropsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAirdropsResponse) ProtoMessage()    {}
func (*QueryAllAirdropsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{3}
}
func (m *QueryAllAirdropsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAirdropsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAirdropsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAirdropsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAirdropsResponse.Merge(m, src)
}
func (m *QueryAllAirdropsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAirdropsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAirdropsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAirdropsResponse proto.InternalMessageInfo

func (m *QueryAllAirdropsResponse) GetAirdrops() []Airdrop {
	if m != nil {
		return m.Airdrops
	}
	return nil
}

// UserAllocation
type QueryUserAllocationRequest struct {
	AirdropId string `protobuf:"bytes,1,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserAllocationRequest) Reset()         { *m = QueryUserAllocationRequest{} }
func (m *QueryUserAllocationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserAllocationRequest) ProtoMessage()    {}
func (*QueryUserAllocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{4}
}
func (m *QueryUserAllocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserAllocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserAllocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserAllocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserAllocationRequest.Merge(m, src)
}
func (m *QueryUserAllocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserAllocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserAllocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserAllocationRequest proto.InternalMessageInfo

func (m *QueryUserAllocationRequest) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *QueryUserAllocationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryUserAllocationResponse struct {
	UserAllocation *UserAllocation `protobuf:"bytes,1,opt,name=user_allocation,json=userAllocation,proto3" json:"user_allocation,omitempty"`
}

func (m *QueryUserAllocationResponse) Reset()         { *m = QueryUserAllocationResponse{} }
func (m *QueryUserAllocationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserAllocationResponse) ProtoMessage()    {}
func (*QueryUserAllocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{5}
}
func (m *QueryUserAllocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserAllocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserAllocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserAllocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserAllocationResponse.Merge(m, src)
}
func (m *QueryUserAllocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserAllocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserAllocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserAllocationResponse proto.InternalMessageInfo

func (m *QueryUserAllocationResponse) GetUserAllocation() *UserAllocation {
	if m != nil {
		return m.UserAllocation
	}
	return nil
}

// UserAllocations
type QueryUserAllocationsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserAllocationsRequest) Reset()         { *m = QueryUserAllocationsRequest{} }
func (m *QueryUserAllocationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserAllocationsRequest) ProtoMessage()    {}
func (*QueryUserAllocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{6}
}
func (m *QueryUserAllocationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserAllocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserAllocationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserAllocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserAllocationsRequest.Merge(m, src)
}
func (m *QueryUserAllocationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserAllocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserAllocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserAllocationsRequest proto.InternalMessageInfo

func (m *QueryUserAllocationsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryUserAllocationsResponse struct {
	UserAllocations []UserAllocation `protobuf:"bytes,1,rep,name=user_allocations,json=userAllocations,proto3" json:"user_allocations"`
}

func (m *QueryUserAllocationsResponse) Reset()         { *m = QueryUserAllocationsResponse{} }
func (m *QueryUserAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserAllocationsResponse) ProtoMessage()    {}
func (*QueryUserAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{7}
}
func (m *QueryUserAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserAllocationsResponse.Merge(m, src)
}
func (m *QueryUserAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserAllocationsResponse proto.InternalMessageInfo

func (m *QueryUserAllocationsResponse) GetUserAllocations() []UserAllocation {
	if m != nil {
		return m.UserAllocations
	}
	return nil
}

// AllAllocations
type QueryAllAllocationsRequest struct {
	AirdropId  string             `protobuf:"bytes,1,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllocationsRequest) Reset()         { *m = QueryAllAllocationsRequest{} }
func (m *QueryAllAllocationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllocationsRequest) ProtoMessage()    {}
func (*QueryAllAllocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{8}
}
func (m *QueryAllAllocationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllocationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllocationsRequest.Merge(m, src)
}
func (m *QueryAllAllocationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllocationsRequest proto.InternalMessageInfo

func (m *QueryAllAllocationsRequest) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *QueryAllAllocationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAllocationsResponse struct {
	Allocations []UserAllocation    `protobuf:"bytes,1,rep,name=allocations,proto3" json:"allocations"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllocationsResponse) Reset()         { *m = QueryAllAllocationsResponse{} }
func (m *QueryAllAllocationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllocationsResponse) ProtoMessage()    {}
func (*QueryAllAllocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{9}
}
func (m *QueryAllAllocationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllocationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllocationsResponse.Merge(m, src)
}
func (m *QueryAllAllocationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllocationsResponse proto.InternalMessageInfo

func (m *QueryAllAllocationsResponse) GetAllocations() []UserAllocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

func (m *QueryAllAllocationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// UserSummary
type QueryUserSummaryRequest struct {
	AirdropId string `protobuf:"bytes,1,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryUserSummaryRequest) Reset()         { *m = QueryUserSummaryRequest{} }
func (m *QueryUserSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserSummaryRequest) ProtoMessage()    {}
func (*QueryUserSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{10}
}
func (m *QueryUserSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserSummaryRequest.Merge(m, src)
}
func (m *QueryUserSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserSummaryRequest proto.InternalMessageInfo

func (m *QueryUserSummaryRequest) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *QueryUserSummaryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryUserSummaryResponse struct {
	// The claim type (claim daily or claim early)
	ClaimType string `protobuf:"bytes,1,opt,name=claim_type,json=claimType,proto3" json:"claim_type,omitempty"`
	// The total rewards claimed so far
	Claimed github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=claimed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"claimed"`
	// The total rewards forfeited (in the case of claiming early)
	Forfeited github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=forfeited,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"forfeited"`
	// The total rewards remaining
	Remaining github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=remaining,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"remaining"`
	// The total rewards that can be claimed right now
	Claimable github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=claimable,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"claimable"`
	// The current date index into the airdrop array
	CurrentDateIndex int64 `protobuf:"varint,6,opt,name=current_date_index,json=currentDateIndex,proto3" json:"current_date_index,omitempty"`
}

func (m *QueryUserSummaryResponse) Reset()         { *m = QueryUserSummaryResponse{} }
func (m *QueryUserSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserSummaryResponse) ProtoMessage()    {}
func (*QueryUserSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd033986bfea74, []int{11}
}
func (m *QueryUserSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserSummaryResponse.Merge(m, src)
}
func (m *QueryUserSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserSummaryResponse proto.InternalMessageInfo

func (m *QueryUserSummaryResponse) GetClaimType() string {
	if m != nil {
		return m.ClaimType
	}
	return ""
}

func (m *QueryUserSummaryResponse) GetCurrentDateIndex() int64 {
	if m != nil {
		return m.CurrentDateIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryAirdropRequest)(nil), "stride.airdrop.QueryAirdropRequest")
	proto.RegisterType((*QueryAirdropResponse)(nil), "stride.airdrop.QueryAirdropResponse")
	proto.RegisterType((*QueryAllAirdropsRequest)(nil), "stride.airdrop.QueryAllAirdropsRequest")
	proto.RegisterType((*QueryAllAirdropsResponse)(nil), "stride.airdrop.QueryAllAirdropsResponse")
	proto.RegisterType((*QueryUserAllocationRequest)(nil), "stride.airdrop.QueryUserAllocationRequest")
	proto.RegisterType((*QueryUserAllocationResponse)(nil), "stride.airdrop.QueryUserAllocationResponse")
	proto.RegisterType((*QueryUserAllocationsRequest)(nil), "stride.airdrop.QueryUserAllocationsRequest")
	proto.RegisterType((*QueryUserAllocationsResponse)(nil), "stride.airdrop.QueryUserAllocationsResponse")
	proto.RegisterType((*QueryAllAllocationsRequest)(nil), "stride.airdrop.QueryAllAllocationsRequest")
	proto.RegisterType((*QueryAllAllocationsResponse)(nil), "stride.airdrop.QueryAllAllocationsResponse")
	proto.RegisterType((*QueryUserSummaryRequest)(nil), "stride.airdrop.QueryUserSummaryRequest")
	proto.RegisterType((*QueryUserSummaryResponse)(nil), "stride.airdrop.QueryUserSummaryResponse")
}

func init() { proto.RegisterFile("stride/airdrop/query.proto", fileDescriptor_28cd033986bfea74) }

var fileDescriptor_28cd033986bfea74 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0xbb, 0x1b, 0x3a, 0x91, 0xd2, 0xd5, 0x50, 0x69, 0xbd, 0xa1, 0x9b, 0xad, 0xcc,
	0xd2, 0x8d, 0x4a, 0x6b, 0x93, 0x54, 0x42, 0x85, 0x03, 0x90, 0xa8, 0x6a, 0x09, 0x54, 0x82, 0xa6,
	0xf4, 0xc2, 0x25, 0x9a, 0xc4, 0x53, 0x63, 0xe1, 0x78, 0x52, 0x8f, 0x53, 0x35, 0xaa, 0x7a, 0x01,
	0x89, 0x23, 0x42, 0xe2, 0xc8, 0x5f, 0x80, 0x40, 0x9c, 0xe0, 0x7f, 0xe8, 0xb1, 0x82, 0x0b, 0xe2,
	0x50, 0xa1, 0x94, 0x3f, 0x04, 0x79, 0xfc, 0x9c, 0xc4, 0x8e, 0xf3, 0x83, 0x48, 0x9c, 0x62, 0xcf,
	0xfb, 0xe6, 0xfb, 0xbe, 0xf7, 0x66, 0xde, 0x73, 0x70, 0x41, 0x78, 0xae, 0x65, 0x30, 0x9d, 0x5a,
	0xae, 0xe1, 0xf2, 0xae, 0x7e, 0xde, 0x63, 0x6e, 0x5f, 0xeb, 0xba, 0xdc, 0xe3, 0x24, 0x1f, 0xc4,
	0x34, 0x88, 0x15, 0xd6, 0x63, 0x58, 0xf8, 0x0d, 0xd0, 0x85, 0x35, 0x93, 0x9b, 0x5c, 0x3e, 0xea,
	0xfe, 0x13, 0xac, 0xae, 0x9b, 0x9c, 0x9b, 0x36, 0xd3, 0x69, 0xd7, 0xd2, 0xa9, 0xe3, 0x70, 0x8f,
	0x7a, 0x16, 0x77, 0x04, 0x44, 0xb7, 0xda, 0x5c, 0x74, 0xb8, 0xd0, 0x5b, 0x54, 0xb0, 0x40, 0x5a,
	0xbf, 0x28, 0xb7, 0x98, 0x47, 0xcb, 0x7a, 0x97, 0x9a, 0x96, 0x23, 0xc1, 0x80, 0x7d, 0x1a, 0x60,
	0x9b, 0x81, 0x44, 0xf0, 0x12, 0x84, 0xd4, 0x37, 0xf0, 0xab, 0xc7, 0xfe, 0xe6, 0x6a, 0x60, 0xa8,
	0xc1, 0xce, 0x7b, 0x4c, 0x78, 0x24, 0x8f, 0xd3, 0x96, 0xa1, 0xa0, 0x0d, 0x54, 0x5a, 0x69, 0xa4,
	0x2d, 0x43, 0xad, 0xe3, 0xb5, 0x28, 0x4c, 0x74, 0xb9, 0x23, 0x18, 0x29, 0xe3, 0x2c, 0xa4, 0x22,
	0xc1, 0xb9, 0xca, 0x13, 0x2d, 0x9a, 0xb9, 0x16, 0xee, 0x08, 0x71, 0xea, 0x53, 0xfc, 0x24, 0xa0,
	0xb2, 0x6d, 0x88, 0x09, 0x50, 0x55, 0x4f, 0xb1, 0x32, 0x19, 0x02, 0xa5, 0x77, 0xf0, 0x2b, 0xc0,
	0x20, 0x14, 0xb4, 0x91, 0x99, 0x21, 0x55, 0x7b, 0x70, 0x73, 0xf7, 0x3c, 0xd5, 0x18, 0xc2, 0x55,
	0x8e, 0x0b, 0x92, 0xf6, 0x54, 0x30, 0xb7, 0x6a, 0xdb, 0xbc, 0x2d, 0x6b, 0x13, 0xa6, 0xfa, 0x0c,
	0x63, 0x40, 0x36, 0x87, 0x29, 0xaf, 0xc0, 0x4a, 0xdd, 0x20, 0x15, 0x9c, 0xa5, 0x86, 0xe1, 0x32,
	0x21, 0x94, 0xb4, 0x1f, 0xab, 0x29, 0xbf, 0xff, 0xba, 0xb3, 0x06, 0x35, 0xac, 0x06, 0x91, 0x13,
	0xcf, 0xb5, 0x1c, 0xb3, 0x11, 0x02, 0xd5, 0x33, 0xfc, 0x5a, 0xa2, 0x20, 0xa4, 0x72, 0x88, 0x57,
	0x7b, 0x82, 0xb9, 0x4d, 0x3a, 0x0c, 0x41, 0xf1, 0x8a, 0xf1, 0x8c, 0x62, 0x04, 0xf9, 0x5e, 0xe4,
	0x5d, 0x3d, 0x4e, 0xd4, 0x09, 0xcb, 0x39, 0x6e, 0x1d, 0x2d, 0x6a, 0x9d, 0xe3, 0xf5, 0x64, 0x4a,
	0xf0, 0xfe, 0x09, 0x7e, 0x1c, 0xf3, 0x1e, 0x1e, 0xc7, 0x1c, 0xf3, 0x70, 0x2a, 0xab, 0xd1, 0x14,
	0x84, 0xfa, 0x35, 0x82, 0xd3, 0xf1, 0x0f, 0x7d, 0x32, 0x87, 0x39, 0xa7, 0x73, 0x80, 0xf1, 0xe8,
	0xb6, 0xcb, 0x03, 0xca, 0x55, 0x36, 0x35, 0x48, 0xd1, 0x6f, 0x0d, 0x2d, 0xe8, 0x4a, 0x68, 0x0d,
	0xed, 0x53, 0x6a, 0x32, 0xa0, 0x6e, 0x8c, 0xed, 0x54, 0x7f, 0x41, 0x50, 0xca, 0xb8, 0x0b, 0x48,
	0xfb, 0x00, 0xe7, 0x96, 0xcd, 0x78, 0x7c, 0x23, 0x39, 0x4c, 0xf0, 0xfb, 0x72, 0xae, 0xdf, 0xc0,
	0x44, 0xc4, 0xb0, 0x0d, 0x5d, 0xe4, 0x4b, 0x9e, 0xf4, 0x3a, 0x1d, 0xea, 0xf6, 0xff, 0xc7, 0x0b,
	0xfd, 0x43, 0x06, 0x3a, 0x33, 0x22, 0x07, 0xb5, 0x79, 0x86, 0x71, 0xdb, 0xa6, 0x56, 0xa7, 0xe9,
	0xf5, 0xbb, 0x2c, 0xd4, 0x93, 0x2b, 0x9f, 0xf5, 0xbb, 0x8c, 0x7c, 0x88, 0xb3, 0xf2, 0x85, 0x19,
	0xa0, 0xa7, 0xf9, 0x65, 0xf9, 0xeb, 0xee, 0xf9, 0xa6, 0x69, 0x79, 0x5f, 0xf4, 0x5a, 0x5a, 0x9b,
	0x77, 0x60, 0x26, 0xc1, 0xcf, 0x8e, 0x30, 0xbe, 0xd4, 0x7d, 0x32, 0xa1, 0xd5, 0x1d, 0xaf, 0x11,
	0x6e, 0x27, 0x47, 0x78, 0xe5, 0x8c, 0xbb, 0x67, 0xcc, 0xf2, 0x98, 0xa1, 0x64, 0x96, 0xe2, 0x1a,
	0x11, 0xf8, 0x6c, 0x2e, 0xeb, 0x50, 0xcb, 0xb1, 0x1c, 0x53, 0x79, 0xb0, 0x1c, 0xdb, 0x90, 0xc0,
	0x67, 0x93, 0x36, 0x69, 0xcb, 0x66, 0xca, 0xc3, 0xe5, 0xd8, 0x86, 0x04, 0x64, 0x1b, 0x93, 0x76,
	0xcf, 0x75, 0x99, 0xe3, 0x35, 0x0d, 0xea, 0xb1, 0xa6, 0xe5, 0x18, 0xec, 0x52, 0x79, 0xb4, 0x81,
	0x4a, 0x99, 0xc6, 0x63, 0x88, 0xec, 0x53, 0x8f, 0xd5, 0xfd, 0xf5, 0xca, 0x20, 0x8b, 0x1f, 0xca,
	0xd3, 0x21, 0xdf, 0x20, 0x9c, 0x85, 0x29, 0x48, 0x5e, 0x8f, 0xdf, 0xce, 0x84, 0x39, 0x5f, 0x78,
	0x31, 0x1b, 0x14, 0x9c, 0xb0, 0xfa, 0xd6, 0x57, 0x7f, 0xfc, 0xf3, 0x7d, 0x7a, 0x8b, 0x94, 0xf4,
	0x13, 0x89, 0xde, 0x39, 0xa2, 0x2d, 0xa1, 0x27, 0x7f, 0xd2, 0xf4, 0x2b, 0xcb, 0xb8, 0x26, 0xdf,
	0x22, 0x9c, 0x1b, 0x9b, 0xe2, 0xe4, 0x65, 0xb2, 0xce, 0xc4, 0x27, 0xa0, 0x50, 0x9a, 0x0f, 0x04,
	0x53, 0xdb, 0xd2, 0xd4, 0x26, 0x79, 0xb1, 0x80, 0x29, 0x41, 0x7e, 0x43, 0x38, 0x1f, 0x6d, 0x4f,
	0xb2, 0x95, 0x28, 0x95, 0xf8, 0x91, 0x28, 0xbc, 0xb9, 0x10, 0x16, 0x9c, 0x7d, 0x24, 0x9d, 0xed,
	0x93, 0xda, 0x2c, 0x67, 0xb1, 0x29, 0xaa, 0x5f, 0x8d, 0x7a, 0xf6, 0x5a, 0xbf, 0x82, 0xc6, 0xbb,
	0x26, 0x3f, 0x23, 0xbc, 0x1a, 0x9b, 0xc5, 0x64, 0x11, 0x33, 0xc3, 0x82, 0x6e, 0x2f, 0x06, 0x06,
	0xeb, 0xef, 0x49, 0xeb, 0x7b, 0xe4, 0xed, 0xff, 0x60, 0x5d, 0x8c, 0xd9, 0xfd, 0x09, 0xe1, 0x7c,
	0x74, 0x84, 0x4e, 0x29, 0x73, 0xe2, 0xb4, 0x9f, 0x52, 0xe6, 0xe4, 0x99, 0xac, 0x7e, 0x20, 0xbd,
	0xbe, 0x4b, 0xf6, 0x66, 0x5e, 0x00, 0xdb, 0x8e, 0x59, 0x1d, 0x95, 0x99, 0xfc, 0x88, 0x70, 0x6e,
	0x6c, 0xa2, 0x4d, 0xb9, 0xa5, 0x93, 0x23, 0x76, 0xca, 0x2d, 0x4d, 0x18, 0x8e, 0xea, 0xa1, 0x34,
	0x59, 0x25, 0xef, 0xcf, 0x2d, 0xa8, 0x08, 0x76, 0x4e, 0xb9, 0x08, 0xb5, 0x8f, 0x6f, 0x06, 0x45,
	0x74, 0x3b, 0x28, 0xa2, 0xbf, 0x07, 0x45, 0xf4, 0xdd, 0x7d, 0x31, 0x75, 0x7b, 0x5f, 0x4c, 0xfd,
	0x79, 0x5f, 0x4c, 0x7d, 0x5e, 0x1e, 0x9b, 0x2f, 0x09, 0x22, 0x17, 0x95, 0x5d, 0xfd, 0x72, 0x28,
	0x25, 0xc7, 0x4d, 0xeb, 0x91, 0xfc, 0xf3, 0xb7, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0xe1, 0x6a, 0xda, 0xc3, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries the configuration for a given airdrop
	Airdrop(ctx context.Context, in *QueryAirdropRequest, opts ...grpc.CallOption) (*QueryAirdropResponse, error)
	// Queries all airdrop configurations
	AllAirdrops(ctx context.Context, in *QueryAllAirdropsRequest, opts ...grpc.CallOption) (*QueryAllAirdropsResponse, error)
	// Queries the allocation for a given user for an airdrop
	UserAllocation(ctx context.Context, in *QueryUserAllocationRequest, opts ...grpc.CallOption) (*QueryUserAllocationResponse, error)
	// Queries the allocations for a given user across all airdrops
	UserAllocations(ctx context.Context, in *QueryUserAllocationsRequest, opts ...grpc.CallOption) (*QueryUserAllocationsResponse, error)
	// Queries all allocations across all addresses
	AllAllocations(ctx context.Context, in *QueryAllAllocationsRequest, opts ...grpc.CallOption) (*QueryAllAllocationsResponse, error)
	// Queries the state of an address for an airdrop including the claim type,
	// amount claimed so far, and unclaimed amount
	UserSummary(ctx context.Context, in *QueryUserSummaryRequest, opts ...grpc.CallOption) (*QueryUserSummaryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Airdrop(ctx context.Context, in *QueryAirdropRequest, opts ...grpc.CallOption) (*QueryAirdropResponse, error) {
	out := new(QueryAirdropResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Query/Airdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllAirdrops(ctx context.Context, in *QueryAllAirdropsRequest, opts ...grpc.CallOption) (*QueryAllAirdropsResponse, error) {
	out := new(QueryAllAirdropsResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Query/AllAirdrops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserAllocation(ctx context.Context, in *QueryUserAllocationRequest, opts ...grpc.CallOption) (*QueryUserAllocationResponse, error) {
	out := new(QueryUserAllocationResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Query/UserAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserAllocations(ctx context.Context, in *QueryUserAllocationsRequest, opts ...grpc.CallOption) (*QueryUserAllocationsResponse, error) {
	out := new(QueryUserAllocationsResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Query/UserAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllAllocations(ctx context.Context, in *QueryAllAllocationsRequest, opts ...grpc.CallOption) (*QueryAllAllocationsResponse, error) {
	out := new(QueryAllAllocationsResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Query/AllAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserSummary(ctx context.Context, in *QueryUserSummaryRequest, opts ...grpc.CallOption) (*QueryUserSummaryResponse, error) {
	out := new(QueryUserSummaryResponse)
	err := c.cc.Invoke(ctx, "/stride.airdrop.Query/UserSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries the configuration for a given airdrop
	Airdrop(context.Context, *QueryAirdropRequest) (*QueryAirdropResponse, error)
	// Queries all airdrop configurations
	AllAirdrops(context.Context, *QueryAllAirdropsRequest) (*QueryAllAirdropsResponse, error)
	// Queries the allocation for a given user for an airdrop
	UserAllocation(context.Context, *QueryUserAllocationRequest) (*QueryUserAllocationResponse, error)
	// Queries the allocations for a given user across all airdrops
	UserAllocations(context.Context, *QueryUserAllocationsRequest) (*QueryUserAllocationsResponse, error)
	// Queries all allocations across all addresses
	AllAllocations(context.Context, *QueryAllAllocationsRequest) (*QueryAllAllocationsResponse, error)
	// Queries the state of an address for an airdrop including the claim type,
	// amount claimed so far, and unclaimed amount
	UserSummary(context.Context, *QueryUserSummaryRequest) (*QueryUserSummaryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Airdrop(ctx context.Context, req *QueryAirdropRequest) (*QueryAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Airdrop not implemented")
}
func (*UnimplementedQueryServer) AllAirdrops(ctx context.Context, req *QueryAllAirdropsRequest) (*QueryAllAirdropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAirdrops not implemented")
}
func (*UnimplementedQueryServer) UserAllocation(ctx context.Context, req *QueryUserAllocationRequest) (*QueryUserAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAllocation not implemented")
}
func (*UnimplementedQueryServer) UserAllocations(ctx context.Context, req *QueryUserAllocationsRequest) (*QueryUserAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAllocations not implemented")
}
func (*UnimplementedQueryServer) AllAllocations(ctx context.Context, req *QueryAllAllocationsRequest) (*QueryAllAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAllocations not implemented")
}
func (*UnimplementedQueryServer) UserSummary(ctx context.Context, req *QueryUserSummaryRequest) (*QueryUserSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSummary not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Airdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Airdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Query/Airdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Airdrop(ctx, req.(*QueryAirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllAirdrops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAirdropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllAirdrops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Query/AllAirdrops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllAirdrops(ctx, req.(*QueryAllAirdropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Query/UserAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserAllocation(ctx, req.(*QueryUserAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Query/UserAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserAllocations(ctx, req.(*QueryUserAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Query/AllAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllAllocations(ctx, req.(*QueryAllAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.airdrop.Query/UserSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserSummary(ctx, req.(*QueryUserSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.airdrop.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Airdrop",
			Handler:    _Query_Airdrop_Handler,
		},
		{
			MethodName: "AllAirdrops",
			Handler:    _Query_AllAirdrops_Handler,
		},
		{
			MethodName: "UserAllocation",
			Handler:    _Query_UserAllocation_Handler,
		},
		{
			MethodName: "UserAllocations",
			Handler:    _Query_UserAllocations_Handler,
		},
		{
			MethodName: "AllAllocations",
			Handler:    _Query_AllAllocations_Handler,
		},
		{
			MethodName: "UserSummary",
			Handler:    _Query_UserSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/airdrop/query.proto",
}

func (m *QueryAirdropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirdropRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirdropRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirdropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Airdrop != nil {
		{
			size, err := m.Airdrop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAirdropsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAirdropsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAirdropsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllAirdropsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAirdropsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAirdropsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Airdrops) > 0 {
		for iNdEx := len(m.Airdrops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Airdrops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserAllocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserAllocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserAllocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserAllocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserAllocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserAllocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserAllocation != nil {
		{
			size, err := m.UserAllocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserAllocationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserAllocationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserAllocationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAllocations) > 0 {
		for iNdEx := len(m.UserAllocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserAllocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllocationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllocationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllocationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllocationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllocationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllocationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentDateIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentDateIndex))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Claimable.Size()
		i -= size
		if _, err := m.Claimable.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Remaining.Size()
		i -= size
		if _, err := m.Remaining.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Forfeited.Size()
		i -= size
		if _, err := m.Forfeited.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Claimed.Size()
		i -= size
		if _, err := m.Claimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ClaimType) > 0 {
		i -= len(m.ClaimType)
		copy(dAtA[i:], m.ClaimType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAirdropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Airdrop != nil {
		l = m.Airdrop.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAirdropsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllAirdropsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Airdrops) > 0 {
		for _, e := range m.Airdrops {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserAllocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserAllocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAllocation != nil {
		l = m.UserAllocation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserAllocationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserAllocations) > 0 {
		for _, e := range m.UserAllocations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllAllocationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllocationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Claimed.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Forfeited.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Remaining.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Claimable.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CurrentDateIndex != 0 {
		n += 1 + sovQuery(uint64(m.CurrentDateIndex))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAirdropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirdropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirdropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Airdrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Airdrop == nil {
				m.Airdrop = &Airdrop{}
			}
			if err := m.Airdrop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAirdropsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAirdropsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAirdropsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAirdropsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAirdropsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAirdropsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Airdrops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Airdrops = append(m.Airdrops, Airdrop{})
			if err := m.Airdrops[len(m.Airdrops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserAllocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserAllocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserAllocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserAllocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserAllocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserAllocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAllocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAllocation == nil {
				m.UserAllocation = &UserAllocation{}
			}
			if err := m.UserAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserAllocationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserAllocationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserAllocationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAllocations = append(m.UserAllocations, UserAllocation{})
			if err := m.UserAllocations[len(m.UserAllocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllocationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllocationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllocationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllocationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllocationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllocationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocations = append(m.Allocations, UserAllocation{})
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forfeited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Forfeited.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Remaining.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claimable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDateIndex", wireType)
			}
			m.CurrentDateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentDateIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
