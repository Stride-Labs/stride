// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/airdrop/airdrop.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClaimType enum represents the possible claim types for a user getting an
// airdrop
type ClaimType int32

const (
	// CLAIM_DAILY indicates that the airdrop rewards are accumulated daily
	// A user can claim daily up front and change their decision within the
	// deadline window
	// This type is assigned to the user by default when their allocations are
	// added
	CLAIM_DAILY ClaimType = 0
	// CLAIM_EARLY indicates that the airdrop rewards have been claimed early,
	// with half going to the user and half being clawed back
	CLAIM_EARLY ClaimType = 1
)

var ClaimType_name = map[int32]string{
	0: "CLAIM_DAILY",
	1: "CLAIM_EARLY",
}

var ClaimType_value = map[string]int32{
	"CLAIM_DAILY": 0,
	"CLAIM_EARLY": 1,
}

func (x ClaimType) String() string {
	return proto.EnumName(ClaimType_name, int32(x))
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49e89994d4a2aee3, []int{0}
}

// Airdrop module parameters
type Params struct {
	// The number of seconds between each element in the allocations array
	// In practice this is always 24 hours, but it's customizable for testing
	PeriodLengthSeconds int64 `protobuf:"varint,1,opt,name=period_length_seconds,json=periodLengthSeconds,proto3" json:"period_length_seconds,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e89994d4a2aee3, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPeriodLengthSeconds() int64 {
	if m != nil {
		return m.PeriodLengthSeconds
	}
	return 0
}

// UserAllocation tracks the status of an allocation for a user on a specific
// airdrop
type UserAllocation struct {
	// ID of the airdrop
	AirdropId string `protobuf:"bytes,1,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	// Address of the account that is receiving the airdrop allocation
	// The address does not have to be a stride address - but non-stride addresses
	// must be linked and merged into a stride address before claiming
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The total amount of tokens that have already been claimed
	Claimed cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=claimed,proto3,customtype=cosmossdk.io/math.Int" json:"claimed"`
	// The total amount of tokens that have been forfeited by the user for
	// claiming early
	Forfeited cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=forfeited,proto3,customtype=cosmossdk.io/math.Int" json:"forfeited"`
	// The current state of allocations for this airdrop
	//
	// Ex 1:
	//   Day 0: {claimed:0, allocations:[10,10,10]}
	//   *MsgClaim*
	//   Day 1: {claimed:10, allocations:[0,10,10]}
	//   *MsgClaim*
	//   Day 2: {claimed:20, allocations:[0,0,10]}
	//
	// Ex 2:
	//   Day 0: {claimed:0, allocations:[10,10,10]}
	//   *MsgClaimEarly*
	//   Day 1: {claimed:15, forfeited:15, allocations:[0,0,0]}
	Allocations []cosmossdk_io_math.Int `protobuf:"bytes,5,rep,name=allocations,proto3,customtype=cosmossdk.io/math.Int" json:"allocations"`
}

func (m *UserAllocation) Reset()         { *m = UserAllocation{} }
func (m *UserAllocation) String() string { return proto.CompactTextString(m) }
func (*UserAllocation) ProtoMessage()    {}
func (*UserAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e89994d4a2aee3, []int{1}
}
func (m *UserAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAllocation.Merge(m, src)
}
func (m *UserAllocation) XXX_Size() int {
	return m.Size()
}
func (m *UserAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_UserAllocation proto.InternalMessageInfo

func (m *UserAllocation) GetAirdropId() string {
	if m != nil {
		return m.AirdropId
	}
	return ""
}

func (m *UserAllocation) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Airdrop track the aggregate unbondings across an epoch
type Airdrop struct {
	// Airdrop ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Denom used when distributing rewards
	RewardDenom string `protobuf:"bytes,2,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	// The first date that claiming begins and rewards are distributed
	DistributionStartDate *time.Time `protobuf:"bytes,3,opt,name=distribution_start_date,json=distributionStartDate,proto3,stdtime" json:"distribution_start_date,omitempty"`
	// The last date for rewards to be distributed. Immediately after this date
	// the rewards can no longer be claimed, but rewards have not been clawed back
	// yet
	DistributionEndDate *time.Time `protobuf:"bytes,4,opt,name=distribution_end_date,json=distributionEndDate,proto3,stdtime" json:"distribution_end_date,omitempty"`
	// Date with which the rewards are clawed back (occurs after the distribution
	// end date)
	ClawbackDate *time.Time `protobuf:"bytes,5,opt,name=clawback_date,json=clawbackDate,proto3,stdtime" json:"clawback_date,omitempty"`
	// Deadline for the user to make a decision on their claim type
	ClaimTypeDeadlineDate *time.Time `protobuf:"bytes,6,opt,name=claim_type_deadline_date,json=claimTypeDeadlineDate,proto3,stdtime" json:"claim_type_deadline_date,omitempty"`
	// Penalty for claiming rewards early - e.g. 0.5 means claiming early will
	// result in losing 50% of rewards
	EarlyClaimPenalty cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=early_claim_penalty,json=earlyClaimPenalty,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"early_claim_penalty"`
	// Account that holds the total reward balance and distributes to users
	DistributorAddress string `protobuf:"bytes,8,opt,name=distributor_address,json=distributorAddress,proto3" json:"distributor_address,omitempty"`
	// Admin account with permissions to add or update allocations
	AllocatorAddress string `protobuf:"bytes,9,opt,name=allocator_address,json=allocatorAddress,proto3" json:"allocator_address,omitempty"`
	// Admin account with permissions to link addresseses
	LinkerAddress string `protobuf:"bytes,10,opt,name=linker_address,json=linkerAddress,proto3" json:"linker_address,omitempty"`
}

func (m *Airdrop) Reset()         { *m = Airdrop{} }
func (m *Airdrop) String() string { return proto.CompactTextString(m) }
func (*Airdrop) ProtoMessage()    {}
func (*Airdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e89994d4a2aee3, []int{2}
}
func (m *Airdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Airdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Airdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Airdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Airdrop.Merge(m, src)
}
func (m *Airdrop) XXX_Size() int {
	return m.Size()
}
func (m *Airdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_Airdrop.DiscardUnknown(m)
}

var xxx_messageInfo_Airdrop proto.InternalMessageInfo

func (m *Airdrop) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Airdrop) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *Airdrop) GetDistributionStartDate() *time.Time {
	if m != nil {
		return m.DistributionStartDate
	}
	return nil
}

func (m *Airdrop) GetDistributionEndDate() *time.Time {
	if m != nil {
		return m.DistributionEndDate
	}
	return nil
}

func (m *Airdrop) GetClawbackDate() *time.Time {
	if m != nil {
		return m.ClawbackDate
	}
	return nil
}

func (m *Airdrop) GetClaimTypeDeadlineDate() *time.Time {
	if m != nil {
		return m.ClaimTypeDeadlineDate
	}
	return nil
}

func (m *Airdrop) GetDistributorAddress() string {
	if m != nil {
		return m.DistributorAddress
	}
	return ""
}

func (m *Airdrop) GetAllocatorAddress() string {
	if m != nil {
		return m.AllocatorAddress
	}
	return ""
}

func (m *Airdrop) GetLinkerAddress() string {
	if m != nil {
		return m.LinkerAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("stride.airdrop.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterType((*Params)(nil), "stride.airdrop.Params")
	proto.RegisterType((*UserAllocation)(nil), "stride.airdrop.UserAllocation")
	proto.RegisterType((*Airdrop)(nil), "stride.airdrop.Airdrop")
}

func init() { proto.RegisterFile("stride/airdrop/airdrop.proto", fileDescriptor_49e89994d4a2aee3) }

var fileDescriptor_49e89994d4a2aee3 = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x86, 0xe3, 0x10, 0xc8, 0xcd, 0x04, 0x72, 0x61, 0x00, 0x5d, 0xdf, 0xdc, 0x8b, 0x43, 0xe9,
	0xa6, 0xaa, 0x84, 0xad, 0x06, 0x55, 0x5d, 0xb4, 0x12, 0x0a, 0x24, 0x8b, 0xa8, 0xa9, 0x84, 0x1c,
	0x2a, 0x95, 0x6e, 0x46, 0x13, 0xcf, 0x60, 0x46, 0xd8, 0x9e, 0x68, 0x66, 0x28, 0xcd, 0x1b, 0x74,
	0xc9, 0xba, 0xdb, 0xbe, 0x42, 0xd5, 0x67, 0x60, 0x89, 0xba, 0xaa, 0xba, 0xa0, 0x15, 0xbc, 0x48,
	0xe5, 0x19, 0x3b, 0x49, 0xd5, 0x45, 0xb2, 0x4a, 0x7c, 0xfe, 0xf3, 0x7f, 0xf6, 0x9c, 0xff, 0x68,
	0xc0, 0xff, 0x52, 0x09, 0x46, 0xa8, 0x87, 0x99, 0x20, 0x82, 0x0f, 0xf3, 0x5f, 0x77, 0x28, 0xb8,
	0xe2, 0xb0, 0x66, 0x54, 0x37, 0xab, 0xd6, 0xff, 0x0d, 0xb8, 0x8c, 0xb9, 0x44, 0x5a, 0xf5, 0xcc,
	0x83, 0x69, 0xad, 0x6f, 0x84, 0x3c, 0xe4, 0xa6, 0x9e, 0xfe, 0xcb, 0xaa, 0x8d, 0x90, 0xf3, 0x30,
	0xa2, 0x9e, 0x7e, 0x1a, 0x5c, 0x9c, 0x7a, 0x8a, 0xc5, 0x54, 0x2a, 0x1c, 0x67, 0x6f, 0xd8, 0x79,
	0x01, 0x96, 0x8e, 0xb0, 0xc0, 0xb1, 0x84, 0x4d, 0xb0, 0x39, 0xa4, 0x82, 0x71, 0x82, 0x22, 0x9a,
	0x84, 0xea, 0x0c, 0x49, 0x1a, 0xf0, 0x84, 0x48, 0xdb, 0xda, 0xb6, 0x1e, 0x2d, 0xf8, 0xeb, 0x46,
	0xec, 0x69, 0xad, 0x6f, 0xa4, 0x9d, 0x8f, 0x45, 0x50, 0x7b, 0x2d, 0xa9, 0x68, 0x45, 0x11, 0x0f,
	0xb0, 0x62, 0x3c, 0x81, 0x5b, 0x00, 0x64, 0x5f, 0x8b, 0x18, 0xd1, 0xde, 0x8a, 0x5f, 0xc9, 0x2a,
	0x5d, 0x02, 0x9b, 0xa0, 0x8c, 0x09, 0x11, 0x54, 0x4a, 0xbb, 0x98, 0x6a, 0x07, 0xf6, 0xd7, 0xcf,
	0xbb, 0x1b, 0xd9, 0x49, 0x5a, 0x46, 0xe9, 0x2b, 0xc1, 0x92, 0xd0, 0xcf, 0x1b, 0xe1, 0x33, 0x50,
	0x0e, 0x22, 0xcc, 0x62, 0x4a, 0xec, 0x05, 0xed, 0xd9, 0xba, 0xbe, 0x6d, 0x14, 0xbe, 0xdf, 0x36,
	0x36, 0x8d, 0x4f, 0x92, 0x73, 0x97, 0x71, 0x2f, 0xc6, 0xea, 0xcc, 0xed, 0x26, 0xca, 0xcf, 0xbb,
	0xe1, 0x73, 0x50, 0x39, 0xe5, 0xe2, 0x94, 0x32, 0x45, 0x89, 0x5d, 0x9a, 0xc7, 0x3a, 0xe9, 0x87,
	0xfb, 0xa0, 0x8a, 0xc7, 0xc7, 0x92, 0xf6, 0xe2, 0xf6, 0xc2, 0x6c, 0xfb, 0xb4, 0x63, 0xe7, 0xcb,
	0x22, 0x28, 0xb7, 0xcc, 0xc1, 0x61, 0x0d, 0x14, 0xc7, 0xd3, 0x28, 0x32, 0x02, 0x1f, 0x80, 0x65,
	0x41, 0x2f, 0xb1, 0x20, 0x88, 0xd0, 0x84, 0xc7, 0x66, 0x16, 0x7e, 0xd5, 0xd4, 0xda, 0x69, 0x09,
	0xbe, 0x01, 0xff, 0x10, 0x96, 0xe6, 0x3f, 0xb8, 0x48, 0x79, 0x48, 0x2a, 0x2c, 0x14, 0x22, 0x58,
	0x51, 0x3d, 0x85, 0x6a, 0xb3, 0xee, 0x9a, 0x70, 0xdd, 0x3c, 0x5c, 0xf7, 0x38, 0x0f, 0xf7, 0xa0,
	0x74, 0xf5, 0xa3, 0x61, 0xf9, 0x9b, 0xd3, 0x80, 0x7e, 0xea, 0x6f, 0x63, 0x45, 0xe1, 0x31, 0xf8,
	0x4d, 0x40, 0x34, 0x21, 0x86, 0x5b, 0x9a, 0x93, 0xbb, 0x3e, 0x6d, 0xef, 0x24, 0x44, 0x53, 0x3b,
	0x60, 0x25, 0x88, 0xf0, 0xe5, 0x00, 0x07, 0xe7, 0x86, 0xb6, 0x38, 0x27, 0x6d, 0x39, 0xb7, 0x69,
	0xcc, 0x09, 0xb0, 0x75, 0x7c, 0x48, 0x8d, 0x86, 0x14, 0x11, 0x8a, 0x49, 0xc4, 0x12, 0x6a, 0x88,
	0x4b, 0xf3, 0x9e, 0x5b, 0x13, 0x8e, 0x47, 0x43, 0xda, 0xce, 0xfc, 0x1a, 0xdd, 0x07, 0xeb, 0x14,
	0x8b, 0x68, 0x84, 0xcc, 0x0b, 0x86, 0x34, 0xc1, 0x91, 0x1a, 0xd9, 0x65, 0xbd, 0x18, 0x0f, 0xb3,
	0x64, 0xff, 0xfb, 0x33, 0xd9, 0x1e, 0x0d, 0x71, 0x30, 0x6a, 0xd3, 0xc0, 0x5f, 0xd3, 0xfe, 0xc3,
	0xd4, 0x7e, 0x64, 0xdc, 0xb0, 0x0b, 0x26, 0xd3, 0xe0, 0x02, 0xe5, 0xcb, 0xfd, 0xd7, 0x8c, 0xe5,
	0x86, 0x53, 0xa6, 0x4c, 0x81, 0x1d, 0xb0, 0x96, 0xed, 0xcf, 0x14, 0xa8, 0x32, 0x03, 0xb4, 0x3a,
	0xb6, 0xe4, 0x98, 0x7d, 0x50, 0x8b, 0x58, 0x72, 0x4e, 0x27, 0x0c, 0x30, 0x83, 0xb1, 0x62, 0xfa,
	0xb3, 0xe2, 0xe3, 0x3d, 0x50, 0x39, 0xcc, 0x07, 0x08, 0xff, 0x06, 0xd5, 0xc3, 0x5e, 0xab, 0xfb,
	0x0a, 0xb5, 0x5b, 0xdd, 0xde, 0xc9, 0x6a, 0x61, 0x52, 0xe8, 0xb4, 0xfc, 0xde, 0xc9, 0xaa, 0x55,
	0x2f, 0x7d, 0xf8, 0xe4, 0x14, 0x0e, 0x5e, 0x5e, 0xdf, 0x39, 0xd6, 0xcd, 0x9d, 0x63, 0xfd, 0xbc,
	0x73, 0xac, 0xab, 0x7b, 0xa7, 0x70, 0x73, 0xef, 0x14, 0xbe, 0xdd, 0x3b, 0x85, 0xb7, 0x4f, 0x42,
	0xa6, 0xce, 0x2e, 0x06, 0x6e, 0xc0, 0x63, 0xaf, 0xaf, 0xef, 0xb3, 0xdd, 0x1e, 0x1e, 0x48, 0x2f,
	0xbb, 0xf9, 0xde, 0x35, 0x9f, 0x7a, 0xef, 0xc7, 0xf7, 0x5f, 0x9a, 0xba, 0x1c, 0x2c, 0xe9, 0x68,
	0xf7, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x91, 0x09, 0x25, 0x5c, 0x1e, 0x05, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodLengthSeconds != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.PeriodLengthSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Allocations[iNdEx].Size()
				i -= size
				if _, err := m.Allocations[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintAirdrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.Forfeited.Size()
		i -= size
		if _, err := m.Forfeited.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Claimed.Size()
		i -= size
		if _, err := m.Claimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AirdropId) > 0 {
		i -= len(m.AirdropId)
		copy(dAtA[i:], m.AirdropId)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.AirdropId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Airdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Airdrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Airdrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LinkerAddress) > 0 {
		i -= len(m.LinkerAddress)
		copy(dAtA[i:], m.LinkerAddress)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.LinkerAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AllocatorAddress) > 0 {
		i -= len(m.AllocatorAddress)
		copy(dAtA[i:], m.AllocatorAddress)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.AllocatorAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DistributorAddress) > 0 {
		i -= len(m.DistributorAddress)
		copy(dAtA[i:], m.DistributorAddress)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.DistributorAddress)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.EarlyClaimPenalty.Size()
		i -= size
		if _, err := m.EarlyClaimPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.ClaimTypeDeadlineDate != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClaimTypeDeadlineDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintAirdrop(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if m.ClawbackDate != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClawbackDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintAirdrop(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x2a
	}
	if m.DistributionEndDate != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionEndDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintAirdrop(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x22
	}
	if m.DistributionStartDate != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionStartDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintAirdrop(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAirdrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovAirdrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeriodLengthSeconds != 0 {
		n += 1 + sovAirdrop(uint64(m.PeriodLengthSeconds))
	}
	return n
}

func (m *UserAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AirdropId)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = m.Claimed.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	l = m.Forfeited.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovAirdrop(uint64(l))
		}
	}
	return n
}

func (m *Airdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.DistributionStartDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.DistributionEndDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.ClawbackDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.ClaimTypeDeadlineDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = m.EarlyClaimPenalty.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	l = len(m.DistributorAddress)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.AllocatorAddress)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = len(m.LinkerAddress)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	return n
}

func sovAirdrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAirdrop(x uint64) (n int) {
	return sovAirdrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodLengthSeconds", wireType)
			}
			m.PeriodLengthSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodLengthSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AirdropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forfeited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Forfeited.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Allocations = append(m.Allocations, v)
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Airdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Airdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Airdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionStartDate == nil {
				m.DistributionStartDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionStartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionEndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionEndDate == nil {
				m.DistributionEndDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionEndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClawbackDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClawbackDate == nil {
				m.ClawbackDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClawbackDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTypeDeadlineDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimTypeDeadlineDate == nil {
				m.ClaimTypeDeadlineDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClaimTypeDeadlineDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarlyClaimPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarlyClaimPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAirdrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAirdrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAirdrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAirdrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAirdrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAirdrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAirdrop = fmt.Errorf("proto: unexpected end of group")
)
