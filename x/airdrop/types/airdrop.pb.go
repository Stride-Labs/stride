// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/airdrop/airdrop.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClaimType enum represents the possible claim types for a user getting an
// airdrop
type ClaimType int32

const (
	// DAILY indicates that the airdrop rewards are accumulated daily
	DAILY ClaimType = 0
	// CLAIM_AND_STAKE indicates that the airdrop rewards have been claimed but
	// are lock-staked until at least when the airdrop is over
	CLAIM_AND_STAKE ClaimType = 1
	// CLAIM_EARLY indicates that the airdrop rewards have been claimed early,
	// with half going to the user and half being clawed back
	CLAIM_EARLY ClaimType = 2
)

var ClaimType_name = map[int32]string{
	0: "DAILY",
	1: "CLAIM_AND_STAKE",
	2: "CLAIM_EARLY",
}

var ClaimType_value = map[string]int32{
	"DAILY":           0,
	"CLAIM_AND_STAKE": 1,
	"CLAIM_EARLY":     2,
}

func (x ClaimType) String() string {
	return proto.EnumName(ClaimType_name, int32(x))
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49e89994d4a2aee3, []int{0}
}

// AllocationRecord tracks the status of an allocation for a user on a specific
// airdrop
type AllocationRecord struct {
	// ID of the airdrop
	AirdropId uint64 `protobuf:"varint,1,opt,name=airdrop_id,json=airdropId,proto3" json:"airdrop_id,omitempty"`
	// Address of the account that is receiving the airdrop allocation
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// The total amount of tokens that have already been claimed
	Claimed github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=claimed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"claimed"`
	// The current state of allocations for this airdrop
	//
	//
	// Ex 1:
	//   Day 0: {claimed:0, allocations:[10,10,10], claim_type:DAILY}
	//   *MsgClaim*
	//   Day 1: {claimed:10, allocations:[0,10,10], claim_type:DAILY}
	//   *MsgClaim*
	//   Day 2: {claimed:20, allocations:[0,0,10], claim_type:DAILY}
	//
	// Ex 2:
	//   Day 0: {claimed:0, allocations:[10,10,10], claim_type:DAILY}
	//   *MsgClaimAndStake*
	//   Day 1: {claimed:30, allocations:[0,0,0], claim_type:CLAIM_AND_STAKE}
	//
	// Ex 3:
	//   Day 0: {claimed:0, allocations:[10,10,10], claim_type:DAILY}
	//   *MsgClaimEarly*
	//   Day 1: {claimed:15, allocations:[0,0,0], claim_type:CLAIM_EARLY}
	Allocations []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,rep,name=allocations,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"allocations"`
	ClaimType   ClaimType                                `protobuf:"varint,5,opt,name=claim_type,json=claimType,proto3,enum=stride.airdrop.ClaimType" json:"claim_type,omitempty"`
}

func (m *AllocationRecord) Reset()         { *m = AllocationRecord{} }
func (m *AllocationRecord) String() string { return proto.CompactTextString(m) }
func (*AllocationRecord) ProtoMessage()    {}
func (*AllocationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e89994d4a2aee3, []int{0}
}
func (m *AllocationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationRecord.Merge(m, src)
}
func (m *AllocationRecord) XXX_Size() int {
	return m.Size()
}
func (m *AllocationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationRecord proto.InternalMessageInfo

func (m *AllocationRecord) GetAirdropId() uint64 {
	if m != nil {
		return m.AirdropId
	}
	return 0
}

func (m *AllocationRecord) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *AllocationRecord) GetClaimType() ClaimType {
	if m != nil {
		return m.ClaimType
	}
	return DAILY
}

// AirdropRecord track the aggregate unbondings across an epoch
type AirdropRecord struct {
	// Airdrop ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Distribution start date
	DistributionStartDate *time.Time `protobuf:"bytes,2,opt,name=distribution_start_date,json=distributionStartDate,proto3,stdtime" json:"distribution_start_date,omitempty"`
	// Distribution end date
	DistributionEndDate *time.Time `protobuf:"bytes,3,opt,name=distribution_end_date,json=distributionEndDate,proto3,stdtime" json:"distribution_end_date,omitempty"`
	// Clawback date
	ClawbackDate *time.Time `protobuf:"bytes,4,opt,name=clawback_date,json=clawbackDate,proto3,stdtime" json:"clawback_date,omitempty"`
	// Claim type deadline date
	ClaimTypeDeadlineDate *time.Time `protobuf:"bytes,5,opt,name=claim_type_deadline_date,json=claimTypeDeadlineDate,proto3,stdtime" json:"claim_type_deadline_date,omitempty"`
	// Early claim penalty
	EarlyClaimPenalty github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=early_claim_penalty,json=earlyClaimPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"early_claim_penalty"`
	// Distribution account
	DistributionAccount string `protobuf:"bytes,7,opt,name=distribution_account,json=distributionAccount,proto3" json:"distribution_account,omitempty"`
}

func (m *AirdropRecord) Reset()         { *m = AirdropRecord{} }
func (m *AirdropRecord) String() string { return proto.CompactTextString(m) }
func (*AirdropRecord) ProtoMessage()    {}
func (*AirdropRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e89994d4a2aee3, []int{1}
}
func (m *AirdropRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropRecord.Merge(m, src)
}
func (m *AirdropRecord) XXX_Size() int {
	return m.Size()
}
func (m *AirdropRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropRecord proto.InternalMessageInfo

func (m *AirdropRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AirdropRecord) GetDistributionStartDate() *time.Time {
	if m != nil {
		return m.DistributionStartDate
	}
	return nil
}

func (m *AirdropRecord) GetDistributionEndDate() *time.Time {
	if m != nil {
		return m.DistributionEndDate
	}
	return nil
}

func (m *AirdropRecord) GetClawbackDate() *time.Time {
	if m != nil {
		return m.ClawbackDate
	}
	return nil
}

func (m *AirdropRecord) GetClaimTypeDeadlineDate() *time.Time {
	if m != nil {
		return m.ClaimTypeDeadlineDate
	}
	return nil
}

func (m *AirdropRecord) GetDistributionAccount() string {
	if m != nil {
		return m.DistributionAccount
	}
	return ""
}

func init() {
	proto.RegisterEnum("stride.airdrop.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterType((*AllocationRecord)(nil), "stride.airdrop.AllocationRecord")
	proto.RegisterType((*AirdropRecord)(nil), "stride.airdrop.AirdropRecord")
}

func init() { proto.RegisterFile("stride/airdrop/airdrop.proto", fileDescriptor_49e89994d4a2aee3) }

var fileDescriptor_49e89994d4a2aee3 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xed, 0xd4, 0x6d, 0x95, 0x49, 0x2f, 0xf9, 0xa6, 0xfd, 0x84, 0x1b, 0x81, 0x13, 0x75,
	0x81, 0x2a, 0xa4, 0xda, 0x22, 0x6c, 0x90, 0x58, 0x39, 0x4d, 0x24, 0xa2, 0x06, 0x54, 0x39, 0x59,
	0x10, 0x16, 0x58, 0x63, 0xcf, 0x60, 0xac, 0x3a, 0x9e, 0xc8, 0x33, 0x01, 0xf2, 0x06, 0x2c, 0xfb,
	0x04, 0x6c, 0x78, 0x05, 0x1e, 0x81, 0x45, 0x97, 0x15, 0x2b, 0xc4, 0xa2, 0xa0, 0xe4, 0x45, 0x90,
	0x67, 0xc6, 0x21, 0x59, 0x11, 0x58, 0xd9, 0x73, 0x2e, 0xbf, 0x33, 0xe7, 0x7f, 0x8e, 0x06, 0xdc,
	0x65, 0x3c, 0x8b, 0x31, 0x71, 0x50, 0x9c, 0xe1, 0x8c, 0x8e, 0x8b, 0xaf, 0x3d, 0xce, 0x28, 0xa7,
	0x70, 0x4f, 0x7a, 0x6d, 0x65, 0xad, 0x1d, 0x85, 0x94, 0x8d, 0x28, 0xf3, 0x85, 0xd7, 0x91, 0x07,
	0x19, 0x5a, 0x3b, 0x8c, 0x68, 0x44, 0xa5, 0x3d, 0xff, 0x53, 0xd6, 0x7a, 0x44, 0x69, 0x94, 0x10,
	0x47, 0x9c, 0x82, 0xc9, 0x6b, 0x87, 0xc7, 0x23, 0xc2, 0x38, 0x1a, 0xa9, 0x0a, 0xc7, 0x5f, 0x4a,
	0xa0, 0xea, 0x26, 0x09, 0x0d, 0x11, 0x8f, 0x69, 0xea, 0x91, 0x90, 0x66, 0x18, 0xde, 0x03, 0x40,
	0x55, 0xf4, 0x63, 0x6c, 0xea, 0x0d, 0xfd, 0xc4, 0xf0, 0xca, 0xca, 0xd2, 0xc5, 0xf0, 0x09, 0xd8,
	0x99, 0x30, 0x92, 0xf9, 0x08, 0xe3, 0x8c, 0x30, 0x66, 0x96, 0x1a, 0xfa, 0x49, 0xb9, 0x65, 0x7e,
	0xfd, 0x7c, 0x7a, 0xa8, 0xae, 0xe4, 0x4a, 0x4f, 0x9f, 0x67, 0x71, 0x1a, 0x79, 0x95, 0x3c, 0x5a,
	0x99, 0xe0, 0x53, 0xb0, 0x1d, 0x26, 0x28, 0x1e, 0x11, 0x6c, 0x6e, 0x88, 0x3c, 0xfb, 0xfa, 0xb6,
	0xae, 0x7d, 0xbf, 0xad, 0xdf, 0x8f, 0x62, 0xfe, 0x66, 0x12, 0xd8, 0x21, 0x1d, 0xa9, 0xce, 0xd4,
	0xe7, 0x94, 0xe1, 0x4b, 0x87, 0x4f, 0xc7, 0x84, 0xd9, 0xdd, 0x94, 0x7b, 0x45, 0x3a, 0xbc, 0x00,
	0x15, 0xb4, 0xb8, 0x39, 0x33, 0x8d, 0xc6, 0xc6, 0x3f, 0xd0, 0x96, 0x11, 0xf0, 0x31, 0x00, 0x02,
	0xee, 0xe7, 0x7e, 0x73, 0xb3, 0xa1, 0x9f, 0xec, 0x35, 0x8f, 0xec, 0xd5, 0x19, 0xd8, 0x67, 0x79,
	0xc4, 0x60, 0x3a, 0x26, 0x5e, 0x39, 0x2c, 0x7e, 0x8f, 0x3f, 0x1a, 0x60, 0xd7, 0x95, 0x01, 0x4a,
	0xc3, 0x3d, 0x50, 0x5a, 0x68, 0x57, 0x8a, 0x31, 0x7c, 0x01, 0xee, 0xe0, 0x38, 0x47, 0x05, 0x93,
	0xbc, 0x98, 0xcf, 0x38, 0xca, 0xb8, 0x8f, 0x11, 0x27, 0x42, 0xbf, 0x4a, 0xb3, 0x66, 0xcb, 0x59,
	0xd9, 0xc5, 0xac, 0xec, 0x41, 0x31, 0xab, 0x96, 0x71, 0xf5, 0xa3, 0xae, 0x7b, 0xff, 0x2f, 0x03,
	0xfa, 0x79, 0x7e, 0x1b, 0x71, 0x02, 0x07, 0x60, 0xc5, 0xe1, 0x93, 0x14, 0x4b, 0xee, 0xc6, 0x9a,
	0xdc, 0x83, 0xe5, 0xf4, 0x4e, 0x8a, 0x05, 0xb5, 0x03, 0x76, 0xc3, 0x04, 0xbd, 0x0b, 0x50, 0x78,
	0x29, 0x69, 0xc6, 0x9a, 0xb4, 0x9d, 0x22, 0x4d, 0x60, 0x86, 0xc0, 0xfc, 0x2d, 0xa9, 0x8f, 0x09,
	0xc2, 0x49, 0x9c, 0x12, 0x49, 0xdc, 0x5c, 0xb7, 0xef, 0x85, 0xce, 0x6d, 0x95, 0x2f, 0xd0, 0xaf,
	0xc0, 0x01, 0x41, 0x59, 0x32, 0xf5, 0x65, 0x81, 0x31, 0x49, 0x51, 0xc2, 0xa7, 0xe6, 0xd6, 0x5f,
	0x6f, 0x55, 0x9b, 0x84, 0xde, 0x7f, 0x02, 0x25, 0x66, 0x7b, 0x21, 0x41, 0xf0, 0x1c, 0x1c, 0xae,
	0xe8, 0x8a, 0xc2, 0x90, 0x4e, 0x52, 0x6e, 0x6e, 0xff, 0x61, 0xdd, 0x57, 0xe4, 0x74, 0x65, 0xd2,
	0x83, 0x16, 0x28, 0x2f, 0x16, 0x07, 0x96, 0xc1, 0x66, 0xdb, 0xed, 0xf6, 0x86, 0x55, 0x0d, 0x1e,
	0x80, 0xfd, 0xb3, 0x9e, 0xdb, 0x7d, 0xe6, 0xbb, 0xcf, 0xdb, 0x7e, 0x7f, 0xe0, 0x9e, 0x77, 0xaa,
	0x3a, 0xdc, 0x07, 0x15, 0x69, 0xec, 0xb8, 0x5e, 0x6f, 0x58, 0x2d, 0xd5, 0x8c, 0x0f, 0x9f, 0x2c,
	0xad, 0x75, 0x7e, 0x3d, 0xb3, 0xf4, 0x9b, 0x99, 0xa5, 0xff, 0x9c, 0x59, 0xfa, 0xd5, 0xdc, 0xd2,
	0x6e, 0xe6, 0x96, 0xf6, 0x6d, 0x6e, 0x69, 0x2f, 0x1f, 0x2e, 0x75, 0xd9, 0x17, 0xeb, 0x7a, 0xda,
	0x43, 0x01, 0x73, 0xd4, 0xe3, 0xf2, 0xb6, 0xd9, 0x74, 0xde, 0x2f, 0x9e, 0x18, 0xd1, 0x74, 0xb0,
	0x25, 0xe4, 0x7e, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x04, 0x63, 0x6d, 0xe4, 0x81, 0x04, 0x00,
	0x00,
}

func (m *AllocationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimType != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.ClaimType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Allocations[iNdEx].Size()
				i -= size
				if _, err := m.Allocations[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintAirdrop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.Claimed.Size()
		i -= size
		if _, err := m.Claimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.AirdropId != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.AirdropId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AirdropRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributionAccount) > 0 {
		i -= len(m.DistributionAccount)
		copy(dAtA[i:], m.DistributionAccount)
		i = encodeVarintAirdrop(dAtA, i, uint64(len(m.DistributionAccount)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.EarlyClaimPenalty.Size()
		i -= size
		if _, err := m.EarlyClaimPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAirdrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ClaimTypeDeadlineDate != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClaimTypeDeadlineDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintAirdrop(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x2a
	}
	if m.ClawbackDate != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ClawbackDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintAirdrop(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.DistributionEndDate != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionEndDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintAirdrop(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x1a
	}
	if m.DistributionStartDate != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DistributionStartDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintAirdrop(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAirdrop(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAirdrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovAirdrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AirdropId != 0 {
		n += 1 + sovAirdrop(uint64(m.AirdropId))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = m.Claimed.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovAirdrop(uint64(l))
		}
	}
	if m.ClaimType != 0 {
		n += 1 + sovAirdrop(uint64(m.ClaimType))
	}
	return n
}

func (m *AirdropRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAirdrop(uint64(m.Id))
	}
	if m.DistributionStartDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionStartDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.DistributionEndDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DistributionEndDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.ClawbackDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClawbackDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	if m.ClaimTypeDeadlineDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ClaimTypeDeadlineDate)
		n += 1 + l + sovAirdrop(uint64(l))
	}
	l = m.EarlyClaimPenalty.Size()
	n += 1 + l + sovAirdrop(uint64(l))
	l = len(m.DistributionAccount)
	if l > 0 {
		n += 1 + l + sovAirdrop(uint64(l))
	}
	return n
}

func sovAirdrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAirdrop(x uint64) (n int) {
	return sovAirdrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropId", wireType)
			}
			m.AirdropId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirdropId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Allocations = append(m.Allocations, v)
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			m.ClaimType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionStartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionStartDate == nil {
				m.DistributionStartDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionStartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionEndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionEndDate == nil {
				m.DistributionEndDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DistributionEndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClawbackDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClawbackDate == nil {
				m.ClawbackDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClawbackDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTypeDeadlineDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimTypeDeadlineDate == nil {
				m.ClaimTypeDeadlineDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ClaimTypeDeadlineDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarlyClaimPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarlyClaimPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAirdrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAirdrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAirdrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAirdrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAirdrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAirdrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAirdrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAirdrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAirdrop = fmt.Errorf("proto: unexpected end of group")
)
