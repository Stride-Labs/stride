// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stakeibc/params.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// define epoch lengths, in blocks
	SweepingRewardsInterval  uint64  `protobuf:"varint,1,opt,name=sweeping_rewards_interval,json=sweepingRewardsInterval,proto3" json:"sweeping_rewards_interval,omitempty"`
	InvestDepositsInterval   uint64  `protobuf:"varint,2,opt,name=invest_deposits_interval,json=investDepositsInterval,proto3" json:"invest_deposits_interval,omitempty"`
	CalcExchangeRateInterval uint64  `protobuf:"varint,3,opt,name=calc_exchange_rate_interval,json=calcExchangeRateInterval,proto3" json:"calc_exchange_rate_interval,omitempty"`
	StrideFee                float64 `protobuf:"fixed64,4,opt,name=stride_fee,json=strideFee,proto3" json:"stride_fee,omitempty"`
	// fee_address_weights stores which addresses to
	// send the Stride fee too, as well as what portion
	// of the fee each address is entitled to
	ZoneFeeAddress map[string]string `protobuf:"bytes,5,rep,name=zone_fee_address,json=zoneFeeAddress,proto3" json:"zone_fee_address,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f5fe1d2f7ac763, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSweepingRewardsInterval() uint64 {
	if m != nil {
		return m.SweepingRewardsInterval
	}
	return 0
}

func (m *Params) GetInvestDepositsInterval() uint64 {
	if m != nil {
		return m.InvestDepositsInterval
	}
	return 0
}

func (m *Params) GetCalcExchangeRateInterval() uint64 {
	if m != nil {
		return m.CalcExchangeRateInterval
	}
	return 0
}

func (m *Params) GetStrideFee() float64 {
	if m != nil {
		return m.StrideFee
	}
	return 0
}

func (m *Params) GetZoneFeeAddress() map[string]string {
	if m != nil {
		return m.ZoneFeeAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "Stridelabs.stride.stakeibc.Params")
	proto.RegisterMapType((map[string]string)(nil), "Stridelabs.stride.stakeibc.Params.ZoneFeeAddressEntry")
}

func init() { proto.RegisterFile("stakeibc/params.proto", fileDescriptor_41f5fe1d2f7ac763) }

var fileDescriptor_41f5fe1d2f7ac763 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x8b, 0x13, 0x31,
	0x18, 0xc6, 0x27, 0x3b, 0xdd, 0x85, 0x46, 0x90, 0x65, 0x5c, 0x75, 0x1c, 0x71, 0x2c, 0x9e, 0x7a,
	0x31, 0x03, 0x0a, 0xb2, 0x14, 0x3c, 0xac, 0xb8, 0xa2, 0xe0, 0x41, 0xc6, 0x5b, 0x2f, 0x31, 0x93,
	0x79, 0x9d, 0x86, 0x4e, 0x93, 0x21, 0x49, 0xff, 0x7e, 0x01, 0xaf, 0x1e, 0x3d, 0xfa, 0x71, 0x3c,
	0xf6, 0xe8, 0x51, 0xda, 0x2f, 0x22, 0x93, 0xb4, 0xa3, 0x82, 0x7b, 0x7b, 0x93, 0xe7, 0xf9, 0x3d,
	0xbc, 0x3c, 0x2f, 0xbe, 0x6b, 0x2c, 0x9b, 0x82, 0x28, 0x78, 0xd6, 0x30, 0xcd, 0x66, 0x86, 0x34,
	0x5a, 0x59, 0x15, 0x25, 0x1f, 0xad, 0x16, 0x25, 0xd4, 0xac, 0x30, 0xc4, 0xb8, 0x91, 0x1c, 0x8d,
	0xc9, 0x45, 0xa5, 0x2a, 0xe5, 0x6c, 0x59, 0x3b, 0x79, 0x22, 0x49, 0xba, 0x20, 0xc1, 0x19, 0x65,
	0x9c, 0xab, 0xb9, 0xb4, 0x5e, 0x7b, 0xf2, 0x25, 0xc4, 0x67, 0x1f, 0x5c, 0x7c, 0x34, 0xc2, 0x0f,
	0xcc, 0x12, 0xa0, 0x11, 0xb2, 0xa2, 0x1a, 0x96, 0x4c, 0x97, 0x86, 0x0a, 0x69, 0x41, 0x2f, 0x58,
	0x1d, 0xa3, 0x01, 0x1a, 0xf6, 0xf2, 0xfb, 0x47, 0x43, 0xee, 0xf5, 0x77, 0x07, 0x39, 0xba, 0xc4,
	0xb1, 0x90, 0x0b, 0x30, 0x96, 0x96, 0xd0, 0x28, 0x23, 0xec, 0x5f, 0xe8, 0x89, 0x43, 0xef, 0x79,
	0xfd, 0xf5, 0x41, 0xee, 0xc8, 0x97, 0xf8, 0x21, 0x67, 0x35, 0xa7, 0xb0, 0xe2, 0x13, 0x26, 0x2b,
	0xa0, 0x9a, 0x59, 0xf8, 0x03, 0x87, 0x0e, 0x8e, 0x5b, 0xcb, 0xf5, 0xc1, 0x91, 0x33, 0x0b, 0x1d,
	0xfe, 0x08, 0x63, 0x5f, 0x02, 0xfd, 0x0c, 0x10, 0xf7, 0x06, 0x68, 0x88, 0xf2, 0xbe, 0xff, 0x79,
	0x03, 0x10, 0x7d, 0xc2, 0xe7, 0x1b, 0x25, 0x9d, 0x48, 0x59, 0x59, 0x6a, 0x30, 0x26, 0x3e, 0x1d,
	0x84, 0xc3, 0x5b, 0xcf, 0x5e, 0x90, 0x9b, 0x7b, 0x24, 0xbe, 0x11, 0x32, 0x56, 0xb2, 0x4d, 0xb9,
	0xf2, 0xe0, 0xb5, 0xb4, 0x7a, 0x9d, 0xdf, 0xde, 0xfc, 0xf3, 0x99, 0x5c, 0xe1, 0x3b, 0xff, 0xb1,
	0x45, 0xe7, 0x38, 0x9c, 0xc2, 0xda, 0xd5, 0xd6, 0xcf, 0xdb, 0x31, 0xba, 0xc0, 0xa7, 0x0b, 0x56,
	0xcf, 0xc1, 0xf5, 0xd1, 0xcf, 0xfd, 0x63, 0x74, 0x72, 0x89, 0x46, 0xbd, 0x6f, 0xdf, 0x1f, 0x07,
	0xaf, 0xde, 0xfe, 0xd8, 0xa5, 0x68, 0xbb, 0x4b, 0xd1, 0xaf, 0x5d, 0x8a, 0xbe, 0xee, 0xd3, 0x60,
	0xbb, 0x4f, 0x83, 0x9f, 0xfb, 0x34, 0x18, 0x93, 0x4a, 0xd8, 0xc9, 0xbc, 0x20, 0x5c, 0xcd, 0x32,
	0xbf, 0xf4, 0xd3, 0xf7, 0xac, 0x30, 0x99, 0xdf, 0x3a, 0x5b, 0x65, 0xdd, 0x7d, 0xed, 0xba, 0x01,
	0x53, 0x9c, 0xb9, 0xd3, 0x3e, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x46, 0xf0, 0x78, 0x62, 0x41,
	0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZoneFeeAddress) > 0 {
		for k := range m.ZoneFeeAddress {
			v := m.ZoneFeeAddress[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintParams(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.StrideFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StrideFee))))
		i--
		dAtA[i] = 0x21
	}
	if m.CalcExchangeRateInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CalcExchangeRateInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.InvestDepositsInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.InvestDepositsInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.SweepingRewardsInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SweepingRewardsInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SweepingRewardsInterval != 0 {
		n += 1 + sovParams(uint64(m.SweepingRewardsInterval))
	}
	if m.InvestDepositsInterval != 0 {
		n += 1 + sovParams(uint64(m.InvestDepositsInterval))
	}
	if m.CalcExchangeRateInterval != 0 {
		n += 1 + sovParams(uint64(m.CalcExchangeRateInterval))
	}
	if m.StrideFee != 0 {
		n += 9
	}
	if len(m.ZoneFeeAddress) > 0 {
		for k, v := range m.ZoneFeeAddress {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + 1 + len(v) + sovParams(uint64(len(v)))
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SweepingRewardsInterval", wireType)
			}
			m.SweepingRewardsInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SweepingRewardsInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestDepositsInterval", wireType)
			}
			m.InvestDepositsInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvestDepositsInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcExchangeRateInterval", wireType)
			}
			m.CalcExchangeRateInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CalcExchangeRateInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrideFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StrideFee = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneFeeAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZoneFeeAddress == nil {
				m.ZoneFeeAddress = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ZoneFeeAddress[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
