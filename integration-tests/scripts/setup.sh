#!/bin/bash

set -e

LOCAL_MODE=${1:-false}

CHAIN_NAME=stride
BINARY=strided
DENOM=ustrd
VALIDATOR_BALANCE=10000000
MICRO_DENOM_UNITS=000000
CHAIN_HOME=.stride
SHARED_DIR=shared
NUM_VALIDATORS=1

STRIDE_DAY_EPOCH_DURATION="140s"
STRIDE_EPOCH_EPOCH_DURATION="35s"
MAX_DEPOSIT_PERIOD="30s"
VOTING_PERIOD="30s"
UNBONDING_TIME="240s"
BLOCK_TIME=1s

# check if the binary has genesis subcommand or not, if not, set CHAIN_GENESIS_CMD to empty
CHAIN_GENESIS_CMD=$($BINARY 2>&1 | grep -q "genesis-related subcommands" && echo "genesis" || echo "")

jq_inplace() {
    jq_filter="$1"
    file="$2"
    
    jq "$jq_filter" "$file" > /tmp/$(basename $file) && mv /tmp/$(basename $file) ${file}
}

# If this is being run locally, don't overwrite the main chain folder
if [[ "$LOCAL_MODE" == "true" ]]; then
    CHAIN_HOME=state
    rm -rf state
    BINARY="$BINARY --home $CHAIN_HOME"
fi

moniker=${CHAIN_NAME}1
chain_id=${CHAIN_NAME}-test-1

$BINARY init $moniker --chain-id $chain_id --overwrite 

$BINARY config keyring-backend test

validator_public_keys=""
for (( i=1; i <= $NUM_VALIDATORS; i++ )); do
    validator_config=$(jq -r '.validators[$index]' --argjson index "$((i-1))" config/keys.json)
    name=$(echo $validator_config | jq -r '.name')
    mnemonic=$(echo $validator_config | jq -r '.mnemonic')

    echo $mnemonic | $BINARY keys add $name --recover 
    address=$($BINARY keys show $name -a)

    genesis_balance=${VALIDATOR_BALANCE}${MICRO_DENOM_UNITS}${DENOM}
    $BINARY $CHAIN_GENESIS_CMD add-genesis-account $address $genesis_balance

    validator_home=/tmp/${CHAIN_NAME}-${name}
    $BINARY init $CHAIN_NAME-$name --chain-id $chain_id --overwrite --home ${validator_home} &> /dev/null
    node_id=$($BINARY tendermint show-node-id --home ${validator_home})

    mkdir -p ${SHARED_DIR}/validator_keys
    mkdir -p ${SHARED_DIR}/node_ids

    mv ${validator_home}/config/priv_validator_key.json ${SHARED_DIR}/validator_keys/${name}.json
    echo $node_id > ${SHARED_DIR}/node_ids/${name}.json

    validator_public_keys+="$(jq -r '.pub_key.value' ${SHARED_DIR}/validator_keys/${name}.json),"
done

config_toml="${CHAIN_HOME}/config/config.toml"
client_toml="${CHAIN_HOME}/config/client.toml"
app_toml="${CHAIN_HOME}/config/app.toml"
genesis_json=${CHAIN_HOME}/config/genesis.json

sed -i -E "s|\"stake\"|\"${DENOM}\"|g" $genesis_json 

jq_inplace '(.app_state.epochs.epochs[] | select(.identifier=="day") ).duration |= "'$STRIDE_DAY_EPOCH_DURATION'"' $genesis_json 
jq_inplace '(.app_state.epochs.epochs[] | select(.identifier=="stride_epoch") ).duration |= "'$STRIDE_EPOCH_EPOCH_DURATION'"' $genesis_json 
jq_inplace '.app_state.gov.params.max_deposit_period |= "'$MAX_DEPOSIT_PERIOD'"' $genesis_json 
jq_inplace '.app_state.gov.params.voting_period |= "'$VOTING_PERIOD'"' $genesis_json 

$BINARY add-consumer-section --validator-public-keys $validator_public_keys

# wipe out the persistent peers for the main node (these are incorrectly autogenerated for each validator during collect-gentxs)
sed -i -E "s|^persistent_peers = .*|persistent_peers = \"\"|g" $config_toml

sed -i -E "s|cors_allowed_origins = \[\]|cors_allowed_origins = [\"\*\"]|g" $config_toml
sed -i -E "s|127.0.0.1|0.0.0.0|g" $config_toml
sed -i -E "s|timeout_commit = \"5s\"|timeout_commit = \"${BLOCK_TIME}\"|g" $config_toml
sed -i -E "s|prometheus = false|prometheus = true|g" $config_toml

sed -i -E "s|minimum-gas-prices = \".*\"|minimum-gas-prices = \"0${DENOM}\"|g" $app_toml
sed -i -E '/\[api\]/,/^enable = .*$/ s/^enable = .*$/enable = true/' $app_toml
sed -i -E 's|unsafe-cors = .*|unsafe-cors = true|g' $app_toml
sed -i -E 's|localhost|0.0.0.0|g' $app_toml

sed -i -E "s|chain-id = \"\"|chain-id = \"${CHAIN_ID}\"|g" $client_toml
sed -i -E "s|keyring-backend = \"os\"|keyring-backend = \"test\"|g" $client_toml
sed -i -E "s|node = \".*\"|node = \"tcp://localhost:$RPC_PORT\"|g" $client_toml

sed -i -E "s|\"stake\"|\"${DENOM}\"|g" $genesis_json 
sed -i -E "s|\"aphoton\"|\"${DENOM}\"|g" $genesis_json # ethermint default

mv ${SHARED_DIR}/validator_keys/val1.json ${CHAIN_HOME}/config/priv_validator_key.json
