syntax = "proto3";
package Stridelabs.stride.stakeibc;

import "stakeibc/validator.proto";
import "stakeibc/ica_account.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "records/genesis.proto";

option go_package = "github.com/Stride-Labs/stride/x/stakeibc/types";

// next id: 19
message HostZone {
  string chainId = 1;
  string connectionId = 2;
  string bech32prefix = 17;
  string transferChannelId = 12;
  repeated Validator validators = 3;
  repeated Validator blacklistedValidators = 4;
  ICAAccount withdrawalAccount = 5;
  ICAAccount feeAccount = 6; 
  ICAAccount delegationAccount = 7;
  ICAAccount redemptionAccount = 16;
  // ibc denom on stride
  string IBCDenom = 8;
  // native denom on host zone
  string HostDenom = 9;
  // TODO(TEST-68): Should we make this an array and store the last n redemption rates
  // then calculate a TWARR?
  string LastRedemptionRate = 10 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string RedemptionRate = 11 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // stores how many days we should wait before issuing unbondings
  uint64 unbondingFrequency = 14;
  //TODO(TEST-101) int to dec
  uint64 stakedBal = 13;
  string address = 18 [ (gogoproto.moretags) = "yaml:\"address\"" ];
  reserved 15;
}
