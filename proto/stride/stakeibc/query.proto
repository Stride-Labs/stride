syntax = "proto3";
package stride.stakeibc;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "stride/stakeibc/params.proto";
import "stride/stakeibc/validator.proto";
import "stride/stakeibc/ica_account.proto";
import "stride/stakeibc/host_zone.proto";
import "stride/stakeibc/epoch_tracker.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/Stride-Labs/stride/x/stakeibc/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/Stridelabs/stride/stakeibc/params";
  }
  // Queries a Validator by host zone.
  rpc Validators(QueryValidatorsRequest)
      returns (QueryValidatorsResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/stakeibc/validators/{chain_id}";
  }
  // Queries a ICAAccount by index.
  rpc ICAAccount(QueryICAAccountRequest)
      returns (QueryICAAccountResponse) {
    option (google.api.http).get = "/Stride-Labs/stride/stakeibc/ica_account";
  }
  // Queries a HostZone by id.
  rpc HostZone(QueryHostZoneRequest) returns (QueryHostZoneResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/stakeibc/host_zone/{chain_id}";
  }

  // Queries a list of HostZone items.
  rpc HostZoneAll(QueryHostZoneAllRequest) returns (QueryHostZoneAllResponse) {
    option (google.api.http).get = "/Stride-Labs/stride/stakeibc/host_zone";
  }

  // Queries a list of ModuleAddress items.
  rpc ModuleAddress(QueryModuleAddressRequest)
      returns (QueryModuleAddressResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/stakeibc/module_address/{name}";
  }
  // QueryInterchainAccountFromAddress returns the interchain account for given
  // owner address on a given connection pair
  rpc InterchainAccountFromAddress(QueryInterchainAccountFromAddressRequest)
      returns (QueryInterchainAccountFromAddressResponse);

  // Queries a EpochTracker by index.
  rpc EpochTracker(QueryEpochTrackerRequest)
      returns (QueryEpochTrackerResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/stakeibc/epoch_tracker/{epochIdentifier}";
  }

  // Queries a list of EpochTracker items.
  rpc EpochTrackerAll(QueryEpochTrackerAllRequest)
      returns (QueryEpochTrackerAllResponse) {
    option (google.api.http).get = "/Stride-Labs/stride/stakeibc/epoch_tracker";
  }

  // this line is used by starport scaffolding # 2
}

// QueryInterchainAccountFromAddressRequest is the request type for the
// Query/InterchainAccountAddress RPC
message QueryInterchainAccountFromAddressRequest {
  string owner = 1;
  string connection_id = 2 [ (gogoproto.moretags) = "yaml:\"connection_id\"" ];
}

// QueryInterchainAccountFromAddressResponse the response type for the
// Query/InterchainAccountAddress RPC
message QueryInterchainAccountFromAddressResponse {
  string interchain_account_address = 1
      [ (gogoproto.moretags) = "yaml:\"interchain_account_address\"" ];
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryValidatorsRequest { string chain_id = 1; }

message QueryValidatorsResponse { repeated Validator validators = 1; }

message QueryICAAccountRequest {}

message QueryICAAccountResponse {
  ICAAccount ica_account = 1 [ (gogoproto.nullable) = false ];
}
message QueryHostZoneRequest { string chain_id = 1; }

message QueryHostZoneResponse {
  HostZone host_zone = 1 [ (gogoproto.nullable) = false ];
}

message QueryHostZoneAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryHostZoneAllResponse {
  repeated HostZone host_zone = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryModuleAddressRequest { string name = 1; }

message QueryModuleAddressResponse { string addr = 1; }

message QueryEpochTrackerRequest { string epoch_identifier = 1; }

message QueryEpochTrackerResponse {
  EpochTracker epoch_tracker = 1 [ (gogoproto.nullable) = false ];
}

message QueryEpochTrackerAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryEpochTrackerAllResponse {
  repeated EpochTracker epoch_tracker = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
