syntax = "proto3";
package stride.records;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "stride/records/genesis.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/Stride-Labs/stride/x/records/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/StrideLabs/stride/records/params";
  }
  // Queries a UserRedemptionRecord by id.
  rpc UserRedemptionRecord(QueryUserRedemptionRecordRequest)
      returns (QueryUserRedemptionRecordResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/records/user_redemption_record/{id}";
  }

  // Queries a list of UserRedemptionRecord items.
  rpc UserRedemptionRecordAll(QueryUserRedemptionRecordAllRequest)
      returns (QueryUserRedemptionRecordAllResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/records/user_redemption_record";
  }

  // Queries a list of UserRedemptionRecord items by chainId / userId pair.
  rpc UserRedemptionRecordForUser(QueryUserRedemptionRecordForUserRequest)
      returns (QueryUserRedemptionRecordForUserResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/records/user_redemption_record_for_user/{chainId}/"
        "{day}/{address}/{limit}";
  }

  // Queries a EpochUnbondingRecord by id.
  rpc EpochUnbondingRecord(QueryEpochUnbondingRecordRequest)
      returns (QueryEpochUnbondingRecordResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/records/epoch_unbonding_record/{epochNumber}";
  }

  // Queries a list of EpochUnbondingRecord items.
  rpc EpochUnbondingRecordAll(QueryEpochUnbondingRecordAllRequest)
      returns (QueryEpochUnbondingRecordAllResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/records/epoch_unbonding_record";
  }

  // this line is used by starport scaffolding # 2

  // Queries a DepositRecord by id.
  rpc DepositRecord(QueryDepositRecordRequest)
      returns (QueryDepositRecordResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/records/deposit_record/{id}";
  }

  // Queries a list of DepositRecord items.
  rpc DepositRecordAll(QueryDepositRecordAllRequest)
      returns (QueryDepositRecordAllResponse) {
    option (google.api.http).get = "/Stride-Labs/stride/records/deposit_record";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryDepositRecordRequest { uint64 id = 1; }

message QueryDepositRecordResponse {
  DepositRecord deposit_record = 1 [ (gogoproto.nullable) = false ];
}

message QueryDepositRecordAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryDepositRecordAllResponse {
  repeated DepositRecord deposit_record = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryUserRedemptionRecordRequest { string id = 1; }

message QueryUserRedemptionRecordResponse {
  UserRedemptionRecord user_redemption_record = 1
      [ (gogoproto.nullable) = false ];
}

message QueryUserRedemptionRecordAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryUserRedemptionRecordAllResponse {
  repeated UserRedemptionRecord user_redemption_record = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Query UserRedemptionRecords by chainId / userId pair
message QueryUserRedemptionRecordForUserRequest {
  string chain_id = 1;
  uint64 day = 2;
  string address = 3;
  uint64 limit = 4;
  cosmos.base.query.v1beta1.PageRequest pagination = 5;
}

message QueryUserRedemptionRecordForUserResponse {
  repeated UserRedemptionRecord user_redemption_record = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryEpochUnbondingRecordRequest { uint64 epoch_number = 1; }

message QueryEpochUnbondingRecordResponse {
  EpochUnbondingRecord epoch_unbonding_record = 1
      [ (gogoproto.nullable) = false ];
}

message QueryEpochUnbondingRecordAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryEpochUnbondingRecordAllResponse {
  repeated EpochUnbondingRecord epoch_unbonding_record = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
