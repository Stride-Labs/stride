syntax = "proto3";
package stride.claim;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/Stride-Labs/stride/v26/x/claim/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc SetAirdropAllocations(MsgSetAirdropAllocations)
      returns (MsgSetAirdropAllocationsResponse);
  rpc ClaimFreeAmount(MsgClaimFreeAmount) returns (MsgClaimFreeAmountResponse);
  rpc CreateAirdrop(MsgCreateAirdrop) returns (MsgCreateAirdropResponse);
  rpc DeleteAirdrop(MsgDeleteAirdrop) returns (MsgDeleteAirdropResponse);
}

message MsgSetAirdropAllocations {
  option (cosmos.msg.v1.signer) = "allocator";
  option (amino.name) = "claim/MsgSetAirdropAllocations";

  string allocator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string airdrop_identifier = 2
      [ (gogoproto.moretags) = "yaml:\"airdrop_identifier\"" ];
  repeated string users = 3;
  repeated string weights = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"weights\""
  ];
}

message MsgSetAirdropAllocationsResponse {}

message MsgClaimFreeAmount {
  option (cosmos.msg.v1.signer) = "user";
  option (amino.name) = "claim/MsgClaimFreeAmount";

  string user = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message MsgClaimFreeAmountResponse {
  repeated cosmos.base.v1beta1.Coin claimed_amount = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgCreateAirdrop {
  option (cosmos.msg.v1.signer) = "distributor";
  option (amino.name) = "claim/MsgCreateAirdrop";

  string distributor = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string identifier = 2;
  string chain_id = 6;
  string denom = 5;
  uint64 start_time = 3;
  uint64 duration = 4;
  bool autopilot_enabled = 7;
}

message MsgCreateAirdropResponse {}

message MsgDeleteAirdrop {
  option (cosmos.msg.v1.signer) = "distributor";
  option (amino.name) = "claim/MsgDeleteAirdrop";

  string distributor = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string identifier = 2;
}

message MsgDeleteAirdropResponse {}
