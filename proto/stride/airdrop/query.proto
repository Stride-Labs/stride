
syntax = "proto3";
package stride.airdrop;

import "stride/airdrop/airdrop.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/Stride-Labs/stride/v22/x/airdrop/types";

// Query defines the gRPC querier service.
service Query {
  // Queries the configuration for a given airdrop
  rpc Airdrop(QueryAirdropRequest) returns (QueryAirdropResponse) {
    option (google.api.http).get = "/Stride-Labs/stride/airdrop/airdrop/{id}";
  }

  // Queries all airdrop configurations
  rpc AllAirdrops(QueryAllAirdropsRequest) returns (QueryAllAirdropsResponse) {
    option (google.api.http).get = "/Stride-Labs/stride/airdrop/airdrops";
  }

  // Queries the allocation for a given user for an airdrop
  rpc UserAllocation(QueryUserAllocationRequest)
      returns (QueryUserAllocationResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/airdrop/user_allocation/{airdrop_id}/{address}";
  }

  // Queries the allocations for a given user across all airdrops
  rpc UserAllocations(QueryUserAllocationsRequest)
      returns (QueryUserAllocationsResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/airdrop/user_allocations/{address}";
  }

  // Queries all allocations across all addresses
  rpc AllAllocations(QueryAllAllocationsRequest)
      returns (QueryAllAllocationsResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/airdrop/all_allocations/{airdrop_id}";
  }

  // Queries the state of an address for an airdrop including the claim type,
  // amount claimed so far, and unclaimed amount
  rpc UserSummary(QueryUserSummaryRequest) returns (QueryUserSummaryResponse) {
    option (google.api.http).get =
        "/Stride-Labs/stride/airdrop/user_summary/{airdrop_id}/{address}";
  }
}

// Airdrop
message QueryAirdropRequest { string id = 1; };
message QueryAirdropResponse { Airdrop airdrop = 1; }

// Airdrops
message QueryAllAirdropsRequest {};
message QueryAllAirdropsResponse {
  repeated Airdrop airdrops = 1 [ (gogoproto.nullable) = false ];
}

// UserAllocation
message QueryUserAllocationRequest {
  string airdrop_id = 1;
  string address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
};
message QueryUserAllocationResponse { UserAllocation user_allocation = 1; }

// UserAllocations
message QueryUserAllocationsRequest {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
};
message QueryUserAllocationsResponse {
  repeated UserAllocation user_allocations = 1 [ (gogoproto.nullable) = false ];
}

// AllAllocations
message QueryAllAllocationsRequest {
  string airdrop_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
};
message QueryAllAllocationsResponse {
  repeated UserAllocation allocations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// UserSummary
message QueryUserSummaryRequest {
  string airdrop_id = 1;
  string address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
};
message QueryUserSummaryResponse {
  string claim_type = 1;
  string claimed = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"
  ];
  string remaining = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"
  ];
}
