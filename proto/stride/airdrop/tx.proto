
syntax = "proto3";
package stride.airdrop;

import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/Stride-Labs/stride/v22/x/airdrop/types";

// Msg defines the Msg service.
service Msg {
  // User facing messages:

  // User transaction to claim all the pending daily airdrop rewards
  rpc ClaimDaily(MsgClaimDaily) returns (MsgClaimDailyResponse);

  // User transaction to claim half of their total amount now, and forfeit the
  // other half to be clawed back
  rpc ClaimEarly(MsgClaimEarly) returns (MsgClaimEarlyResponse);

  // User transaction to claim and automatically lock stake their whole airdrop
  // amount now. The funds can be unstaked by the user once the airdrop is over
  rpc ClaimAndStake(MsgClaimAndStake) returns (MsgClaimAndStakeResponse);

  // Admin facing messages:

  // TODO
}

// ClaimDaily
message MsgClaimDaily {
  option (cosmos.msg.v1.signer) = "claimer";
  option (amino.name) = "airdrop/MsgClaimDaily";

  string claimer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
message MsgClaimDailyResponse {}

// ClaimEarly
message MsgClaimEarly {
  option (cosmos.msg.v1.signer) = "claimer";
  option (amino.name) = "airdrop/MsgClaimEarly";

  string claimer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
message MsgClaimEarlyResponse {}

// ClaimAndStake
message MsgClaimAndStake {
  option (cosmos.msg.v1.signer) = "claimer";
  option (amino.name) = "airdrop/MsgClaimAndStake";

  string claimer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
message MsgClaimAndStakeResponse {}
