
syntax = "proto3";
package stride.airdrop;

import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/Stride-Labs/stride/v25/x/airdrop/types";

// Msg defines the Msg service.
service Msg {
  // User transaction to claim all the pending daily airdrop rewards
  rpc ClaimDaily(MsgClaimDaily) returns (MsgClaimDailyResponse);

  // User transaction to claim a portion of their total amount now, and forfeit
  // the remainder to be clawed back
  rpc ClaimEarly(MsgClaimEarly) returns (MsgClaimEarlyResponse);

  // Admin transaction to create a new airdrop
  rpc CreateAirdrop(MsgCreateAirdrop) returns (MsgCreateAirdropResponse);

  // Admin transaction to update an existing airdrop
  rpc UpdateAirdrop(MsgUpdateAirdrop) returns (MsgUpdateAirdropResponse);

  // Admin transaction to add multiple user allocations for a given airdrop
  rpc AddAllocations(MsgAddAllocations) returns (MsgAddAllocationsResponse);

  // Admin transaction to update a user's allocation to an airdrop
  rpc UpdateUserAllocation(MsgUpdateUserAllocation)
      returns (MsgUpdateUserAllocationResponse);

  // Admin address to link a stride and non-stride address, merging their
  // allocations
  rpc LinkAddresses(MsgLinkAddresses) returns (MsgLinkAddressesResponse);
}

// ClaimDaily
message MsgClaimDaily {
  option (cosmos.msg.v1.signer) = "claimer";
  option (amino.name) = "airdrop/MsgClaimDaily";

  // Address of the claimer
  string claimer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Airdrop ID
  string airdrop_id = 2;
}
message MsgClaimDailyResponse {}

// ClaimEarly
message MsgClaimEarly {
  option (cosmos.msg.v1.signer) = "claimer";
  option (amino.name) = "airdrop/MsgClaimEarly";

  // Address of the claimer
  string claimer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Airdrop ID
  string airdrop_id = 2;
}
message MsgClaimEarlyResponse {}

// CreateAirdrop
message MsgCreateAirdrop {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name) = "airdrop/MsgCreateAirdrop";

  // Airdrop admin address
  string admin = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Airdrop ID
  string airdrop_id = 2;

  // Denom used when distributing rewards
  string reward_denom = 3;

  // The first date that claiming begins and rewards are distributed
  google.protobuf.Timestamp distribution_start_date = 4
      [ (gogoproto.stdtime) = true ];

  // The last date for rewards to be distributed. Immediately after this date
  // the rewards can no longer be claimed, but rewards have not been clawed back
  // yet
  google.protobuf.Timestamp distribution_end_date = 5
      [ (gogoproto.stdtime) = true ];

  // Date with which the rewards are clawed back (occurs after the distribution
  // end date)
  google.protobuf.Timestamp clawback_date = 6 [ (gogoproto.stdtime) = true ];

  // Deadline for the user to make a decision on their claim type
  google.protobuf.Timestamp claim_type_deadline_date = 7
      [ (gogoproto.stdtime) = true ];

  // Penalty for claiming rewards early - e.g. 0.5 means claiming early will
  // result in losing 50% of rewards
  string early_claim_penalty = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // Account that holds the total reward balance and distributes to users
  string distributor_address = 9
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Admin account with permissions to add or update allocations
  string allocator_address = 10
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Admin account with permissions to link addresseses
  string linker_address = 11 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
message MsgCreateAirdropResponse {}

// UpdateAirdrop
message MsgUpdateAirdrop {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name) = "airdrop/MsgUpdateAirdrop";

  // Airdrop admin address
  string admin = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Airdrop ID
  string airdrop_id = 2;

  // Denom used when distributing rewards
  string reward_denom = 3;

  // The first date that claiming begins and rewards are distributed
  google.protobuf.Timestamp distribution_start_date = 4
      [ (gogoproto.stdtime) = true ];

  // The last date for rewards to be distributed. Immediately after this date
  // the rewards can no longer be claimed, but rewards have not been clawed back
  // yet
  google.protobuf.Timestamp distribution_end_date = 5
      [ (gogoproto.stdtime) = true ];

  // Date with which the rewards are clawed back (occurs after the distribution
  // end date)
  google.protobuf.Timestamp clawback_date = 6 [ (gogoproto.stdtime) = true ];

  // Deadline for the user to make a decision on their claim type
  google.protobuf.Timestamp claim_type_deadline_date = 7
      [ (gogoproto.stdtime) = true ];

  // Penalty for claiming rewards early - e.g. 0.5 means claiming early will
  // result in losing 50% of rewards
  string early_claim_penalty = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // Account that holds the total reward balance and distributes to users
  string distributor_address = 9
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Admin account with permissions to add or update allocations
  string allocator_address = 10
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Admin account with permissions to link addresseses
  string linker_address = 11 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
message MsgUpdateAirdropResponse {}

// Allocation specification when bootstrapping reward data
message RawAllocation {
  string user_address = 1;
  repeated string allocations = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "cosmossdk.io/math.Int"
  ];
}

// AddAllocations
message MsgAddAllocations {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name) = "airdrop/MsgAddAllocations";

  // Airdrop admin address
  string admin = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Airdrop ID
  string airdrop_id = 2;

  // List of address/allocation pairs for each user
  repeated RawAllocation allocations = 3 [ (gogoproto.nullable) = false ];
}
message MsgAddAllocationsResponse {}

// UpdateUserAllocation
message MsgUpdateUserAllocation {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name) = "airdrop/MsgUpdateUserAllocation";

  // Airdrop admin address
  string admin = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Airdrop ID
  string airdrop_id = 2;

  // Address of the airdrop recipient
  string user_address = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Allocations - as an array where each element represents the rewards for a
  // day
  repeated string allocations = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "cosmossdk.io/math.Int"
  ];
}
message MsgUpdateUserAllocationResponse {}

// LinkAddresses
message MsgLinkAddresses {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name) = "airdrop/MsgLinkAddresses";

  // Airdrop admin address
  string admin = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Airdrop ID
  string airdrop_id = 2;

  // Stride address - this address may or may not exist in allocations yet
  string stride_address = 3;

  // Host address - this address must exist
  string host_address = 4 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
message MsgLinkAddressesResponse {}